<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jkzhao&#39;s blog</title>
  <subtitle>学习 总结 思考</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-01T13:52:10.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhao Jiankai</name>
    <email>jk.zhaocoder@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RabbitMQ介绍及安装部署</title>
    <link href="http://yoursite.com/2017/06/01/RabbitMQ%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2017/06/01/RabbitMQ介绍及安装部署/</id>
    <published>2017-06-01T13:52:10.000Z</published>
    <updated>2017-06-01T13:52:10.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kafka介绍及安装部署</title>
    <link href="http://yoursite.com/2017/05/28/Kafka%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2017/05/28/Kafka介绍及安装部署/</id>
    <published>2017-05-28T11:46:22.000Z</published>
    <updated>2017-06-02T06:29:47.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;消息中间件&quot;&gt;&lt;a href=&quot;#消息中间件&quot; class=&quot;headerlink&quot; title=&quot;消息中间件&quot;&gt;&lt;/a&gt;消息中间件&lt;/h2&gt;&lt;p&gt;消息中间件是在消息的传输过程中保存消息的容器。消息中间件在将消息从消息生产者到消费者时充当中间人的作用。队列的主要目的是提供路由并保证消息的传送；如果发送消息时接收者不可用，消息对列会保留消息，直到可以成功地传递它为止，当然，消息队列保存消息也是有期限的。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;消息中间件特点&quot;&gt;&lt;a href=&quot;#消息中间件特点&quot; class=&quot;headerlink&quot; title=&quot;消息中间件特点&quot;&gt;&lt;/a&gt;消息中间件特点&lt;/h2&gt;&lt;p&gt;1.采用异步处理模式&lt;br&gt;消息发送者可以发送一个消息而无须等待响应。消息发送者将消息发送到一条虚拟的通道（主题或者队列）上，消息接收者则订阅或者监听该通道。一条消息可能最终转发给一个或多个消息接收者，这些接收者都无需对消息发送者做出同步回应。整个过程是异步的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如用户信息注册。注册完成后过段时间发送邮件或者短信。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.应用程序和应用程序调用关系为松耦合关系&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送者和接收者不必要了解对方、只需要确认消息&lt;/li&gt;
&lt;li&gt;发送者和接收者不必同时在线&lt;br&gt;比如在线交易系统为了保证数据的最终一致，在支付系统处理完成后会把支付结果放到信息中间件里通知订单系统修改订单支付状态。两个系统通过消息中间件解耦。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;消息中间件的传递模型&quot;&gt;&lt;a href=&quot;#消息中间件的传递模型&quot; class=&quot;headerlink&quot; title=&quot;消息中间件的传递模型&quot;&gt;&lt;/a&gt;消息中间件的传递模型&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.点对点模型(PTP)&lt;/strong&gt;&lt;br&gt;点对点模型用于消息生产者和消息消费者之间点对点的通信。消息生产者将消息发送到由某个名字标识的特定消费者。这个名字实际上对应于消费服务中的一个队列(Queue)，在消息传递给消费者之前它被存储在这个队列中。队列消息可以放在内存中也可以是持久的，以保证在消息服务出现故障时仍然能够传递消息。&lt;br&gt;点对点模型特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个消息只有一个消费者&lt;/li&gt;
&lt;li&gt;发送者和接受者没有时间依赖&lt;/li&gt;
&lt;li&gt;接受者确认消息接受和处理成功&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/Kafka/1.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2.发布—订阅模型(Pub/Sub)&lt;/strong&gt;&lt;br&gt;发布者/订阅者模型支持向一个特定的消息主题生产消息。0或多个订阅者可能对接收来自特定消息主题的消息感兴趣。在这种模型下，发布者和订阅者彼此不知道对方。这种模式好比是匿名公告板。这种模式被概括为：多个消费者可以获得消息。在发布者和订阅者之间存在时间依赖性。发布者需要建立一个订阅(subscription)，以便能够让消费者订阅。订阅者必须保持持续的活动状态以接收消息，除非订阅者建立了持久的订阅。在这种情况下，在订阅者未连接时发布的消息将在订阅者重新连接时重新发布。&lt;br&gt;其实消息中间件，像MySQL其实也可以作为消息中间件，只要你把消息中间件原理搞清楚，你会发现目前所有的存储，包括NoSQL，只要支持顺序性东西的，就可以作为一个消息中间件。就看你怎么去利用它了。就像redis里面那个队列list，就可以作为一个消息队列。&lt;br&gt;发布—订阅模型特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个消息可以有多个订阅者&lt;/li&gt;
&lt;li&gt;客户端只有订阅后才能接收到消息&lt;/li&gt;
&lt;li&gt;持久订阅和非持久订阅&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/Kafka/2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;(1)发布者和订阅者有时间依赖&lt;br&gt;接收者和发布者只有建立订阅关系才能收到消息。&lt;br&gt;(2)持久订阅&lt;br&gt;订阅关系建立后，消息就不会消失，不管订阅者是否在线。&lt;br&gt;(3)非持久订阅&lt;br&gt;订阅者为了接收消息，必须一直在线&lt;br&gt;当只有一个订阅者时约等于点对点模式。&lt;br&gt;&lt;strong&gt;大部分情况下会使用持久订阅。常用的消息队列有Kafka、RabbitMQ、ActiveMQ、metaq等&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Kafka介绍&quot;&gt;&lt;a href=&quot;#Kafka介绍&quot; class=&quot;headerlink&quot; title=&quot;Kafka介绍&quot;&gt;&lt;/a&gt;Kafka介绍&lt;/h2&gt;&lt;p&gt;Kafka是一种分布式消息系统，由LinkedIn使用Scala编写，用作LinkedIn的活动流(Activity Stream)和运营数据处理管道(Pipeline)的基础，具有高水平扩展和高吞吐量。&lt;br&gt;目前越来越多的开源分布式处理系统如Apache flume、Apache Storm、Spark、Elasticsearch都支持与Kafka集成。&lt;/p&gt;
&lt;h2 id=&quot;安装部署Kafka集群&quot;&gt;&lt;a href=&quot;#安装部署Kafka集群&quot; class=&quot;headerlink&quot; title=&quot;安装部署Kafka集群&quot;&gt;&lt;/a&gt;安装部署Kafka集群&lt;/h2&gt;&lt;h3 id=&quot;环境信息&quot;&gt;&lt;a href=&quot;#环境信息&quot; class=&quot;headerlink&quot; title=&quot;环境信息&quot;&gt;&lt;/a&gt;环境信息&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;主机名&lt;/th&gt;
&lt;th&gt;操作系统版本&lt;/th&gt;
&lt;th&gt;IP地址&lt;/th&gt;
&lt;th&gt;安装软件&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;log1&lt;/td&gt;
&lt;td&gt;CentOS 7.0&lt;/td&gt;
&lt;td&gt;114.55.29.86&lt;/td&gt;
&lt;td&gt;JDK1.7、kafka_2.11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;log2&lt;/td&gt;
&lt;td&gt;CentOS 7.0&lt;/td&gt;
&lt;td&gt;114.55.29.241&lt;/td&gt;
&lt;td&gt;JDK1.7、kafka_2.11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;log3&lt;/td&gt;
&lt;td&gt;CentOS 7.0&lt;/td&gt;
&lt;td&gt;114.55.253.15&lt;/td&gt;
&lt;td&gt;JDK1.7、kafka_2.11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;安装JDK1-7&quot;&gt;&lt;a href=&quot;#安装JDK1-7&quot; class=&quot;headerlink&quot; title=&quot;安装JDK1.7&quot;&gt;&lt;/a&gt;安装JDK1.7&lt;/h3&gt;&lt;p&gt;3台机器都需要安装JDK1.7。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@log1 local]# mkdir /usr/java
[root@log1 local]# tar zxf jdk-7u80-linux-x64.gz -C /usr/java/
[root@log1 local]# vim /etc/profile
export JAVA_HOME=/usr/java/jdk1.7.0_80
export PATH=$JAVA_HOME/bin:$PATH
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
[root@log1 local]# source /etc/profile
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;安装集群&quot;&gt;&lt;a href=&quot;#安装集群&quot; class=&quot;headerlink&quot; title=&quot;安装集群&quot;&gt;&lt;/a&gt;安装集群&lt;/h3&gt;&lt;p&gt;需要先安装好Zookeeper集群，见之前的文章《Zookeeper介绍及安装部署》。&lt;br&gt;1.创建消息持久化目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@log1 ~]# mkdir /kafkaLogs
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.下载解压kafka，版本是kafka_2.11-0.9.0.1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@log1 local]# wget http://mirrors.cnnic.cn/apache/kafka/0.9.0.1/kafka_2.11-0.9.0.1.tgz
[root@log1 local]# tar zxf kafka_2.11-0.9.0.1.tgz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3.修改配置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@log1 local]# cd kafka_2.11-0.9.0.1/config/
[root@log1 config]# vim server.properties
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(1)修改broker.id&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/Kafka/3.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;(2)修改kafka监听地址&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/Kafka/4.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;strong&gt;注意: advertised.host.name参数用来配置返回的host.name值，把这个参数配置为IP地址。这样客户端在使用java.net.InetAddress.getCanonicalHostName()获取时拿到的就是ip地址而不是主机名。&lt;/strong&gt;&lt;br&gt;(3)修改消息持久化目录&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/Kafka/5.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;(4)修改zk地址&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/Kafka/6.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;(5)添加启用删除topic配置&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/Kafka/7.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;(6)关闭自动创建topic&lt;br&gt;是否允许自动创建topic。如果设为true，那么produce，consume或者fetch metadata一个不存在的topic时，就会自动创建一个默认replication factor和partition number的topic。默认是true。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;auto.create.topics.enable=false
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/Kafka/8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;4.把log1的配置好的kafka拷贝到log2和log3上&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@log1 local]# scp -rp kafka_2.11-0.9.0.1 root@114.55.29.241:/usr/local/
[root@log1 local]# scp -rp kafka_2.11-0.9.0.1 root@114.55.253.15:/usr/local/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5.log2和log3主机上创建消息持久化目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@log2 ~]# mkdir /kafkaLogs
[root@log3 ~]# mkdir /kafkaLogs
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;6.修改log2配置文件中的broker.id为1，log3主机的为2&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@log2 config]# vim server.properties
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/Kafka/9.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;启动集群&quot;&gt;&lt;a href=&quot;#启动集群&quot; class=&quot;headerlink&quot; title=&quot;启动集群&quot;&gt;&lt;/a&gt;启动集群&lt;/h3&gt;&lt;p&gt;log1主机启动kafka：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@log1 ~]# cd /usr/local/kafka_2.11-0.9.0.1/
[root@log1 kafka_2.11-0.9.0.1]# JMX_PORT=9997 bin/kafka-server-start.sh -daemon config/server.properties &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/Kafka/10.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;log2主机启动kafka：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@log2 ~]# cd /usr/local/kafka_2.11-0.9.0.1/
[root@log2 kafka_2.11-0.9.0.1]# JMX_PORT=9997 bin/kafka-server-start.sh -daemon config/server.properties &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;log3主机启动kafka：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@log3 ~]# cd /usr/local/kafka_2.11-0.9.0.1/
[root@log3 kafka_2.11-0.9.0.1]# JMX_PORT=9997 bin/kafka-server-start.sh -daemon config/server.properties &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;脚本定期清理logs下的日志文件&quot;&gt;&lt;a href=&quot;#脚本定期清理logs下的日志文件&quot; class=&quot;headerlink&quot; title=&quot;脚本定期清理logs下的日志文件&quot;&gt;&lt;/a&gt;脚本定期清理logs下的日志文件&lt;/h3&gt;&lt;p&gt;默认kafka是按天切割日志的，而且不删除：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/Kafka/11.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;这里写一个简单的脚本来清理这些日志，主要是清理server.log和controller.log。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@log1 ~]# cd /usr/local/kafka_2.11-0.9.0.1/
[root@log1 kafka_2.11-0.9.0.1]# vim clean_kafkalog.sh
#!/bin/bash
###Description:This script is used to clear kafka logs, not message file.
###Written by: jkzhao - jkzhao@wisedu.com  
###History: 2016-04-18 First release.

# log file dir.
logDir=/usr/local/kafka_2.11-0.9.0.1/logs

# Reserved 7 files.
COUNT=7

ls -t $logDir/server.log* | tail -n +$[$COUNT+1] | xargs rm -f
ls -t $logDir/controller.log* | tail -n +$[$COUNT+1] | xargs rm -f
ls -t $logDir/state-change.log* | tail -n +$[$COUNT+1] | xargs rm -f
ls -t $logDir/log-cleaner.log* | tail -n +$[$COUNT+1] | xargs rm –f
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;赋予脚本执行权限：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@log1 kafka_2.11-0.9.0.1]# chmod +x clean_kafkalog.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;周期性任务策略：每周日的0点0分去执行这个脚本。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@log1 logs]# crontab -e
0 0 * * 0 /usr/local/kafka_2.11-0.9.0.1/clean_kafkalog.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/Kafka/12.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;把清理日志的脚本拷贝到第二台和第三台主机：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@log1 kafka_2.11-0.9.0.1]# scp -p clean_kafkalog.sh root@114.55.29.241:/usr/local/kafka_2.11-0.9.0.1
[root@log1 kafka_2.11-0.9.0.1]# scp -p clean_kafkalog.sh root@114.55.253.15:/usr/local/kafka_2.11-0.9.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;同样的需要配置周期性任务策略。&lt;/p&gt;
&lt;h3 id=&quot;停止kafka命令&quot;&gt;&lt;a href=&quot;#停止kafka命令&quot; class=&quot;headerlink&quot; title=&quot;停止kafka命令&quot;&gt;&lt;/a&gt;停止kafka命令&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[root@log1 ~]# /usr/local/kafka_2.11-0.9.0.1/bin/kafka-server-stop.sh
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;测试集群&quot;&gt;&lt;a href=&quot;#测试集群&quot; class=&quot;headerlink&quot; title=&quot;测试集群&quot;&gt;&lt;/a&gt;测试集群&lt;/h3&gt;&lt;p&gt;1.log1主机上创建一个名为test的topic&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@log1 kafka_2.11-0.9.0.1]# bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.log2和log3主机上利用命令行工具创建一个consumer程序&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@log2 kafka_2.11-0.9.0.1]# bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning
[root@log2 kafka_2.11-0.9.0.1]# bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3.log1主机上利用命令行工具创建一个producer程序&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@log1 kafka_2.11-0.9.0.1]# bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;log1主机上终端输入message，然后到log2和log3主机的终端查看&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/Kafka/13.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/Kafka/14.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;创建生产环境topic&quot;&gt;&lt;a href=&quot;#创建生产环境topic&quot; class=&quot;headerlink&quot; title=&quot;创建生产环境topic&quot;&gt;&lt;/a&gt;创建生产环境topic&lt;/h3&gt;&lt;p&gt;如果kafka集群是3台，我们创建一个名为business的Topic，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 2 --partitions 3 --topic business
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意:为Topic创建分区时，–partitions(分区数)最好是broker数量的整数倍，这样才能使一个Topic的分区均匀的分布在整个Kafka集群中。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;Kafka常用命令&quot;&gt;&lt;a href=&quot;#Kafka常用命令&quot; class=&quot;headerlink&quot; title=&quot;Kafka常用命令&quot;&gt;&lt;/a&gt;Kafka常用命令&lt;/h3&gt;&lt;p&gt;1.启动kafka&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nohup bin/kafka-server-start.sh config/server.properties &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.查看topic&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/kafka-topics.sh --list --zookeeper localhost:2181
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3.控制台消费&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic middleware --from-beginning
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4.删除topic&lt;br&gt;(1)删除kafka存储目录（server.properties文件log.dirs配置，默认为”/tmp/kafka-logs”）相关topic目录&lt;br&gt;(2)如果配置了delete.topic.enable=true直接通过命令删除，如果命令删除不掉，直接通过zookeeper-client 删除掉”/brokers/topics/“目录下相关topic节点。&lt;br&gt;&lt;strong&gt;注意: 如果你要删除一个topic并且重建，那么必须重新启动kafka，否则新建的topic在zookeeper的/brokers/topics/test-topic/目录下没有partitions这个目录，也就是没有分区信息。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装Yahoo-kafka-manager&quot;&gt;&lt;a href=&quot;#安装Yahoo-kafka-manager&quot; class=&quot;headerlink&quot; title=&quot;安装Yahoo kafka manager&quot;&gt;&lt;/a&gt;安装Yahoo kafka manager&lt;/h2&gt;&lt;h3 id=&quot;Yahoo-kafka-manager介绍&quot;&gt;&lt;a href=&quot;#Yahoo-kafka-manager介绍&quot; class=&quot;headerlink&quot; title=&quot;Yahoo kafka manager介绍&quot;&gt;&lt;/a&gt;Yahoo kafka manager介绍&lt;/h3&gt;&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/yahoo/kafka-manager&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yahoo/kafka-manager&lt;/a&gt;&lt;br&gt;Requirements：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kafka 0.8.1.1 or 0.8.2.*&lt;/li&gt;
&lt;li&gt;sbt 0.13.x&lt;/li&gt;
&lt;li&gt;Java 8+&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kafka Manager是一个管控台，这款工具主要支持以下几个功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理多个不同的集群；&lt;/li&gt;
&lt;li&gt;很容易地检查集群的状态(topics, brokers, 副本的分布, 分区的分布)；&lt;/li&gt;
&lt;li&gt;选择副本；&lt;/li&gt;
&lt;li&gt;产生分区分配(Generate partition assignments)基于集群的当前状态；&lt;/li&gt;
&lt;li&gt;重新分配分区。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;环境信息-1&quot;&gt;&lt;a href=&quot;#环境信息-1&quot; class=&quot;headerlink&quot; title=&quot;环境信息&quot;&gt;&lt;/a&gt;环境信息&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;主机名&lt;/th&gt;
&lt;th&gt;操作系统版本&lt;/th&gt;
&lt;th&gt;IP地址&lt;/th&gt;
&lt;th&gt;安装软件&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;console&lt;/td&gt;
&lt;td&gt;CentOS 7.0&lt;/td&gt;
&lt;td&gt;114.55.29.246&lt;/td&gt;
&lt;td&gt;JDK1.8、kafka-manager-1.3.0.6.zip&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Kafka Manager可以装在任何一台机器上，我这里部署在一台单独的机器上。&lt;/p&gt;
&lt;h3 id=&quot;安装jdk1-8&quot;&gt;&lt;a href=&quot;#安装jdk1-8&quot; class=&quot;headerlink&quot; title=&quot;安装jdk1.8&quot;&gt;&lt;/a&gt;安装jdk1.8&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[root@console local]# tar zxf jdk-8u73-linux-x64.gz -C /usr/java/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;配置PATH环境变量:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console ~]# vim /etc/profile
export JAVA_HOME=/usr/java/jdk1.8.0_73
export PATH=$JAVA_HOME/bin:$PATH
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;安装sbt0-13-9&quot;&gt;&lt;a href=&quot;#安装sbt0-13-9&quot; class=&quot;headerlink&quot; title=&quot;安装sbt0.13.9&quot;&gt;&lt;/a&gt;安装sbt0.13.9&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[root@console ~]# curl https://bintray.com/sbt/rpm/rpm | sudo tee /etc/yum.repos.d/bintray-sbt-rpm.repo
[root@console ~]# yum install -y sbt
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;构建kafka-manager包&quot;&gt;&lt;a href=&quot;#构建kafka-manager包&quot; class=&quot;headerlink&quot; title=&quot;构建kafka manager包&quot;&gt;&lt;/a&gt;构建kafka manager包&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[root@console ~]# git clone https://github.com/yahoo/kafka-manager.git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/Kafka/15.png&quot; alt=&quot;&quot;&gt;    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console ~]# unzip -oq kafka-manager-upgrade-to-90.zip
[root@console ~]# mv kafka-manager-upgrade-to-90 kafka-manager
[root@console ~]# cd kafka-manager
[root@console kafka-manager]# sbt clean dist
The command below will create a zip file which can be used to deploy the application. 使用sbt编译打包的时候时间可能会比较长。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/Kafka/16.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;这个需要翻墙才能完成。配置代理：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console ~]# vim /usr/share/sbt-launcher-packaging/conf/sbtconfig.txt
-Dhttp.proxyHost=proxy
-Dhttp.proxyPort=8080
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再次运行这个命令，依然需要等待较长的时间，有可能还会失败。如果失败就多次尝试打包：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console kafka-manager]# sbt clean dist
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/Kafka/17.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/Kafka/18.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;打包完成后会创建一个zip压缩包，而这个压缩包可以用来部署该应用。生成的包会在kafka-manager/target/universal 下面。生成的包只需要java环境就可以运行了，在以后部署到其他机器上不需要安装sbt进行打包构建了。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/Kafka/19.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装kafka-manager&quot;&gt;&lt;a href=&quot;#安装kafka-manager&quot; class=&quot;headerlink&quot; title=&quot;安装kafka manager&quot;&gt;&lt;/a&gt;安装kafka manager&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[root@console kafka-manager]# cp target/universal/kafka-manager-1.3.0.6.zip ~/
[root@console kafka-manager]# cd
[root@console ~]# unzip -oq kafka-manager-1.3.0.6.zip
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;配置kafka-manager&quot;&gt;&lt;a href=&quot;#配置kafka-manager&quot; class=&quot;headerlink&quot; title=&quot;配置kafka-manager&quot;&gt;&lt;/a&gt;配置kafka-manager&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[root@console ~]# cd kafka-manager-1.3.0.6/
[root@console kafka-manager-1.3.0.6]# vim conf/application.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;设置zkhosts：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kafka-manager.zkhosts=&amp;quot;114.55.29.246:2181,114.55.29.86:2181,114.55.29.241:2181&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/Kafka/20.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;启动kafka-manager&quot;&gt;&lt;a href=&quot;#启动kafka-manager&quot; class=&quot;headerlink&quot; title=&quot;启动kafka-manager&quot;&gt;&lt;/a&gt;启动kafka-manager&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;[root@console kafka-manager-1.3.0.6]# bin/kafka-manager
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/Kafka/21.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;默认监听的端口是9000。你也可以在启动时指定配置文件和监听端口：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# bin/kafka-manager -Dconfig.file=/path/to/application.conf -Dhttp.port=8080
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;启动并置于后台运行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[kmanager@console kafka-manager-1.3.0.6]$ nohup bin/kafka-manager &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;kafka-manager添加cluster&quot;&gt;&lt;a href=&quot;#kafka-manager添加cluster&quot; class=&quot;headerlink&quot; title=&quot;kafka-manager添加cluster&quot;&gt;&lt;/a&gt;kafka-manager添加cluster&lt;/h2&gt;&lt;p&gt;浏览器输入地址访问：&lt;a href=&quot;http://114.55.29.246:9000/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://114.55.29.246:9000/&lt;/a&gt;&lt;br&gt;&lt;strong&gt;注意:安装完成后需要手动添加Cluster。添加Cluster是指添加一个已有的Kafka集群进入监控列表，而非通过Kafka Manager部署一个新的Kafka Cluster，这一点与Cloudera Manager不同。&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/Kafka/22.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/Kafka/23.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/Kafka/24.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/Kafka/25.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/Kafka/26.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;消息中间件&quot;&gt;&lt;a href=&quot;#消息中间件&quot; class=&quot;headerlink&quot; title=&quot;消息中间件&quot;&gt;&lt;/a&gt;消息中间件&lt;/h2&gt;&lt;p&gt;消息中间件是在消息的传输过程中保存消息的容器。消息中间件在将消息从消息生产者到消费者时充当中间人的作用。队列的主要目的是提供路由并保证消息的传送；如果发送消息时接收者不可用，消息对列会保留消息，直到可以成功地传递它为止，当然，消息队列保存消息也是有期限的。&lt;br&gt;
    
    </summary>
    
    
      <category term="消息队列 Kafka 大数据" scheme="http://yoursite.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-Kafka-%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper介绍及安装部署</title>
    <link href="http://yoursite.com/2017/05/26/Zookeeper%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2017/05/26/Zookeeper介绍及安装部署/</id>
    <published>2017-05-26T01:20:04.000Z</published>
    <updated>2017-05-26T03:26:37.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Zookeeper介绍&quot;&gt;&lt;a href=&quot;#Zookeeper介绍&quot; class=&quot;headerlink&quot; title=&quot;Zookeeper介绍&quot;&gt;&lt;/a&gt;Zookeeper介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;是一个针对大型分布式系统的可靠协调系统；&lt;/li&gt;
&lt;li&gt;提供的功能包括：配置维护、名字服务、分布式同步、组服务等；&lt;/li&gt;
&lt;li&gt;目标就是封装好复杂易出错的关键职务，将简单易用的接口和性能高效、功能稳定的系统提供给用户；&lt;/li&gt;
&lt;li&gt;Zookeeper已经成为Hadoop生态系统中的基础组件。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Zookeeper特点&quot;&gt;&lt;a href=&quot;#Zookeeper特点&quot; class=&quot;headerlink&quot; title=&quot;Zookeeper特点&quot;&gt;&lt;/a&gt;Zookeeper特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;最终一致性：为客户端展示同一视图，这是Zookeeper最重要的性能；&lt;/li&gt;
&lt;li&gt;可靠性：如果消息被一台服务器接受，那么它将被所有的服务器接受；&lt;/li&gt;
&lt;li&gt;原子性：更新只能成功或失败，没有中间状态；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Zookeeper应用场景&quot;&gt;&lt;a href=&quot;#Zookeeper应用场景&quot; class=&quot;headerlink&quot; title=&quot;Zookeeper应用场景&quot;&gt;&lt;/a&gt;Zookeeper应用场景&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;一、统一命名服务&lt;/strong&gt;&lt;br&gt;1.分布式环境下，经常需要对应用/服务进行统一命名，便于识别不同的服务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类似于域名与ip之间对应关系，域名容易记住；&lt;/li&gt;
&lt;li&gt;通过名称来获取资源或服务的地址，提供者信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.按照层次结构组织服务/应用名称&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可将服务名称以及地址信息写在Zookeeper上，客户端通过Zookeeper获取可用服务列表。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;二、配置管理&lt;/strong&gt;&lt;br&gt;1.分布式环境下，配置文件管理和同步是一个常见问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个集群中，所有节点的配置信息是一致的，比如Hadoop；&lt;/li&gt;
&lt;li&gt;对配置文件修改后，希望能够快速同步到各个节点上。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.配置管理可交由Zookeeper实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可将配置信息写入Zookeeper的一个znode上；&lt;/li&gt;
&lt;li&gt;各个节点监听这个znode&lt;/li&gt;
&lt;li&gt;一旦znode中的数据被修改，Zookeeper将会通知各个节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;三、集群管理&lt;/strong&gt;&lt;br&gt;1.分布式环境下，实时掌握每个节点的状态是必要的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可根据节点实时状态做出一些调整。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.可交由Zookeeper实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可将节点信息写入Zookeeper的一个znode上；&lt;/li&gt;
&lt;li&gt;监听这个znode可获得它的实时状态变化。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.典型应用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HBase中Master状态的监控与选举。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;四、分布式通知/协调&lt;/strong&gt;&lt;br&gt;原理其实就是发布/订阅。&lt;br&gt;1.分布式环境下经常存在一个服务需要知道它所管理的子服务的状态&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NameNode需要知道各DataNode的状态&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.心跳检测机制可通过Zookeeper实现&lt;/p&gt;
&lt;p&gt;3.信息推送可由Zookeeper实现(发布/订阅模式)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;五、分布式锁&lt;/strong&gt;&lt;br&gt;1.Zookeeper是强一致性的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多个客户端同时在Zookeeper上创建相同znode，只有一个创建成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.实现锁的独占性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多个客户端同时在Zookeeper上创建相同znode，创建成功的那个客户端得到锁，其他客户端等待。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.控制锁的时序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;各个客户端在某个znode下创建临时znode(类型为CreateMode.EPHEMERAL_SEQUENTIAL)，这样，该znode可掌握全局访问时序。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;用到了Zookeeper的一些系统&quot;&gt;&lt;a href=&quot;#用到了Zookeeper的一些系统&quot; class=&quot;headerlink&quot; title=&quot;用到了Zookeeper的一些系统&quot;&gt;&lt;/a&gt;用到了Zookeeper的一些系统&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;HDFS&lt;/li&gt;
&lt;li&gt;YARN&lt;/li&gt;
&lt;li&gt;Storm&lt;/li&gt;
&lt;li&gt;HBase&lt;/li&gt;
&lt;li&gt;Flume&lt;/li&gt;
&lt;li&gt;Dubbo&lt;/li&gt;
&lt;li&gt;metaq&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Zookeeper安装部署&quot;&gt;&lt;a href=&quot;#Zookeeper安装部署&quot; class=&quot;headerlink&quot; title=&quot;Zookeeper安装部署&quot;&gt;&lt;/a&gt;Zookeeper安装部署&lt;/h2&gt;&lt;p&gt;下面开始介绍Zookeeper的安装部署。安装部署分三种模式：单机模式、伪分布式模式和分布式模式。&lt;br&gt;单机模式和为分布式比较简单，多用于本地测试调试，下面介绍分布式模式安装部署。&lt;/p&gt;
&lt;h2 id=&quot;环境信息&quot;&gt;&lt;a href=&quot;#环境信息&quot; class=&quot;headerlink&quot; title=&quot;环境信息&quot;&gt;&lt;/a&gt;环境信息&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;主机名&lt;/th&gt;
&lt;th&gt;操作系统版本&lt;/th&gt;
&lt;th&gt;IP地址&lt;/th&gt;
&lt;th&gt;安装软件&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;console&lt;/td&gt;
&lt;td&gt;CentOS 7.0&lt;/td&gt;
&lt;td&gt;114.55.29.246&lt;/td&gt;
&lt;td&gt;JDK1.7、zookeeper-3.4.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;log1&lt;/td&gt;
&lt;td&gt;CentOS 7.0&lt;/td&gt;
&lt;td&gt;114.55.29.86&lt;/td&gt;
&lt;td&gt;JDK1.7、zookeeper-3.4.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;log2&lt;/td&gt;
&lt;td&gt;CentOS 7.0&lt;/td&gt;
&lt;td&gt;114.55.29.241&lt;/td&gt;
&lt;td&gt;JDK1.7、zookeeper-3.4.6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;安装jdk1-7&quot;&gt;&lt;a href=&quot;#安装jdk1-7&quot; class=&quot;headerlink&quot; title=&quot;安装jdk1.7&quot;&gt;&lt;/a&gt;安装jdk1.7&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;3台机器都需要安装jdk1.7&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@log1 local]# mkdir /usr/java
[root@log1 local]# tar zxf jdk-7u80-linux-x64.gz -C /usr/java/
[root@log1 local]# vim /etc/profile
export JAVA_HOME=/usr/java/jdk1.7.0_80
export PATH=$JAVA_HOME/bin:$PATH
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
[root@log1 local]# source /etc/profile
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;安装zookeeper集群&quot;&gt;&lt;a href=&quot;#安装zookeeper集群&quot; class=&quot;headerlink&quot; title=&quot;安装zookeeper集群&quot;&gt;&lt;/a&gt;安装zookeeper集群&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;注意：3台机器都需要安装zk。对于Zookeeper集群的话，官方推荐的最小节点数为3个。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装配置zk&quot;&gt;&lt;a href=&quot;#安装配置zk&quot; class=&quot;headerlink&quot; title=&quot;安装配置zk&quot;&gt;&lt;/a&gt;安装配置zk&lt;/h3&gt;&lt;p&gt;1.配置zk节点的hosts文件：配置3台机器的ip地址和主机名的对应关系。以下以console主机为例，其hosts文件添加下面3行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;114.55.29.246 console
114.55.29.86 log1
114.55.29.241 log2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.解压安装配置第一台zk&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console local]# tar zxf zookeeper-3.4.6.tar.gz
[root@console local]# cd zookeeper-3.4.6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建快照日志存放目录：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console zookeeper-3.4.6]# mkdir -p dataDir 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建事务日志存放目录：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console zookeeper-3.4.6]# mkdir dataLogDir
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;【注意】:如果不配置dataLogDir，那么事务日志也会写在dataDir目录中。这样会严重影响zk的性能。因为在zk吞吐量很高的时候，产生的事务日志和快照日志太多。&lt;br&gt;修改配置文件，添加如下内容：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console zookeeper-3.4.6]# cd conf 
[root@console conf]# mv zoo_sample.cfg zoo.cfg 
[root@console conf]# vim zoo.cfg
# 存放数据文件
dataDir=/usr/local/zookeeper-3.4.6/dataDir
# 存放日志文件
dataLogDir=/usr/local/zookeeper-3.4.6/dataLogDir
# zookeeper cluster，2888为选举端口，3888为心跳端口
server.1=console:2888:3888
server.2=log1:2888:3888
server.3=log2:2888:3888
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在我们配置的dataDir指定的目录下面，创建一个myid文件，里面内容为一个数字，用来标识当前主机，conf/zoo.cfg文件中配置的server.X中X为什么数字，则myid文件中就输入这个数字：&lt;br&gt;console主机：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console ~]# echo &amp;quot;1&amp;quot; &amp;gt; /usr/local/zookeeper-3.4.6/dataDir/myid
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3.远程复制第一台的zk到另外两台上，并修改myid文件为2和3&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console local]# scp -rp zookeeper-3.4.6 root@114.55.29.86:/usr/local/
[root@console local]# scp -rp zookeeper-3.4.6 root@114.55.29.241:/usr/local/
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;启动和关闭zk&quot;&gt;&lt;a href=&quot;#启动和关闭zk&quot; class=&quot;headerlink&quot; title=&quot;启动和关闭zk&quot;&gt;&lt;/a&gt;启动和关闭zk&lt;/h3&gt;&lt;p&gt;在ZooKeeper集群的每个结点上，执行启动ZooKeeper服务的脚本，如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console bin]# ./zkServer.sh start 
[root@log1 bin]# ./zkServer.sh start
[root@log2 bin]# ./zkServer.sh start
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;日志可查询：/usr/local/zookeeper-3.4.6/bin/zookeeper.out&lt;br&gt;可以通过命令jps查看Zookeeper进程：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/Zookeeper/1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;停止zk命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# /usr/local/zookeeper-3.4.6/bin/zkServer.sh stop
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;测试zk集群&quot;&gt;&lt;a href=&quot;#测试zk集群&quot; class=&quot;headerlink&quot; title=&quot;测试zk集群&quot;&gt;&lt;/a&gt;测试zk集群&lt;/h3&gt;&lt;p&gt;可以通过ZooKeeper的脚本来查看启动状态，包括集群中各个结点的角色（或是Leader，或是Follower）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console bin]# ./zkServer.sh status
JMX enabled by default
Using config: /usr/local/zookeeper-3.4.6/bin/../conf/zoo.cfg
Mode: follower
[root@log1 bin]# ./zkServer.sh status
JMX enabled by default
Using config: /usr/local/zookeeper-3.4.6/bin/../conf/zoo.cfg
Mode: leader
[root@log2 bin]# ./zkServer.sh status
JMX enabled by default
Using config: /usr/local/zookeeper-3.4.6/bin/../conf/zoo.cfg
Mode: follower
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过上面状态查询结果可见，log1是集群的Leader，其余的两个结点是Follower。&lt;br&gt;另外，可以通过客户端脚本，连接到ZooKeeper集群上。对于客户端来说，ZooKeeper是一个整体，连接到ZooKeeper集群实际上感觉在独享整个集群的服务，所以，你可以在任何一个结点上建立到服务集群的连接。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@log2 bin]# ./zkCli.sh -server log1:2181
Connecting to log1:2181
2016-03-08 14:21:31,502 [myid:] - INFO  [main:Environment@100] - Client environment:zookeeper.version=3.4.6-1569965, built on 02/20/2014 09:09 GMT
2016-03-08 14:21:31,505 [myid:] - INFO  [main:Environment@100] - Client environment:host.name=log2
2016-03-08 14:21:31,505 [myid:] - INFO  [main:Environment@100] - Client environment:java.version=1.7.0_80
2016-03-08 14:21:31,507 [myid:] - INFO  [main:Environment@100] - Client environment:java.vendor=Oracle Corporation
2016-03-08 14:21:31,507 [myid:] - INFO  [main:Environment@100] - Client environment:java.home=/usr/java/jdk1.7.0_80/jre
2016-03-08 14:21:31,507 [myid:] - INFO  [main:Environment@100] - Client environment:java.class.path=/usr/local/zookeeper-3.4.6/bin/../build/classes:/usr/local/zookeeper-3.4.6/bin/../build/lib/*.jar:/usr/local/zookeeper-3.4.6/bin/../lib/slf4j-log4j12-1.6.1.jar:/usr/local/zookeeper-3.4.6/bin/../lib/slf4j-api-1.6.1.jar:/usr/local/zookeeper-3.4.6/bin/../lib/netty-3.7.0.Final.jar:/usr/local/zookeeper-3.4.6/bin/../lib/log4j-1.2.16.jar:/usr/local/zookeeper-3.4.6/bin/../lib/jline-0.9.94.jar:/usr/local/zookeeper-3.4.6/bin/../zookeeper-3.4.6.jar:/usr/local/zookeeper-3.4.6/bin/../src/java/lib/*.jar:/usr/local/zookeeper-3.4.6/bin/../conf:.:/usr/java/jdk1.7.0_80/lib/dt.jar:/usr/java/jdk1.7.0_80/lib/tools.jar
2016-03-08 14:21:31,507 [myid:] - INFO  [main:Environment@100] - Client environment:java.library.path=/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib
2016-03-08 14:21:31,508 [myid:] - INFO  [main:Environment@100] - Client environment:java.io.tmpdir=/tmp
2016-03-08 14:21:31,508 [myid:] - INFO  [main:Environment@100] - Client environment:java.compiler=&amp;lt;NA&amp;gt;
2016-03-08 14:21:31,508 [myid:] - INFO  [main:Environment@100] - Client environment:os.name=Linux
2016-03-08 14:21:31,508 [myid:] - INFO  [main:Environment@100] - Client environment:os.arch=amd64
2016-03-08 14:21:31,508 [myid:] - INFO  [main:Environment@100] - Client environment:os.version=3.10.0-123.9.3.el7.x86_64
2016-03-08 14:21:31,508 [myid:] - INFO  [main:Environment@100] - Client environment:user.name=root
2016-03-08 14:21:31,508 [myid:] - INFO  [main:Environment@100] - Client environment:user.home=/root
2016-03-08 14:21:31,508 [myid:] - INFO  [main:Environment@100] - Client environment:user.dir=/usr/local/zookeeper-3.4.6/bin
2016-03-08 14:21:31,510 [myid:] - INFO  [main:ZooKeeper@438] - Initiating client connection, connectString=log1:2181 sessionTimeout=30000 watcher=org.apache.zookeeper.ZooKeeperMain$MyWatcher@ee01430
Welcome to ZooKeeper!
2016-03-08 14:21:31,534 [myid:] - INFO  [main-SendThread(log1:2181):ClientCnxn$SendThread@975] - Opening socket connection to server log1/114.55.29.86:2181. Will not attempt to authenticate using SASL (unknown error)
2016-03-08 14:21:31,539 [myid:] - INFO  [main-SendThread(log1:2181):ClientCnxn$SendThread@852] - Socket connection established to log1/114.55.29.86:2181, initiating session
JLine support is enabled
[zk: log1:2181(CONNECTING) 0] 2016-03-08 14:21:31,572 [myid:] - INFO  [main-SendThread(log1:2181):ClientCnxn$SendThread@1235] - Session establishment complete on server log1/114.55.29.86:2181, sessionid = 0x25354db0d430000, negotiated timeout = 30000

WATCHER::

WatchedEvent state:SyncConnected type:None path:null

[zk: log1:2181(CONNECTED) 0]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;脚本定期清理zk快照和日志文件&quot;&gt;&lt;a href=&quot;#脚本定期清理zk快照和日志文件&quot; class=&quot;headerlink&quot; title=&quot;脚本定期清理zk快照和日志文件&quot;&gt;&lt;/a&gt;脚本定期清理zk快照和日志文件&lt;/h3&gt;&lt;p&gt;正常运行过程中，ZK会不断地把快照数据和事务日志输出到dataDir和dataLogDir这两个目录，并且如果没有人为操作的话，ZK自己是不会清理这些文件的。&lt;br&gt;我这里采用脚本切割。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@log1 ~]# cd /usr/local/zookeeper-3.4.6/
[root@log1 zookeeper-3.4.6]# vim clean_zklog.sh
#!/bin/bash
###Description:This script is used to clear zookeeper snapshot file and transaction logs.
###Written by: jkzhao - jkzhao@wisedu.com  
###History: 2016-04-08 First release.

# Snapshot file dir.
dataDir=/usr/local/zookeeper-3.4.6/dataDir/version-2

# Transaction logs dir.
dataLogDir=/usr/local/zookeeper-3.4.6/dataLogDir/version-2

# Reserved 5 files.
COUNT=5

ls -t $dataDir/snapshot.* | tail -n +$[$COUNT+1] | xargs rm -f
ls -t $dataLogDir/log.* | tail -n +$[$COUNT+1] | xargs rm -f

[root@log1 zookeeper-3.4.6]# chmod +x clean_zklog.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;每个Zookeeper集群节点配置周期性任务，每个星期日的0点0分执行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console zookeeper-3.4.6]# crontab -e
0 0 * * 0 /usr/local/zookeeper-3.4.6/clean_zklog.sh
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Zookeeper介绍&quot;&gt;&lt;a href=&quot;#Zookeeper介绍&quot; class=&quot;headerlink&quot; title=&quot;Zookeeper介绍&quot;&gt;&lt;/a&gt;Zookeeper介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;是一个针对大型分布式系统的可靠协调系统；&lt;/li&gt;
&lt;li&gt;提供的功能包括：配置维护、名字服务、分布式同步、组服务等；&lt;/li&gt;
&lt;li&gt;目标就是封装好复杂易出错的关键职务，将简单易用的接口和性能高效、功能稳定的系统提供给用户；&lt;/li&gt;
&lt;li&gt;Zookeeper已经成为Hadoop生态系统中的基础组件。
    
    </summary>
    
    
      <category term="大数据 Zookeeper" scheme="http://yoursite.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE-Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>zabbix的通知功能以及自定义脚本告警</title>
    <link href="http://yoursite.com/2017/05/24/zabbix%E7%9A%84%E9%80%9A%E7%9F%A5%E5%8A%9F%E8%83%BD%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89%E8%84%9A%E6%9C%AC%E5%91%8A%E8%AD%A6/"/>
    <id>http://yoursite.com/2017/05/24/zabbix的通知功能以及自定义脚本告警/</id>
    <published>2017-05-24T01:35:41.000Z</published>
    <updated>2017-05-25T05:30:47.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;zabbix的通知功能&quot;&gt;&lt;a href=&quot;#zabbix的通知功能&quot; class=&quot;headerlink&quot; title=&quot;zabbix的通知功能&quot;&gt;&lt;/a&gt;zabbix的通知功能&lt;/h2&gt;&lt;p&gt;在配置好监控项和触发器之后，一旦正常工作中的某触发器状态发生改变，一般意味着有异常情况发生，此时通常需要采取一定的动作(action)，如告警或者执行远程命令。&lt;br&gt;实现zabbix的通知功能，一般需要两个步骤：定义所需的“媒介”和配置一个”动作”。&lt;br&gt;媒介类型有：E-mail，SMS，Jabber和自定义的通知脚本。我这里就使用E-mail了。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;定义媒介&quot;&gt;&lt;a href=&quot;#定义媒介&quot; class=&quot;headerlink&quot; title=&quot;定义媒介&quot;&gt;&lt;/a&gt;定义媒介&lt;/h2&gt;&lt;p&gt;登录zabbix web管理控制台，点击Administration—&amp;gt; Media types，可以看到有3个定义好了的媒介，不用这3个，点击右上角的”Create media type”。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/90.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;填写信息：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/91.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;定义接收告警的用户&quot;&gt;&lt;a href=&quot;#定义接收告警的用户&quot; class=&quot;headerlink&quot; title=&quot;定义接收告警的用户&quot;&gt;&lt;/a&gt;定义接收告警的用户&lt;/h2&gt;&lt;h3 id=&quot;创建用户组&quot;&gt;&lt;a href=&quot;#创建用户组&quot; class=&quot;headerlink&quot; title=&quot;创建用户组&quot;&gt;&lt;/a&gt;创建用户组&lt;/h3&gt;&lt;p&gt;点击Administration—&amp;gt; User groups，点击右上角的Create user group。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/92.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;输入组名，点击Add。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/93.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;创建用户&quot;&gt;&lt;a href=&quot;#创建用户&quot; class=&quot;headerlink&quot; title=&quot;创建用户&quot;&gt;&lt;/a&gt;创建用户&lt;/h3&gt;&lt;p&gt;点击Administration—&amp;gt; Users，点击右上角的Create user。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/94.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;在User列填入个人信息：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/95.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;点击Media，点击Add，选择媒介和接收邮件的时间等信息：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/96.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/97.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;点击Permissions，根据这个新添的用户给予合适的权限&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/98.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;定义Action&quot;&gt;&lt;a href=&quot;#定义Action&quot; class=&quot;headerlink&quot; title=&quot;定义Action&quot;&gt;&lt;/a&gt;定义Action&lt;/h2&gt;&lt;p&gt;点击Configuration—&amp;gt; Actions，点击右上角的Create action：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/99.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Action配置：&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/100.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conditions配置：&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/101.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/102.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/103.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Operations配置：&lt;/strong&gt;&lt;br&gt;在一个action中，可以定义多个Operation。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/104.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/105.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;上面的Operation type有两种：Send message和Remote command。&lt;/p&gt;
&lt;h2 id=&quot;Zabbix自定义脚本发送报警邮件&quot;&gt;&lt;a href=&quot;#Zabbix自定义脚本发送报警邮件&quot; class=&quot;headerlink&quot; title=&quot;Zabbix自定义脚本发送报警邮件&quot;&gt;&lt;/a&gt;Zabbix自定义脚本发送报警邮件&lt;/h2&gt;&lt;p&gt;Zabbix发送报警邮件还可以采用自定义的脚本来发送。&lt;/p&gt;
&lt;h3 id=&quot;Python脚本发邮件&quot;&gt;&lt;a href=&quot;#Python脚本发邮件&quot; class=&quot;headerlink&quot; title=&quot;Python脚本发邮件&quot;&gt;&lt;/a&gt;Python脚本发邮件&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1.定义Media types&lt;/strong&gt;&lt;br&gt;如下图，添加以下3个参数，分别对应sendEmail.sh脚本需要的3个参数：收件人地址、主题、详细内容&lt;br&gt;{ALERT.SENDTO}&lt;br&gt;{ALERT.SUBJECT}&lt;br&gt;{ALERT.MESSAGE}&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/106.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;【注意】: 很多人安装zabbix 3.0之后，写的脚本一直发信不成功,手动执行时可以的。那是因为zabbix3.0之后，可以自定义参数了。所以不写参数，它是不会传参数的。在2.x版本不存在这个问题，默认会传3个参数。脚本中可以使用$1, $2, $3来调用 action 中的 邮件的收件人, Default Subject, Default Message&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.定义Users的Media&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/107.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.python报警脚本&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/zabbix-3.0.1/share/zabbix/alertscripts/
# vim zabbix_sendmail.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;脚本内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/python
# coding:utf-8 

import smtplib
from email.mime.text import MIMEText
import sys

# 邮箱服务器地址
mail_host = &amp;apos;smtp.exmail.qq.com&amp;apos;
# 邮箱用户名
mail_user = &amp;apos;01115009@wisedu.com&amp;apos;
# 邮箱密码
mail_pass = &amp;apos;123123123&amp;apos;
mail_postfix = &amp;apos;wisedu.com&amp;apos;

 def send_mail(to_list,subject,content):
     me = mail_user+&amp;quot;&amp;lt;&amp;quot;+mail_user+&amp;quot;@&amp;quot;+mail_postfix+&amp;quot;&amp;gt;&amp;quot;
     msg = MIMEText(content)
     msg[&amp;apos;Subject&amp;apos;] = subject
     msg[&amp;apos;From&amp;apos;] = me
     msg[&amp;apos;to&amp;apos;] = to_list

try:
    s = smtplib.SMTP()
    s.connect(mail_host)
    s.login(mail_user,mail_pass)
    s.sendmail(me,to_list,msg.as_string())
    s.close()
    return True
except Exception,e:
    print str(e)
    return False

if __name__ == &amp;quot;__main__&amp;quot;:
    send_mail(sys.argv[1], sys.argv[2], sys.argv[3])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 修改脚本权限：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# chmod +x zabbix_sendmail.py
# chown -R zabbix.zabbix zabbix_sendmail.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;4.修改zabbix_server配置&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# vim /usr/local/zabbix-3.0.1/etc/zabbix_server.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;添加如下配置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;### Option: AlertScriptsPath
AlertScriptsPath=/usr/local/zabbix-3.0.1/share/zabbix/alertscripts
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重启zabbix_server。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.配置Actions&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/108.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;【注意】:每触发一次Action，都会在Reports—&amp;gt;Action log看到记录：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/109.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;shell脚本发邮件&quot;&gt;&lt;a href=&quot;#shell脚本发邮件&quot; class=&quot;headerlink&quot; title=&quot;shell脚本发邮件&quot;&gt;&lt;/a&gt;shell脚本发邮件&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1.先安装sendEmail&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@care local]# tar zxf sendEmail-v1.56.tar.gz
[root@care local]# cp sendEmail-v1.56/sendEmail /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将写好的脚本上传到/usr/local/zabbix-3.0.1/share/zabbix/alertscripts。这里为了业务需求，需要定制化发送邮件的内容，脚本内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
###Description:This script is used to alarm.
###Written by: jkzhao - jkzhao@wisedu.com  
###History: 2016-08-10 Second release.
###Modification: Please modify the variables host, user and passwd.

# 获取默认的邮件接收者，邮件主题，邮件正文
to=$1
subject=$2
bodyOrgin=$3

# 获取eventid
#eventid=grep &amp;quot;event ID&amp;quot; $bodyOrgin |awk &amp;apos;{print $4}&amp;apos;
eventid=$(echo $bodyOrgin | grep &amp;quot;event ID&amp;quot; |awk &amp;apos;{print $NF}&amp;apos;)
echo &amp;quot;eventid:$eventid&amp;quot; &amp;gt; /tmp/test.txt

# shell调用存储过程，获取主键viewid，传入参数：eventid，输出：viewid
host=172.16.9.112
user=root
passwd=zabbix
database=zabbix

viewid=$(mysql -u${user} -p${passwd} -h${host} -D${database} -e &amp;quot;call generateAlertView($eventid,@result)&amp;quot; 2&amp;gt;/dev/null | awk &amp;apos;NR&amp;gt;1&amp;apos;)
echo &amp;quot;viewid:$viewid&amp;quot; &amp;gt;&amp;gt; /tmp/test.txt
group=$(mysql -u${user} -p${passwd} -h${host} -D${database} -e &amp;quot;select alerts_view_group.group from alerts_view_group where viewid = $viewid&amp;quot; 2&amp;gt;/dev/null | awk &amp;apos;NR&amp;gt;1&amp;apos;)
echo &amp;quot;group:$group&amp;quot; &amp;gt;&amp;gt; /tmp/test.txt
body=$bodyOrgin&amp;quot;; 影响业务: &amp;quot;$group


# 因为需要格式化发送邮件的内容，将拼接好的body信息写入文件中再做处理
echo $body | awk -F&amp;apos;;&amp;apos; &amp;apos;{for(i=1;i&amp;lt;=NF;i++){print $i}}&amp;apos; &amp;gt; /tmp/messages.txt
# 将文件中出现的^M删除掉
sed -i &amp;apos;s/\x0D//g&amp;apos; /tmp/messages.txt
# 删除以空格开头的行前面的空格
sed -i &amp;apos;s/^\s*//g&amp;apos; /tmp/messages.txt

# 由于zabbix无论是故障还是恢复都是要发邮件的，但是对于故障和恢复的邮件内容需要定制为不同的内容，因此需要先获取到是故障还是恢复
state=$(echo $subject | awk -F: &amp;apos;{print $2}&amp;apos;)

# 按照安心守护要求修改邮件正文内容
if [ $state == &amp;quot;PROBLEM&amp;quot; ]; then
    sed -i &amp;apos;s/Trigger:/异常对象:/&amp;apos; /tmp/messages.txt
    sed -i &amp;apos;/Trigger severity:/{h;d};/Item values:/{G}&amp;apos; /tmp/messages.txt
    sed -i &amp;apos;s/Trigger severity:/异常等级:/&amp;apos; /tmp/messages.txt 
    sed -i &amp;apos;s/Item values:/异常原因:/&amp;apos; /tmp/messages.txt
    sed -i &amp;apos;/Original event/d&amp;apos; /tmp/messages.txt
    sed -i &amp;apos;/Trigger status:/d&amp;apos; /tmp/messages.txt
    sed -i &amp;apos;$a发生时间: &amp;apos; /tmp/messages.txt
    sed -i &amp;quot;s/发生时间: /发生时间: $(date &amp;quot;+%Y-%m-%d %H:%M:%S&amp;quot;)/&amp;quot; /tmp/messages.txt
    # 把发生故障时的alertView插入alerts_view表
    alertValue=$(grep &amp;quot;异常原因&amp;quot; /tmp/messages.txt | awk -F: &amp;apos;BEGIN{ORS=&amp;quot;&amp;quot;};{for(i=3;i&amp;lt;=NF;++i) {print $i}}&amp;apos;)
    echo &amp;quot;alertValue:$alertValue&amp;quot; &amp;gt;&amp;gt; /tmp/test.txt
    mysql -u${user} -p${passwd} -h${host} -D${database} -e &amp;quot;UPDATE alerts_view set alertValue=&amp;apos;${alertValue}&amp;apos; WHERE viewid = &amp;apos;${viewid}&amp;apos;&amp;quot; 2&amp;gt;/dev/null
    sed -i &amp;apos;s/Warning/风险/&amp;apos; /tmp/messages.txt
    sed -i &amp;apos;s/Disaster/宕机/&amp;apos; /tmp/messages.txt
else
    sed -i &amp;apos;s/Trigger:/恢复对象:/&amp;apos; /tmp/messages.txt
    sed -i &amp;apos;s/Item values:/恢复内容:/&amp;apos; /tmp/messages.txt
    sed -i &amp;apos;s/影响业务/恢复业务/&amp;apos; /tmp/messages.txt
    sed -i &amp;apos;/Original event/d&amp;apos; /tmp/messages.txt
    sed -i &amp;apos;/Trigger status:/d&amp;apos; /tmp/messages.txt
    sed -i &amp;apos;/Trigger severity:/d&amp;apos; /tmp/messages.txt
    sed -i &amp;apos;$a发生时间: &amp;apos; /tmp/messages.txt
    sed -i &amp;quot;s/发生时间: /发生时间: $(date &amp;quot;+%Y-%m-%d %H:%M:%S&amp;quot;)/&amp;quot; /tmp/messages.txt
fi


/usr/local/bin/sendEmail -f monitor@wisedu.com -t &amp;quot;$to&amp;quot; -s smtp.exmail.qq.com -u &amp;quot;$subject&amp;quot; -o message-content-type=text -o message-charset=utf-8 -o message-file=/tmp/messages.txt -xu monitor@wisedu.com -xp 123456 2&amp;gt;&amp;gt;/tmp/22.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;2.添加Media types&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/110.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.给指定的用户添加Media&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/111.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.配置Actions，为了业务需求定制Default message&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/112.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.邮件展示&lt;/strong&gt;&lt;br&gt;故障邮件展示：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/113.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;故障恢复邮件展示：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/114.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;zabbix的通知功能&quot;&gt;&lt;a href=&quot;#zabbix的通知功能&quot; class=&quot;headerlink&quot; title=&quot;zabbix的通知功能&quot;&gt;&lt;/a&gt;zabbix的通知功能&lt;/h2&gt;&lt;p&gt;在配置好监控项和触发器之后，一旦正常工作中的某触发器状态发生改变，一般意味着有异常情况发生，此时通常需要采取一定的动作(action)，如告警或者执行远程命令。&lt;br&gt;实现zabbix的通知功能，一般需要两个步骤：定义所需的“媒介”和配置一个”动作”。&lt;br&gt;媒介类型有：E-mail，SMS，Jabber和自定义的通知脚本。我这里就使用E-mail了。&lt;br&gt;
    
    </summary>
    
    
      <category term="监控 zabbix" scheme="http://yoursite.com/tags/%E7%9B%91%E6%8E%A7-zabbix/"/>
    
  </entry>
  
  <entry>
    <title>zabbix监控websphere和weblogic</title>
    <link href="http://yoursite.com/2017/05/23/zabbix%E7%9B%91%E6%8E%A7websphere%E5%92%8Cweblogic/"/>
    <id>http://yoursite.com/2017/05/23/zabbix监控websphere和weblogic/</id>
    <published>2017-05-23T13:25:25.000Z</published>
    <updated>2017-05-30T02:52:02.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;zabbix-java-gateway&quot;&gt;&lt;a href=&quot;#zabbix-java-gateway&quot; class=&quot;headerlink&quot; title=&quot;zabbix java gateway&quot;&gt;&lt;/a&gt;zabbix java gateway&lt;/h1&gt;&lt;p&gt;zabbix通过JMX监控应用服务器。JMX（Java Management Extensions，即Java管理扩展）是一个为应用程序、设备、系统等植入管理功能的框架。JMX可以跨越一系列异构操作系统平台、系统体系结构和网络传输协议，灵活的开发无缝集成的系统、网络和服务管理应用。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;Zabbix已经集成JMX，可以用Zabbix通过JMX监控JVM，TOMCAT，Weblogic，Jboss等。要使用Zabbix监控Weblogic，我们先要了解Zabbix的JMX监控架构，Weblogic的JMX信息，最后才能去实现怎么去配置监控和报警。&lt;br&gt;Zabbix是使用了一个叫做Java Gateway的应用去监控JMX的。Java Gateway集成在zabbix官方开发发布的。所以需要在编译安装zabbix server时，需要添加一个选项–enable-java。这样安装zabbix后在/usr/local/zabbix-3.0.1/sbin目录下会有个zabbix_java目录，这个目录里面就是zabbix Java gateway的文件。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/80.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;配置和运行java-gateway&quot;&gt;&lt;a href=&quot;#配置和运行java-gateway&quot; class=&quot;headerlink&quot; title=&quot;配置和运行java gateway&quot;&gt;&lt;/a&gt;配置和运行java gateway&lt;/h1&gt;&lt;p&gt;默认情况下，Java gateway监听10052端口. 如果你计划使用不同的端口来运行Java gateway，你需要通过setting.sh脚本指定下需要的端口。&lt;br&gt;启动：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./startup.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;关闭：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./shutdown.sh
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;配置zabbix-server使用java-gateway&quot;&gt;&lt;a href=&quot;#配置zabbix-server使用java-gateway&quot; class=&quot;headerlink&quot; title=&quot;配置zabbix server使用java gateway&quot;&gt;&lt;/a&gt;配置zabbix server使用java gateway&lt;/h1&gt;&lt;p&gt;当前Java gateway已经运行，接下来你需要告诉Zabbix server如何找到Zabbix Java gateway. 因此你需要在 server配置文件 中指定JavaGateway及JavaGateway端口. 如果JMX应用采用Zabbix代理进行监控的话，你需要在 代理配置文件 中指定对应的连接参数。&lt;br&gt;默认情况下，server并不会派生出任何进程去进行JMX监控。如果你想使用完成JMX监控，你需要指定预派生出来的Java pollers进程数，你也可过同类的方式指定常见的pollers和trappers。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# vim zabbix_server.conf
JavaGateway=172.16.7.151
JavaGatewayPort=10052
StartJavaPollers=5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/81.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在完成配置后，要重启server(或代理)：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# killall -9 zabbix_server
# ./zabbix_server
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;调整java-gateway的日志级别&quot;&gt;&lt;a href=&quot;#调整java-gateway的日志级别&quot; class=&quot;headerlink&quot; title=&quot;调整java gateway的日志级别&quot;&gt;&lt;/a&gt;调整java gateway的日志级别&lt;/h1&gt;&lt;p&gt;万一Java gateway出现了若干问题，在前段可以看到的监控项报错信息并不充分，你也可以通过查看Java gateway日志文件获得更多信息。&lt;br&gt;默认情况下，Java gateway将记录日志到/tmp/zabbix_java.log文件中，log级别为”info”。有时你觉得”info”级别得到的信息并不够，你需要修改级别为”debug”。你可以通过修改lib/logback.xml将&lt;root&gt;标签更改为”debug”以获取日志级别的增加。&lt;/root&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;root level=&amp;quot;debug&amp;quot;&amp;gt;
   &amp;lt;appender-ref ref=&amp;quot;FILE&amp;quot; /&amp;gt;
&amp;lt;/root&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;需要注意的是，并不像Zabbix server或proxy那样，修改完logback.xml并不需要重启Zabbix Java gateway. 修改后的配置将会自动被加载。当你完成了debugging,你可以将log级别替换为”info”。&lt;/p&gt;
&lt;h1 id=&quot;监控weblogic&quot;&gt;&lt;a href=&quot;#监控weblogic&quot; class=&quot;headerlink&quot; title=&quot;监控weblogic&quot;&gt;&lt;/a&gt;监控weblogic&lt;/h1&gt;&lt;h2 id=&quot;weblogic配置&quot;&gt;&lt;a href=&quot;#weblogic配置&quot; class=&quot;headerlink&quot; title=&quot;weblogic配置&quot;&gt;&lt;/a&gt;weblogic配置&lt;/h2&gt;&lt;p&gt;1.如果是监控weblogic 的admin server：&lt;br&gt;编辑WL_DOMAIN_HOME/bin/setDomainEnv.sh，在文件结尾加入下面几行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd /opt/Oracle/Middleware/user_projects/domains/ids_domain/bin
$ vim setDomainEnv.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;添加一句：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;JAVA_OPTIONS=&amp;quot;$JAVA_OPTIONS -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9997 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后在去启动weblogic。&lt;/p&gt;
&lt;p&gt;2.如果是监控受管服务器：&lt;br&gt;进入weblogic控制台-&amp;gt;环境-&amp;gt;服务器-&amp;gt;”你新增的服务器”-&amp;gt;配置-&amp;gt;服务器启动。在“参数”的输入框内输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-Dcom.sun.management.jmxremote.port=JMX_PORT -Djava.rmi.server.hostname=JMX_HOST -Dcom.sun.management.jmxremote.authenticate=false  -Dcom.sun.management.jmxremote.ssl=false -Djavax.management.builder.initial=weblogic.management.jmx.mbeanserver.WLSMBeanServerBuilder
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后控制台启动受管服务器。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/82.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;zabbix-server添加监控weblogic主机&quot;&gt;&lt;a href=&quot;#zabbix-server添加监控weblogic主机&quot; class=&quot;headerlink&quot; title=&quot;zabbix server添加监控weblogic主机&quot;&gt;&lt;/a&gt;zabbix server添加监控weblogic主机&lt;/h2&gt;&lt;p&gt;点击配置—&amp;gt;主机—&amp;gt;创建主机。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/83.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;输入主机信息，主要注意JMX的端口，点击添加。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/84.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;选择JMX模板。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/85.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;监控websphere&quot;&gt;&lt;a href=&quot;#监控websphere&quot; class=&quot;headerlink&quot; title=&quot;监控websphere&quot;&gt;&lt;/a&gt;监控websphere&lt;/h1&gt;&lt;h2 id=&quot;websphere配置&quot;&gt;&lt;a href=&quot;#websphere配置&quot; class=&quot;headerlink&quot; title=&quot;websphere配置&quot;&gt;&lt;/a&gt;websphere配置&lt;/h2&gt;&lt;p&gt;访问websphere控制台，点击 Server Types → WebSphere application servers → WAS_SERVER_NAME → Java and Process Management → Process definition → Java Virtual Machine.&lt;/p&gt;
&lt;p&gt;在“Generic JVM arguments”增加下面环境变量：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-Djavax.management.builder.initial=
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/86.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;点击 Server Types → WebSphere application servers → WAS_SERVER_NAME → Java and Process Management → Process definition → Java Virtual Machine → Custom properties.&lt;br&gt;增加下面几个环境变量：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Name: java.rmi.server.hostname
Value: JMX_HOST
Name: com.sun.management.jmxremote
Value: true
Name: com.sun.management.jmxremote.port
Value: JMX_PORT
Name: com.sun.management.jmxremote.ssl
Value: false
Name: com.sun.management.jmxremote.authenticate
Value: false
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/87.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;重启server。&lt;/p&gt;
&lt;h2 id=&quot;zabbix-server添加监控websphere主机&quot;&gt;&lt;a href=&quot;#zabbix-server添加监控websphere主机&quot; class=&quot;headerlink&quot; title=&quot;zabbix server添加监控websphere主机&quot;&gt;&lt;/a&gt;zabbix server添加监控websphere主机&lt;/h2&gt;&lt;p&gt;点击配置—&amp;gt;主机—&amp;gt;创建主机。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/88.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;输入主机信息，主要注意JMX的端口，点击添加。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/89.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;zabbix-java-gateway&quot;&gt;&lt;a href=&quot;#zabbix-java-gateway&quot; class=&quot;headerlink&quot; title=&quot;zabbix java gateway&quot;&gt;&lt;/a&gt;zabbix java gateway&lt;/h1&gt;&lt;p&gt;zabbix通过JMX监控应用服务器。JMX（Java Management Extensions，即Java管理扩展）是一个为应用程序、设备、系统等植入管理功能的框架。JMX可以跨越一系列异构操作系统平台、系统体系结构和网络传输协议，灵活的开发无缝集成的系统、网络和服务管理应用。&lt;br&gt;
    
    </summary>
    
    
      <category term="监控 zabbix" scheme="http://yoursite.com/tags/%E7%9B%91%E6%8E%A7-zabbix/"/>
    
  </entry>
  
  <entry>
    <title>zabbix监控Nginx</title>
    <link href="http://yoursite.com/2017/05/16/zabbix%E7%9B%91%E6%8E%A7Nginx/"/>
    <id>http://yoursite.com/2017/05/16/zabbix监控Nginx/</id>
    <published>2017-05-16T03:04:58.000Z</published>
    <updated>2017-05-29T10:32:50.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://nginx.org/en/docs/http/ngx_http_stub_status_module.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://nginx.org/en/docs/http/ngx_http_stub_status_module.html&lt;/a&gt;&lt;br&gt;在编译Nginx的时候，需要加上参数–with-http_stub_status_module，然后在配置文件中配置开启状态页面查询。&lt;br&gt;Nginx1.9.11版本之后才支持动态加载模块，因此对于之前的版本，你都需要重新编译。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;启用nginx-status配置&quot;&gt;&lt;a href=&quot;#启用nginx-status配置&quot; class=&quot;headerlink&quot; title=&quot;启用nginx status配置&quot;&gt;&lt;/a&gt;启用nginx status配置&lt;/h1&gt;&lt;p&gt;在http段加入如下配置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
        listen  80;
        server_name localhost;
        location /status {
            stub_status;
            access_log off;
            allow 114.55.29.246;
            deny all;
        }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重载Nginx。&lt;/p&gt;
&lt;h1 id=&quot;zabbix-agent端配置&quot;&gt;&lt;a href=&quot;#zabbix-agent端配置&quot; class=&quot;headerlink&quot; title=&quot;zabbix agent端配置&quot;&gt;&lt;/a&gt;zabbix agent端配置&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;# cd /usr/local/zabbix-3.0.1/etc/zabbix_agentd.conf.d/
# vim nginx_userparams.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;把下面的内容贴进去：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;UserParameter=Nginx.active[*], /usr/bin/curl -s &amp;quot;http://$1:$2/status&amp;quot; | awk &amp;apos;/^Active/ {print $NF}&amp;apos;
UserParameter=Nginx.reading[*], /usr/bin/curl -s &amp;quot;http://$1:$2/status&amp;quot; | grep &amp;apos;Reading&amp;apos; | cut -d&amp;quot; &amp;quot; -f2
UserParameter=Nginx.writing[*], /usr/bin/curl -s &amp;quot;http://$1:$2/status&amp;quot; | grep &amp;apos;Writing&amp;apos; | cut -d&amp;quot; &amp;quot; -f4
UserParameter=Nginx.waiting[*], /usr/bin/curl -s &amp;quot;http://$1:$2/status&amp;quot; | grep &amp;apos;Waiting&amp;apos; | cut -d&amp;quot; &amp;quot; -f6
UserParameter=Nginx.accepted[*], /usr/bin/curl -s &amp;quot;http://$1:$2/status&amp;quot; | awk &amp;apos;/^[ \t]+[0-9]+[ \t]+[0-9]+[ \t]+[0-9]+/ {print $$1}&amp;apos;
UserParameter=Nginx.handled[*], /usr/bin/curl -s &amp;quot;http://$1:$2/status&amp;quot; | awk &amp;apos;/^[ \t]+[0-9]+[ \t]+[0-9]+[ \t]+[0-9]+/ {print $$2}&amp;apos;
UserParameter=Nginx.requests[*], /usr/bin/curl -s &amp;quot;http://$1:$2/status&amp;quot; | awk &amp;apos;/^[ \t]+[0-9]+[ \t]+[0-9]+[ \t]+[0-9]+/ {print $$3}&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重启zabbix agent：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# killall -9 zabbix_agentd
# /usr/local/zabbix-3.0.1/sbin/zabbix_agentd
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;测试，在zabbix server上使用zabbix_get获取数据：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/zabbix-3.0.1/bin/
# ./zabbix_get -s 114.55.29.241 -k &amp;quot;Nginx.active[114.55.29.241,80]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;zabbix-web-gui配置监控项&quot;&gt;&lt;a href=&quot;#zabbix-web-gui配置监控项&quot; class=&quot;headerlink&quot; title=&quot;zabbix web gui配置监控项&quot;&gt;&lt;/a&gt;zabbix web gui配置监控项&lt;/h1&gt;&lt;h2 id=&quot;创建Nginx-Template&quot;&gt;&lt;a href=&quot;#创建Nginx-Template&quot; class=&quot;headerlink&quot; title=&quot;创建Nginx Template&quot;&gt;&lt;/a&gt;创建Nginx Template&lt;/h2&gt;&lt;p&gt;点击Configuration—&amp;gt;Templates，点击右上角的Create template。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/66.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;填写模板的信息，点击Add。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/67.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;创建Application&quot;&gt;&lt;a href=&quot;#创建Application&quot; class=&quot;headerlink&quot; title=&quot;创建Application&quot;&gt;&lt;/a&gt;创建Application&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;生产环境下只需要把我写好的模板文件import进去就可以了，不需要像下面那样再去创建模板，下面只是介绍下创建模板的过程。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;点击Configuration—&amp;gt;Templates，找到刚才创建的Nginx template，点击所在行的Applications列。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/68.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;点击右上角的Create application。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/69.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;输入application的名字Nginx running status，点击Add。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/70.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;创建Items&quot;&gt;&lt;a href=&quot;#创建Items&quot; class=&quot;headerlink&quot; title=&quot;创建Items&quot;&gt;&lt;/a&gt;创建Items&lt;/h2&gt;&lt;p&gt;点击Configuration—&amp;gt;Templates，找到刚才创建的Nginx template，点击所在行的Items列。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/71.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;点击右上角的Create item。分别创建8个监控项，如下图：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当前 Nginx 正处理的活动连接数（包括等待着的连接数）&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/72.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;Nginx一共处理了的连接数&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/73.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;Nginx一共处理了的连接数(包括失败了的，因为某些限制会导致连接被拒绝，比如the worker_connections limit)&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/74.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;Nginx一共处理了的请求的个数(连接和请求是两码事，一个长连接可能会处理多个请求)&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/75.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;Nginx正在读取到客户端的Header信息数&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/76.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;Nginx正在向客户端发送响应的个数&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/77.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;开启keep-alive 的情况下，这个值等于active – (reading + writing)，意思就是 Nginx 已经处理完正在等候下一次请求指令的驻留连接&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/78.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;Nginx服务可用性&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/79.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://nginx.org/en/docs/http/ngx_http_stub_status_module.html&quot;&gt;https://nginx.org/en/docs/http/ngx_http_stub_status_module.html&lt;/a&gt;&lt;br&gt;在编译Nginx的时候，需要加上参数–with-http_stub_status_module，然后在配置文件中配置开启状态页面查询。&lt;br&gt;Nginx1.9.11版本之后才支持动态加载模块，因此对于之前的版本，你都需要重新编译。&lt;br&gt;
    
    </summary>
    
    
      <category term="监控 zabbix" scheme="http://yoursite.com/tags/%E7%9B%91%E6%8E%A7-zabbix/"/>
    
  </entry>
  
  <entry>
    <title>zabbix监控实例</title>
    <link href="http://yoursite.com/2017/05/14/zabbix%E7%9B%91%E6%8E%A7%E5%AE%9E%E4%BE%8B/"/>
    <id>http://yoursite.com/2017/05/14/zabbix监控实例/</id>
    <published>2017-05-14T13:44:33.000Z</published>
    <updated>2017-05-15T03:24:53.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;zabbix-web添加主机&quot;&gt;&lt;a href=&quot;#zabbix-web添加主机&quot; class=&quot;headerlink&quot; title=&quot;zabbix web添加主机&quot;&gt;&lt;/a&gt;zabbix web添加主机&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;进入zabbix web界面，点击配置—&amp;gt;主机—&amp;gt;创建主机。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/28.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;填入下图中的信息，点击添加。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/29.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/30.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/31.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;定义Items&quot;&gt;&lt;a href=&quot;#定义Items&quot; class=&quot;headerlink&quot; title=&quot;定义Items&quot;&gt;&lt;/a&gt;定义Items&lt;/h1&gt;&lt;p&gt;要真正实现数据采集，需要定义监控项(Items)。多个Items可以归为一个组，称为Applications。定义好Items之后，还应该为Items定义Triggers(触发器)。我这里演示下创建监控网卡进入和出去的流量。&lt;/p&gt;
&lt;h2 id=&quot;创建item监控网卡出去流量&quot;&gt;&lt;a href=&quot;#创建item监控网卡出去流量&quot; class=&quot;headerlink&quot; title=&quot;创建item监控网卡出去流量&quot;&gt;&lt;/a&gt;创建item监控网卡出去流量&lt;/h2&gt;&lt;p&gt;登录zabbix web管控台，点击配置—&amp;gt;主机—&amp;gt;监控项。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/32.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;点击右上角的“创建监控项”。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/33.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;在如下的界面填入以下内容：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/34.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;其中，在key那一栏，点击select按钮，选择key值。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/35.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/36.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;回到hosts，你会发现已经有application和item了。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/37.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;每创建一个Item，会自动帮你创建图形的。点击监控—&amp;gt;最新的数据，输入要查的主机，点击select，就可以看到为刚才我们创建的item所创建的图形。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/38.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;点击图形。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/39.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;strong&gt;注意:数据量从右往左走的。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;创建item监控进入网卡流量&quot;&gt;&lt;a href=&quot;#创建item监控进入网卡流量&quot; class=&quot;headerlink&quot; title=&quot;创建item监控进入网卡流量&quot;&gt;&lt;/a&gt;创建item监控进入网卡流量&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/40.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;strong&gt;注意:&lt;/strong&gt;有时候，不是一创建完item，graph那边就有数据了，你可以主要通过浏览器去访问监听在这个网卡的某个端口上的服务，然后graph就会有数据了。&lt;/p&gt;
&lt;h1 id=&quot;创建graph&quot;&gt;&lt;a href=&quot;#创建graph&quot; class=&quot;headerlink&quot; title=&quot;创建graph&quot;&gt;&lt;/a&gt;创建graph&lt;/h1&gt;&lt;p&gt;为什么要创建graph？拿上节中的网卡进出流量来举例，进和出此时都不在一张图上，这就需要Graphs自定义图像。将多个指标放在一起。&lt;/p&gt;
&lt;p&gt;点击配置—&amp;gt;主机，点击Graphs。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/41.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;点击右上角的创建图形。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/42.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;输入Name，点击图中倒数第二个add。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/43.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;选择监控项。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/44.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;最后点击添加。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/45.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;点击监控—&amp;gt;图形，在右上角输入主机组，主机和图形。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/46.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;创建模板&quot;&gt;&lt;a href=&quot;#创建模板&quot; class=&quot;headerlink&quot; title=&quot;创建模板&quot;&gt;&lt;/a&gt;创建模板&lt;/h1&gt;&lt;p&gt;如果我们在加一个主机进来，假如说我们每一次都想监控某几个同样的指标，每台主机都要这么去定义的话，就太痛苦了。这就要使用到模板。&lt;/p&gt;
&lt;h2 id=&quot;创建模板-1&quot;&gt;&lt;a href=&quot;#创建模板-1&quot; class=&quot;headerlink&quot; title=&quot;创建模板&quot;&gt;&lt;/a&gt;创建模板&lt;/h2&gt;&lt;p&gt;点击配置—&amp;gt;模板，点击创建模板。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/47.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/48.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;创建Item&quot;&gt;&lt;a href=&quot;#创建Item&quot; class=&quot;headerlink&quot; title=&quot;创建Item&quot;&gt;&lt;/a&gt;创建Item&lt;/h2&gt;&lt;p&gt;创建完模板后，其上是没有任何Item和trigger等。所以我们需要创建这一系列监控项。但是由于这里我是要监控Elasticsearch状态，而zabbix是没有内置的key来监控elasticsearch的，所以需要自定义监控项来监控。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/49.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在elasticsearch主机定义zabbix agent的UserParameter&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@log1 ~]# cd /usr/local/zabbix-3.0.1/etc/
[root@log1 etc]# vim zabbix_agentd.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;输入内容：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;UserParameter=Elasticsearch.status[*],/usr/bin/curl -s &amp;apos;http://$1:$2/_cluster/health?pretty=true&amp;apos; | awk -F&amp;apos;&amp;quot;&amp;apos; &amp;apos;/status/{print $$4}&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;重启zabbix agent&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@log1 ~] # killall -9 zabbix_agentd
[root@log1 ~]# /usr/local/zabbix-3.0.1/sbin/zabbix_agentd
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在zabbix server端使用zabbix_get模拟获取数据&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console ~]# /usr/local/zabbix-3.0.1/bin/zabbix_get -s 114.55.29.86 -k &amp;quot;Elasticsearch.status[114.55.29.86,9200]&amp;quot;
green
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建模板的Item&lt;br&gt;(1)找到刚才新建的模板，点击Item。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/50.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;(2)点击右上角的Create Item&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/51.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;(3)输入如下的信息&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/52.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/53.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;为模板上的Item创建触发器&quot;&gt;&lt;a href=&quot;#为模板上的Item创建触发器&quot; class=&quot;headerlink&quot; title=&quot;为模板上的Item创建触发器&quot;&gt;&lt;/a&gt;为模板上的Item创建触发器&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;点击触发器。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/54.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击右上角的创建触发器&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/55.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定义触发器名字，然后点击Add。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/56.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击Select，选择对哪个Item做Trigger。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/57.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/58.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;将模板应用到主机上&quot;&gt;&lt;a href=&quot;#将模板应用到主机上&quot; class=&quot;headerlink&quot; title=&quot;将模板应用到主机上&quot;&gt;&lt;/a&gt;将模板应用到主机上&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;点击配置—&amp;gt;主机，点击log1主机。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/59.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击模板，点击选择。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/60.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选择我们需要的模板，点击选择。然后在点击Add。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/61.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这是Add后显示页面，再点击Update。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/62.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;这样你就可以看到这边log1主机有应用的模板的。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/63.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;查看监控数据&quot;&gt;&lt;a href=&quot;#查看监控数据&quot; class=&quot;headerlink&quot; title=&quot;查看监控数据&quot;&gt;&lt;/a&gt;查看监控数据&lt;/h2&gt;&lt;p&gt;点击监控—&amp;gt;最新数据，找到Elasticsearch status这个监控项，点击后面的History。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/64.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/65.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;zabbix-web添加主机&quot;&gt;&lt;a href=&quot;#zabbix-web添加主机&quot; class=&quot;headerlink&quot; title=&quot;zabbix web添加主机&quot;&gt;&lt;/a&gt;zabbix web添加主机&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;进入zabbix web界面，点击配置—&amp;gt;主机—&amp;gt;创建主机。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/28.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="监控 zabbix" scheme="http://yoursite.com/tags/%E7%9B%91%E6%8E%A7-zabbix/"/>
    
  </entry>
  
  <entry>
    <title>zabbix安装配置</title>
    <link href="http://yoursite.com/2017/05/10/zabbix%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2017/05/10/zabbix安装配置/</id>
    <published>2017-05-10T02:53:23.000Z</published>
    <updated>2017-05-11T01:37:08.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;实验环境&quot;&gt;&lt;a href=&quot;#实验环境&quot; class=&quot;headerlink&quot; title=&quot;实验环境&quot;&gt;&lt;/a&gt;实验环境&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;主机名&lt;/th&gt;
&lt;th&gt;操作系统版本&lt;/th&gt;
&lt;th&gt;IP地址&lt;/th&gt;
&lt;th&gt;安装软件&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;console&lt;/td&gt;
&lt;td&gt;CentOS 7.0&lt;/td&gt;
&lt;td&gt;114.55.29.246&lt;/td&gt;
&lt;td&gt;Httpd、Nginx、MySQL、Zabbix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;log1&lt;/td&gt;
&lt;td&gt;CentOS 7.0&lt;/td&gt;
&lt;td&gt;114.55.29.86&lt;/td&gt;
&lt;td&gt;Zabbix agent&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;log2&lt;/td&gt;
&lt;td&gt;CentOS 7.0&lt;/td&gt;
&lt;td&gt;114.55.29.241&lt;/td&gt;
&lt;td&gt;Zabbix agent&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;安装准备&quot;&gt;&lt;a href=&quot;#安装准备&quot; class=&quot;headerlink&quot; title=&quot;安装准备&quot;&gt;&lt;/a&gt;安装准备&lt;/h1&gt;&lt;p&gt;为了安全考虑，zabbix只使用普通用户运行，如果你的系统没有名叫zabbix的用户，你需要创建一个用户，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console local]# groupadd zabbix
[root@console local]# useradd -g zabbix zabbix
[root@console local]# id zabbix
uid=1000(zabbix) gid=1000(zabbix) groups=1000(zabbix)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;安装MySQL&quot;&gt;&lt;a href=&quot;#安装MySQL&quot; class=&quot;headerlink&quot; title=&quot;安装MySQL&quot;&gt;&lt;/a&gt;安装MySQL&lt;/h1&gt;&lt;p&gt;console主机安装mysql5.6。下载地址：&lt;a href=&quot;http://mirrors.sohu.com/mysql&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mirrors.sohu.com/mysql&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装依赖包&lt;pre&gt;&lt;code&gt;[root@console local]# yum install libaio* -y
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;解压安装&lt;pre&gt;&lt;code&gt;[root@console local]# tar zxf mysql-5.6.27-linux-glibc2.5-x86_64.tar.gz 
[root@console local]# ln -sv mysql-5.6.27-linux-glibc2.5-x86_64 mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;新建用户&lt;br&gt;运行mysql最好不要用root去运行，而以普通用户身份。添加用户mysql。&lt;pre&gt;&lt;code&gt;[root@console local]# groupadd -r -g 300 mysql
[root@console local]# useradd -g mysql -r -s /sbin/nologin -u 300 mysql
[root@console local]# id mysql
uid=300(mysql) gid=300(mysql) groups=300(mysql)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;修改mysql文件权限为mysql.mysql&lt;pre&gt;&lt;code&gt;[root@console local]# cd mysql
[root@console mysql]# chown -R mysql.mysql ./*
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;执行初始化操作，生成一个系统库叫mysql，它里面保存着有当前所有能够使用mysql服务器的用户帐号、所有数据库的名字、每个库中表的名字、表中字段的名字等等。&lt;br&gt;脚本路径：/usr/local/mysql/scripts&lt;br&gt;创建数据文件目录：&lt;pre&gt;&lt;code&gt;[root@console mysql]# mkdir -pv /data/{mydata,binlog}
[root@console mysql]# scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql --datadir=/data/mydata
[root@console mysql]# ls /data/mydata
&lt;/code&gt;&lt;/pre&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/1.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;修改mysql目录下的文件属主为root，属组为mysql&lt;pre&gt;&lt;code&gt;[root@console mysql]# chown -R root .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;修改data目录属主、属组为mysql&lt;pre&gt;&lt;code&gt;[root@console mysql]# chown -R mysql.mysql /data
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;拷贝修改mysql的配置文件&lt;br&gt;copy写好的my.cnf到/etc/目录下。&lt;/li&gt;
&lt;li&gt;拷贝mysql的启动脚本，并加入系统服务&lt;pre&gt;&lt;code&gt;[root@console mysql]# cp support-files/mysql.server /etc/init.d/mysqld 
[root@console mysql]# chkconfig --add mysqld
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;启动mysql&lt;pre&gt;&lt;code&gt;[root@console mysql]# service mysqld start
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;配置环境变量，配置完重新打开一个shell&lt;pre&gt;&lt;code&gt;[root@console mysql]# vim /etc/profile.d/mysql.sh
export PATH=/usr/local/mysql/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;修改root密码，因为一装完root密码是空的&lt;pre&gt;&lt;code&gt;[root@console ~]# mysql -uroot mysql 
&lt;/code&gt;&lt;/pre&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/2.png&quot; alt=&quot;&quot;&gt;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; UPDATE user SET Password=PASSWORD(&amp;apos;wisedu123&amp;apos;) where USER=&amp;apos;root&amp;apos;;
mysql&amp;gt; FLUSH PRIVILEGES;
&lt;/code&gt;&lt;/pre&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/3.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;此时再以root登录就需要密码了。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/4.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;删除两个匿名帐号&lt;pre&gt;&lt;code&gt;mysql&amp;gt; use mysql
mysql&amp;gt; SELECT host,user,password FROM user;
&lt;/code&gt;&lt;/pre&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/5.png&quot; alt=&quot;&quot;&gt;&lt;pre&gt;&lt;code&gt;mysql&amp;gt; DROP USER &amp;apos;&amp;apos;@localhost;
mysql&amp;gt; DROP USER &amp;apos;&amp;apos;@console;
&lt;/code&gt;&lt;/pre&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/6.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;h1 id=&quot;安装Zabbix3-0-1&quot;&gt;&lt;a href=&quot;#安装Zabbix3-0-1&quot; class=&quot;headerlink&quot; title=&quot;安装Zabbix3.0.1&quot;&gt;&lt;/a&gt;安装Zabbix3.0.1&lt;/h1&gt;官方说3.0以上版本是在redhat7以上运行的，我之前在redhat6.6尝试编译安装也是可以的。&lt;h2 id=&quot;安装依赖包&quot;&gt;&lt;a href=&quot;#安装依赖包&quot; class=&quot;headerlink&quot; title=&quot;安装依赖包&quot;&gt;&lt;/a&gt;安装依赖包&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;[root@console ~]# yum install net-snmp-devel libxml2-devel libcurl-devel  libssh2-devel unixODBC-devel -y
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;安装JDK&quot;&gt;&lt;a href=&quot;#安装JDK&quot; class=&quot;headerlink&quot; title=&quot;安装JDK&quot;&gt;&lt;/a&gt;安装JDK&lt;/h2&gt;如果zabbix需要监控JMX应用的程序，在编译zabbix的时候就需要–enable-java，同时也需要安装配置好JDK。&lt;pre&gt;&lt;code&gt;# mkdir /usr/java
# tar zxf jdk-8u73-linux-x64.gz -C /usr/java/
# vim /etc/profile
# source /etc/profile
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;安装php环境&quot;&gt;&lt;a href=&quot;#安装php环境&quot; class=&quot;headerlink&quot; title=&quot;安装php环境&quot;&gt;&lt;/a&gt;安装php环境&lt;/h2&gt;zabbix的服务端程序是用php写的，因此需要一个支持LAMP架构的服务器平台。&lt;br&gt;&lt;strong&gt;CentOS 6：&lt;/strong&gt;&lt;br&gt;CenOS 6的yum源中自带的php解释器版本过低，是 5.3版本，需要&amp;gt;=5.4版本才可以。这里使用 Webtatic EL6的YUM源来安装php5.4,我们首先安装Webtatic EL6 YUM源：&lt;pre&gt;&lt;code&gt;# rpm -Uvh http://repo.webtatic.com/yum/el6/latest.rpm 
# yum install php54w php54w-mysql php54w-mbstring php54w-bcmath php54w-gd php54w-xml -y
&lt;/code&gt;&lt;/pre&gt;&lt;strong&gt;CentOS 7：&lt;/strong&gt;&lt;pre&gt;&lt;code&gt;# yum install php php-fpm php-mysql php-mbstring php-bcmath php-gd php-xml -y
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;编译安装zabbix-server&quot;&gt;&lt;a href=&quot;#编译安装zabbix-server&quot; class=&quot;headerlink&quot; title=&quot;编译安装zabbix server&quot;&gt;&lt;/a&gt;编译安装zabbix server&lt;/h2&gt;&lt;p&gt;如果仅安装server，并支持将数据放入mysql数据中，可使用类似如下配置命令：&lt;br&gt;./configure –enable-server –with-mysql –with-net-snmp –with-libcurl&lt;br&gt;如果仅安装proxy，并支持将数据放入mysql数据中，可使用类似如下配置命令：&lt;br&gt;./configure –prefix=/usr –enable-proxy –with-net-snmp –with-mysql –with-ssh2&lt;br&gt;如果仅安装agent，可使用类似如下配置命令：&lt;br&gt;./configure –enable-agent&lt;br&gt;在console主机上同时安装server和agent，并支持将数据放入mysql数据中：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console local]# cd /usr/local/
[root@console local]# wget http://sourceforge.net/projects/zabbix/files/ZABBIX%20Latest%20Stable/3.0.1/zabbix-3.0.1.tar.gz
[root@console local]# tar zxf zabbix-3.0.1.tar.gz 
[root@console local]# cd zabbix-3.0.1/
[root@console zabbix-3.0.1]# ./configure --prefix=/usr/local/zabbix-3.0.1/ --enable-server --enable-agent --with-mysql --with-net-snmp --with-libcurl --with-libxml2 --enable-ipv6 --with-ssh2 --enable-java --with-unixodbc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/7.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console zabbix-3.0.1]# make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;初始化数据库&quot;&gt;&lt;a href=&quot;#初始化数据库&quot; class=&quot;headerlink&quot; title=&quot;初始化数据库&quot;&gt;&lt;/a&gt;初始化数据库&lt;/h2&gt;&lt;p&gt;For Zabbix server and proxy daemons, as well as Zabbix frontend, a database is required. It is not needed to run Zabbix agent.&lt;br&gt;数据库初始化脚本在/usr/local/zabbix-3.0.1/database/mysql，分别是data.sql、images.sql和schema.sql。&lt;br&gt;&lt;strong&gt;注意:&lt;/strong&gt;导入顺序不能变。&lt;br&gt;先在MySQL中创建zabbix数据库：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console ~]# mysql -uroot -p
mysql&amp;gt; create database zabbix default charset utf8;
mysql&amp;gt; grant all on zabbix.* to zabbix@localhost identified by &amp;apos;wisedu&amp;apos;;
mysql&amp;gt; grant all on zabbix.* to zabbix@&amp;apos;%.%.%.%&amp;apos; identified by &amp;apos;wisedu&amp;apos;;
mysql&amp;gt; flush privileges;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后退出，使用zabbix用户登录mysql并导入数据：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console ~]# mysql -uzabbix -p
mysql&amp;gt; use zabbix;
mysql&amp;gt; source /usr/local/zabbix-3.0.1/database/mysql/schema.sql
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果你仅仅是初始化proxy的数据库，那么schema.sql够了。如果初始化server，那么接着导入下面两个sql：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql&amp;gt; source /usr/local/zabbix-3.0.1/database/mysql/images.sql
mysql&amp;gt; source /usr/local/zabbix-3.0.1/database/mysql/data.sql
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果是初始化agent，就不需要导入任何脚本。&lt;/p&gt;
&lt;h2 id=&quot;配置zabbix-server&quot;&gt;&lt;a href=&quot;#配置zabbix-server&quot; class=&quot;headerlink&quot; title=&quot;配置zabbix server&quot;&gt;&lt;/a&gt;配置zabbix server&lt;/h2&gt;&lt;p&gt;因为上面我在编译加了–prefix=/usr/local/zabbix-3.0.1/参数，所以配置文件路径在：/usr/local/zabbix-3.0.1/etc。如果在编译时没有加这个参数，默认配置文件在/usr/local/etc/。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console mysql]# cd /usr/local/zabbix-3.0.1/etc/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/8.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;修改server配置文件，备份原配置文件，然后去掉注释：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console etc]# mv zabbix_server.conf zabbix_server.conf.bak
[root@console etc]# cat zabbix_server.conf.bak | grep -v &amp;quot;#&amp;quot; | grep -v &amp;quot;^$&amp;quot; &amp;gt; zabbix_server.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最终改后的配置文件内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console etc]# cat zabbix_server.conf
LogFile=/var/log/zabbix_server.log
DBHost=localhost
DBName=zabbix
DBUser=zabbix
DBPassword=wisedu
# 注意mysql服务器上的mysql.sock文件路径，一般zabbix server和mysql在同一台就改为/tmp/mysql.sock，否则不修改
DBSocket=/tmp/mysql.sock
Timeout=4
LogSlowQueries=3000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/9.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;修改agent配置文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console etc]# mv zabbix_agentd.conf zabbix_agentd.conf.bak
[root@console etc]# cat zabbix_agentd.conf.bak | grep -v &amp;quot;#&amp;quot; | grep -v &amp;quot;^$&amp;quot; &amp;gt; zabbix_agentd.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;agent配置文件内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console etc]# cat zabbix_agentd.conf
LogFile=/var/log/zabbix_agentd.log
Server=114.55.29.246
# 主动向zabbix server发送监控内容
ServerActive=114.55.29.246
Hostname=console
Include=/usr/local/zabbix-3.0.1/etc/zabbix_agentd.conf.d/*.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建日志文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console etc]# touch /var/log/{zabbix_server.log,zabbix_agentd.log} 
[root@console etc]# chmod 777 /var/log/zabbix_*
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;启动zabbix-server&quot;&gt;&lt;a href=&quot;#启动zabbix-server&quot; class=&quot;headerlink&quot; title=&quot;启动zabbix server&quot;&gt;&lt;/a&gt;启动zabbix server&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;[root@console ~]# cd /usr/local/zabbix-3.0.1/sbin/
[root@console sbin]# ./zabbix_server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看10051端口，端口默认是10051。&lt;br&gt;一大堆进程。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/10.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;可以查看启动日志：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@log sbin]# tail -100f /var/log/zabbix_server.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;常见启动错误：&lt;br&gt;./zabbix_server: error while loading shared libraries: libmysqlclient.so.18: cannot open shared object file: No such file or directory&lt;br&gt;解决：    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ln -s /usr/local/mysql/lib/libmysqlclient.so.18  /usr/lib64/
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;停止zabbix-server&quot;&gt;&lt;a href=&quot;#停止zabbix-server&quot; class=&quot;headerlink&quot; title=&quot;停止zabbix server&quot;&gt;&lt;/a&gt;停止zabbix server&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;# killall -9 zabbix_server
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;安装zabbix-web界面-和server端装在一台机器&quot;&gt;&lt;a href=&quot;#安装zabbix-web界面-和server端装在一台机器&quot; class=&quot;headerlink&quot; title=&quot;安装zabbix web界面(和server端装在一台机器)&quot;&gt;&lt;/a&gt;安装zabbix web界面(和server端装在一台机器)&lt;/h2&gt;&lt;p&gt;zabbix的服务端程序是用php写的，因此需要一个支持LAMP架构的服务器平台。Web服务器可以使用Httpd或者Nginx。&lt;br&gt;鉴于zabbix最近爆出来的漏洞：zabbix的jsrpc的profileldx2参数存在insert方式的SQL注入漏洞，攻击者可以无需授权登陆即可登陆zabbix管理系统，也可通过script等功能轻易直接获取zabbix服务器的操作系统权限。建议升级到最新的zabbix-3.0.4版本，或者使用nginx，这样可以在server段加入如下配置处理这个漏洞：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if ($request_uri ~ ^(.+\.php)(.*)$) {
        set $req $2;
}
if ($req ~* &amp;quot;union[+|(%20)]&amp;quot;) {
        return 503;
}
if ($req ~* &amp;quot;and[+|(%20)]&amp;quot;) { 
       return 503;
}
if ($req ~* &amp;quot;select[+|(%20)]&amp;quot;) { 
       return 503;
}
if ($req ~* &amp;quot;or[+|(%20)]&amp;quot;) { 
       return 503;
}
if ($req ~* &amp;quot;concat[+|(%20)]&amp;quot;) { 
       return 503;
}
if ($req ~* &amp;quot;cost[+|(%20)]&amp;quot;) { 
       return 503;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;使用httpd&quot;&gt;&lt;a href=&quot;#使用httpd&quot; class=&quot;headerlink&quot; title=&quot;使用httpd&quot;&gt;&lt;/a&gt;使用httpd&lt;/h3&gt;&lt;h4 id=&quot;安装httpd&quot;&gt;&lt;a href=&quot;#安装httpd&quot; class=&quot;headerlink&quot; title=&quot;安装httpd&quot;&gt;&lt;/a&gt;安装httpd&lt;/h4&gt;&lt;p&gt;我这里使用httpd2.4。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console ~]# yum install -y httpd
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;部署zabbix-web&quot;&gt;&lt;a href=&quot;#部署zabbix-web&quot; class=&quot;headerlink&quot; title=&quot;部署zabbix web&quot;&gt;&lt;/a&gt;部署zabbix web&lt;/h4&gt;&lt;p&gt;将ZABBIX安装目录下 frontends/php 下面的php源代码文件拷贝到web服务器html文件目录下面。&lt;br&gt;先建立一个子目录，将zabbix终端php文件拷贝到该子目录里面，执行下面的命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console ~]# cd /var/www/html/
[root@console html]# mkdir /var/www/html/zabbix
[root@console html]# cp -ar /usr/local/zabbix-3.0.1/frontends/php/* ./zabbix/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;启动httpd：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console html]# systemctl start httpd.service
[root@console ~]# systemctl enable httpd.service
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;访问：&lt;br&gt;&lt;a href=&quot;http://114.55.29.246/zabbix/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://114.55.29.246/zabbix/&lt;/a&gt;&lt;br&gt; (1) You should see the first screen of the frontend installation wizard.&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/11.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;(2) 检查环境&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/12.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;查看到几处不符合要求，需修改该PHP文件配置文件参数:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# vim /etc/php.ini
post_max_size = 16M
max_execution_time = 300
max_input_time = 300
date.timezone = Asia/Shanghai
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后重启httpd和mysql，不重启mysql下面sql连接时还是会报错。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console ~]# systemctl restart httpd.service 
[root@console ~]# service mysqld restart
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重新访问，全部依赖都通过：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/13.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;(3) 输入之前在MYSQL后台设置的zabbix数据库信息:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DBName=zabbix
DBUser=zabbix
DBPassword=wisedu
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/14.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;报错：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/15.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;解决：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console ~]# mkdir /var/lib/mysql
[root@console ~]# ln -s /tmp/mysql.sock /var/lib/mysql/mysql.sock
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;点击下一步，还是报错：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/16.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;解决：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql&amp;gt; grant all on zabbix.* to &amp;apos;zabbix&amp;apos;@&amp;apos;console&amp;apos; identified by &amp;apos;wisedu&amp;apos;;
mysql&amp;gt; flush privileges;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果以上方法试过后，还报下面的错误：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Error connecting to database: Can&amp;apos;t connect to MySQL server on &amp;apos;&amp;apos;114.55.29.246&amp;apos;&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请检查SELinux是否关闭。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console ~]# /usr/sbin/sestatus -v
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/17.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;关闭SELinux：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console ~]# setenforce 0
[root@console ~]# vim /etc/sysconfig/selinux
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/18.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/19.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;(4) 输入zabbix服务器端的详细信息&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/20.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;(5) 检查一下设置情况&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/21.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;(6) 下载配置文件，并把它放置在/var/www/html/zabbix/conf/ 目录下&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/22.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;Alternatively, you can install it manually:&lt;br&gt;Download the configuration file&lt;br&gt;Save it as “/var/www/html/zabbix/conf/zabbix.conf.php”&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/23.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console conf]# cd /var/www/html/zabbix/conf/
[root@console conf]# chown zabbix.zabbix zabbix.conf.php
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(7) 点击Finish&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/24.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;(8) Zabbix frontend is ready! The default user name is Admin, password zabbix.&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/25.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/26.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用Nginx&quot;&gt;&lt;a href=&quot;#使用Nginx&quot; class=&quot;headerlink&quot; title=&quot;使用Nginx&quot;&gt;&lt;/a&gt;使用Nginx&lt;/h3&gt;&lt;h4 id=&quot;安装openresty&quot;&gt;&lt;a href=&quot;#安装openresty&quot; class=&quot;headerlink&quot; title=&quot;安装openresty&quot;&gt;&lt;/a&gt;安装openresty&lt;/h4&gt;&lt;p&gt;log2主机上安装openresty&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# yum install readline-devel pcre-devel openssl-devel gcc -y
# cd /usr/local
# tar zxf openresty-1.9.7.3.tar.gz
# cd openresty-1.9.7.3/
# ./configure --with-http_stub_status_module
# gmake &amp;amp;&amp;amp; gmake install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装完成后，在/usr/local/下多了个openresty目录，nginx部署安装在/usr/local/openresty/nginx。&lt;br&gt;将nginx加入系统服务：&lt;br&gt;&lt;strong&gt;Redhat7之前的版本：&lt;/strong&gt;&lt;br&gt;(1)    上传nginx启动脚本到/etc/init.d/目录下&lt;br&gt;(2)    授权脚本执行权限&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@log2 init.d]# chmod a+x nginx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(3)    加入系统服务&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@log2 init.d]# chkconfig --add nginx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(4)    nginx开启自启动&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@log2 init.d]# chkconfig nginx on
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(5)    nginx启停重载&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;service nginx start/stop/restart/reload
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Redhat7版本：&lt;/strong&gt;&lt;br&gt;(1)    启动服务单元&lt;br&gt;把写好的nginx.service放到/etc/systemd/system/目录下。&lt;br&gt;(2)    设置开机启动&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@log2 ~]# systemctl enable nginx.service
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(3)    启动/停止/重载nginx服务&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl start/stop/reload nginx.service
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;启动php&quot;&gt;&lt;a href=&quot;#启动php&quot; class=&quot;headerlink&quot; title=&quot;启动php&quot;&gt;&lt;/a&gt;启动php&lt;/h4&gt;&lt;p&gt;Nginx是没办法以模块化方式或者CGI方式跟php结合的，php就可以工作在fastcgi模式下。即单独启动为服务。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# vim /etc/php.ini
post_max_size = 16M
max_execution_time = 300
max_input_time = 300
date.timezone = Asia/Shanghai
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;启动：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# systemctl start php-fpm.service
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;部署zabbix-web-1&quot;&gt;&lt;a href=&quot;#部署zabbix-web-1&quot; class=&quot;headerlink&quot; title=&quot;部署zabbix web&quot;&gt;&lt;/a&gt;部署zabbix web&lt;/h4&gt;&lt;p&gt;将zabbix安装目录下 frontends/php 下面的php源代码文件拷贝到web服务器html文件目录下面。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mkdir /usr/local/openresty/nginx/html/zabbix
# cp -ar /usr/local/zabbix-3.0.1/frontends/php/* /usr/local/openresty/nginx/html//zabbix/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改nginx配置文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/openresty/nginx/conf/
# cp nginx.conf nginx.conf.bak
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;配置文件内容：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#user  nobody;
worker_processes  1;

error_log  logs/error.log info;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
        worker_connections  1024;
}

http {
        include       mime.types;
        default_type  application/octet-stream;

        log_format  main  &amp;apos;$remote_addr - $remote_user [$time_local] &amp;quot;$request&amp;quot; &amp;apos; &amp;apos;$status $body_bytes_sent &amp;quot;$http_referer&amp;quot; &amp;apos; &amp;apos;&amp;quot;$http_user_agent&amp;quot; &amp;quot;$http_x_forwarded_for&amp;quot;&amp;apos;;

        #access_log  logs/access.log  main;

        proxy_buffer_size  128k;
        proxy_buffers   32 32k; 
        proxy_busy_buffers_size 128k;

           sendfile        on;
           #tcp_nopush     on;

        #keepalive_timeout  0;
        keepalive_timeout  65;

        #gzip  on;

           server {
                listen       80;
                    server_name  zabbix.wisedu.com;

                     #charset koi8-r;

                     access_log  logs/zabbix.access.log  main;

                      index index.php index.html index.html;
                     root /usr/local/openresty/nginx/html;

                  if ($request_uri ~ ^(.+\.php)(.*)$) {
                                set $req $2;
                     }
                     if ($req ~* &amp;quot;union[+|(%20)]&amp;quot;) {
                                return 503;
                     }
                     if ($req ~* &amp;quot;and[+|(%20)]&amp;quot;) { 
                                return 503;
                    }
                     if ($req ~* &amp;quot;select[+|(%20)]&amp;quot;) { 
                                return 503;
                    }
                     if ($req ~* &amp;quot;or[+|(%20)]&amp;quot;) { 
                                return 503;
                    }
                     if ($req ~* &amp;quot;concat[+|(%20)]&amp;quot;) { 
                                return 503;
                    }
                     if ($req ~* &amp;quot;cost[+|(%20)]&amp;quot;) { 
                                return 503;
                    }

                     location / {
                                try_files $uri $uri/ /index.php?$args;
                      }

                     location ~ .*\.(php)?$ {
                                fastcgi_buffer_size 128k;
                                fastcgi_buffers 4 256k;
                                fastcgi_busy_buffers_size 256k;
                              expires -1s;
                              try_files $uri =404;
                                fastcgi_split_path_info ^(.+\.php)(/.+)$;
                                include fastcgi_params;
                                fastcgi_param PATH_INFO $fastcgi_path_info;
                                fastcgi_index index.php;
                                fastcgi_param SCRIPT_FILENAME $document_root $fastcgi_script_name;
                                fastcgi_pass 127.0.0.1:9000;
                    }

                       error_page   500 502 503 504  /50x.html;
                   location = /50x.html {
                                 root   html;
                       }
                }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;浏览器访问url进行安装，安装过程和上面httpd一样。&lt;/p&gt;
&lt;h4 id=&quot;切割Nginx日志&quot;&gt;&lt;a href=&quot;#切割Nginx日志&quot; class=&quot;headerlink&quot; title=&quot;切割Nginx日志&quot;&gt;&lt;/a&gt;切割Nginx日志&lt;/h4&gt;&lt;p&gt;如果开启Nginx的debug日志，就需要考虑到切割日志：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /etc/logrotate.d/
# vim nginx
/usr/local/openresty/nginx/logs/*.log {
        notifempty
        weekly
        rotate 4
        nocompress
        copytruncate
        postrotate
        service nginx reload
        endscript
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;其他主机安装agent&quot;&gt;&lt;a href=&quot;#其他主机安装agent&quot; class=&quot;headerlink&quot; title=&quot;其他主机安装agent&quot;&gt;&lt;/a&gt;其他主机安装agent&lt;/h1&gt;&lt;p&gt;log1和log2主机安装agent。&lt;/p&gt;
&lt;h2 id=&quot;添加用户&quot;&gt;&lt;a href=&quot;#添加用户&quot; class=&quot;headerlink&quot; title=&quot;添加用户&quot;&gt;&lt;/a&gt;添加用户&lt;/h2&gt;&lt;p&gt;Zabbix agent也不能用root用户运行，要以zabbix用户身份运行。否则：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./zabbix_agentd
zabbix_agentd [15530]: user zabbix does not exist
zabbix_agentd [15530]: cannot run as root!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;添加用户：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# groupadd zabbix
# useradd -g zabbix zabbix
# id zabbix
uid=1000(zabbix) gid=1000(zabbix) groups=1000(zabbix)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;安装agent&quot;&gt;&lt;a href=&quot;#安装agent&quot; class=&quot;headerlink&quot; title=&quot;安装agent&quot;&gt;&lt;/a&gt;安装agent&lt;/h2&gt;&lt;p&gt;从console主机上将zabbix源代码包copy过来：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@console local]# scp -p zabbix-3.0.1.tar.gz root@114.55.29.86:/usr/local/
[root@console local]# scp -p zabbix-3.0.1.tar.gz root@114.55.29.241:/usr/local/

# yum install -y gcc
# cd /usr/local/
# tar zxf zabbix-3.0.1.tar.gz
# cd zabbix-3.0.1/
# ./configure --prefix=/usr/local/zabbix-3.0.1/ --enable-agent
# make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;配置agent&quot;&gt;&lt;a href=&quot;#配置agent&quot; class=&quot;headerlink&quot; title=&quot;配置agent&quot;&gt;&lt;/a&gt;配置agent&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;# cd /usr/local/zabbix-3.0.1/etc/
# mv zabbix_agentd.conf zabbix_agentd.conf.bak
# cat zabbix_agentd.conf.bak | grep -v &amp;quot;#&amp;quot; | grep -v &amp;quot;^$&amp;quot; &amp;gt; zabbix_agentd.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改后的agent配置文件内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cat zabbix_agentd.conf
LogFile=/var/log/zabbix_agentd.log
Server=114.55.29.246
# 主动向zabbix server发送监控内容
ServerActive=114.55.29.246
# 本机的主机名或IP地址
Hostname=log1
Include=/usr/local/zabbix-3.0.1/etc/zabbix_agentd.conf.d/*.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建日志文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# touch /var/log/zabbix_agentd.log
# chmod 777 /var/log/zabbix_agentd.log
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;启动agent&quot;&gt;&lt;a href=&quot;#启动agent&quot; class=&quot;headerlink&quot; title=&quot;启动agent&quot;&gt;&lt;/a&gt;启动agent&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;# cd /usr/local/zabbix-3.0.1/sbin/
# ./zabbix_agentd
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看端口是否监听，默认agent端口是10050：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# lsof -i :10050
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/zabbix/27.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以查看日志：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# tail -100f /var/log/zabbix_agentd.log
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;停止agent&quot;&gt;&lt;a href=&quot;#停止agent&quot; class=&quot;headerlink&quot; title=&quot;停止agent&quot;&gt;&lt;/a&gt;停止agent&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;# killall -9 zabbix_agentd
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;具体的监控配置实例见下一篇文章。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;实验环境&quot;&gt;&lt;a href=&quot;#实验环境&quot; class=&quot;headerlink&quot; title=&quot;实验环境&quot;&gt;&lt;/a&gt;实验环境&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;主机名&lt;/th&gt;
&lt;th&gt;操作系统版本&lt;/th&gt;
&lt;th&gt;IP地址&lt;/th&gt;
&lt;th&gt;安装软件&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;console&lt;/td&gt;
&lt;td&gt;CentOS 7.0&lt;/td&gt;
&lt;td&gt;114.55.29.246&lt;/td&gt;
&lt;td&gt;Httpd、Nginx、MySQL、Zabbix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;log1&lt;/td&gt;
&lt;td&gt;CentOS 7.0&lt;/td&gt;
&lt;td&gt;114.55.29.86&lt;/td&gt;
&lt;td&gt;Zabbix agent&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;log2&lt;/td&gt;
&lt;td&gt;CentOS 7.0&lt;/td&gt;
&lt;td&gt;114.55.29.241&lt;/td&gt;
&lt;td&gt;Zabbix agent&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="监控 zabbix" scheme="http://yoursite.com/tags/%E7%9B%91%E6%8E%A7-zabbix/"/>
    
  </entry>
  
  <entry>
    <title>速成RPM包制作</title>
    <link href="http://yoursite.com/2017/04/21/%E9%80%9F%E6%88%90RPM%E5%8C%85%E5%88%B6%E4%BD%9C/"/>
    <id>http://yoursite.com/2017/04/21/速成RPM包制作/</id>
    <published>2017-04-21T06:38:46.000Z</published>
    <updated>2017-04-21T09:43:10.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;FPM&quot;&gt;&lt;a href=&quot;#FPM&quot; class=&quot;headerlink&quot; title=&quot;FPM&quot;&gt;&lt;/a&gt;FPM&lt;/h1&gt;&lt;p&gt;由于很多软件在安装时需要编译，这会浪费不少的时间，为了提升部署效率，于是就想到制作rpm包。&lt;br&gt;通常rpm包的制作是使用rpmbuild命令来制作，但是你需要知道它的语法，比较繁琐。这就用到了FPM。&lt;br&gt;FPM功能简单说就是将一种类型的包转换成另一种类型。FPM是Ruby模块，其实打包时也是调用rpmbuild命令。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;strong&gt;支持的源类型包：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;dir 将目录打包成所需要的类型，可以用于源码编译安装的软件包&lt;/li&gt;
&lt;li&gt;rpm 对rpm进行转换&lt;/li&gt;
&lt;li&gt;gem 对rubygem包进行转换&lt;/li&gt;
&lt;li&gt;python 将python模块打包成相应的类型&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;支持的目标类型包：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;rpm 转换成rpm包&lt;/li&gt;
&lt;li&gt;deb 转换成deb包&lt;/li&gt;
&lt;li&gt;solaris 转换成solaris包&lt;/li&gt;
&lt;li&gt;puppet 转换成puppet模块&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;安装FPM&quot;&gt;&lt;a href=&quot;#安装FPM&quot; class=&quot;headerlink&quot; title=&quot;安装FPM&quot;&gt;&lt;/a&gt;安装FPM&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装依赖包&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# yum -y install ruby rubygems ruby-devel&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加仓库&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# gem sources -a http://gems.ruby-china.org/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;移除原有的仓库&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# gem sources --remove https://rubygems.org/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看仓库是不是只有自己添加的那个仓库地址&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# gem sources -l &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;https://gems.ruby-china.org&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装fpm&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# gem install fpm&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何查看fpm帮助&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# fpm --help&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;常用参数：&lt;/strong&gt;&lt;br&gt;-s 指定源类型&lt;br&gt;-t 指定目标类型&lt;br&gt;-n 指定包的名字&lt;br&gt;-v 指定包的版本号&lt;br&gt;-C 指定打包的相对路径 change directory to here before searching for files&lt;br&gt;-d 指定依赖于哪些包&lt;br&gt;-f 第二次打包时目录下如果有同名安装包存在，则覆盖它&lt;br&gt;-p 输出的安装包的目录，不想放在当前目录下就需要指定&lt;br&gt;–post-install 软件包安装完成之后所要运行的脚本，同–after-install&lt;br&gt;–pre-install 软件包安装完成之前所要运行的脚本，同–before-install&lt;br&gt;–post-uninstall 软件包卸载之后所要运行的脚本，同–after-install&lt;br&gt;–pre-uninstall 软件包卸载之前所要运行的脚本，同–before-install&lt;/p&gt;
&lt;h1 id=&quot;打包示例&quot;&gt;&lt;a href=&quot;#打包示例&quot; class=&quot;headerlink&quot; title=&quot;打包示例&quot;&gt;&lt;/a&gt;打包示例&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;打包MySQL&lt;br&gt;事先安装好MySQL，MySQL安装过程这里不在详述。命令行终端输入以下命令，然后等待rpm包制作完成。&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# fpm -s dir -t rpm -n mysql -v 5.6.27 --description &amp;apos;author: jkzhao&amp;apos; -d &amp;apos;libaio&amp;apos; -d &amp;apos;libaio-devel&amp;apos; --pre-install /usr/local/mysql/mysql_pre_init.sh --post-install /usr/local/mysql/mysql_post_init.sh  /usr/local/mysql /usr/local/mysql-5.6.27-linux-glibc2.5-x86_64 /data&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：默认打好的包是在当前目录下。&lt;br&gt;&lt;strong&gt;命令说明：&lt;/strong&gt;&lt;br&gt;    -s dir：指定源文件是目录的形式&lt;br&gt;    -t rpm：指定打包的格式&lt;br&gt;    -n：指定打包后名称&lt;br&gt;    -v：版本号&lt;br&gt;   –description：描述信息&lt;br&gt;    -d：指定需要依赖的包。安装MySQL前需要在系统上安装libaio、libaio-devel。当你安装fpm打包成的rpm包时，它会先去检测系统上是否安装了这两个包，如果没有安装会给出提示，并终止rpm的安装。&lt;br&gt;    –pre-install：安装rpm包前需要执行的脚本&lt;br&gt;    –post-install：安装rpm包后需要执行的脚本 &lt;br&gt;&lt;br&gt;其中，mysql_pre_init.sh的内容如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#!/bin/bash&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;user=mysql&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;group=mysql&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# create group if not exists.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;egrep &amp;quot;^$group&amp;quot; /etc/group &amp;gt;&amp;amp; /dev/null&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;if [ $? -ne 0 ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;then&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    groupadd -r -g 300 $group&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fi&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# create user if not exists.  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;egrep &amp;quot;^$user&amp;quot; /etc/passwd &amp;gt;&amp;amp; /dev/null&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;if [ $? -ne 0 ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;then&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    useradd -g $group -r -s /sbin/nologin -u 300 $user&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fi&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;mysql_post_init.sh的内容如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#!/bin/bash&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# cp my.cnf force.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;\cp /usr/local/mysql/my.cnf /etc/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# start/stop/restart script.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;\cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;chkconfig --add mysqld&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# MySQL Client PATH.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;\cp /usr/local/mysql/mysql.sh /etc/profile.d/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cd /usr/local/mysql&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;chown -R root.mysql .&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;chown -R mysql.mysql /data&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;打包完成后正常安装，如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# rpm -ivh mysql-5.6.27-1.x86_64.rpm&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打包openresty&lt;br&gt;事先安装好openresty。命令行终端输入以下命令，然后等待rpm包制作完成。&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# fpm -s dir -t rpm -n openresty -v 1.9.7.3 --description &amp;apos;author: jkzhao&amp;apos; -d &amp;apos;openssl-devel&amp;apos; -d &amp;apos;readline-devel&amp;apos; -d &amp;apos;pcre-devel&amp;apos; -d &amp;apos;gcc&amp;apos; --post-install /usr/local/openresty/openresty_init.sh  /usr/local/openresty&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中，openresty_init.sh的内容如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#!/bin/bash&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mv /usr/local/openresty/nginx.service /etc/systemd/system/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;systemctl enable nginx.service&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;如何卸载FPM打包好的rpm包&quot;&gt;&lt;a href=&quot;#如何卸载FPM打包好的rpm包&quot; class=&quot;headerlink&quot; title=&quot;如何卸载FPM打包好的rpm包&quot;&gt;&lt;/a&gt;如何卸载FPM打包好的rpm包&lt;/h1&gt;&lt;p&gt;如果重新安装rpm，必须先卸载rpm包，然后删除相应的目录及文件，否则再次安装时会报错。&lt;br&gt;&lt;strong&gt;注意：&lt;/strong&gt;卸载不要直接删除目录和文件，否则你再次安装这个包时会说已安装，冲突了。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# rpm -e --nodeps  mysql-5.6.27-1.x86_64.rpm&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后再去删除各个目录和配置文件。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;FPM&quot;&gt;&lt;a href=&quot;#FPM&quot; class=&quot;headerlink&quot; title=&quot;FPM&quot;&gt;&lt;/a&gt;FPM&lt;/h1&gt;&lt;p&gt;由于很多软件在安装时需要编译，这会浪费不少的时间，为了提升部署效率，于是就想到制作rpm包。&lt;br&gt;通常rpm包的制作是使用rpmbuild命令来制作，但是你需要知道它的语法，比较繁琐。这就用到了FPM。&lt;br&gt;FPM功能简单说就是将一种类型的包转换成另一种类型。FPM是Ruby模块，其实打包时也是调用rpmbuild命令。&lt;br&gt;
    
    </summary>
    
    
      <category term="rpm" scheme="http://yoursite.com/tags/rpm/"/>
    
  </entry>
  
  <entry>
    <title>vpn简介及openvpn搭建</title>
    <link href="http://yoursite.com/2016/09/06/vpn%E7%AE%80%E4%BB%8B%E5%8F%8Aopenvpn%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2016/09/06/vpn简介及openvpn搭建/</id>
    <published>2016-09-06T03:33:59.000Z</published>
    <updated>2016-09-16T14:24:54.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;VPN介绍&quot;&gt;&lt;a href=&quot;#VPN介绍&quot; class=&quot;headerlink&quot; title=&quot;VPN介绍&quot;&gt;&lt;/a&gt;VPN介绍&lt;/h1&gt;&lt;h2 id=&quot;VPN概述&quot;&gt;&lt;a href=&quot;#VPN概述&quot; class=&quot;headerlink&quot; title=&quot;VPN概述&quot;&gt;&lt;/a&gt;VPN概述&lt;/h2&gt;&lt;p&gt;VPN(全称Virtual Private Network)虚拟专用网络，是依靠ISP和其他的NSP，在公共网络中建立专用的数据通信网络的技术，可以为企业之间或者个人与企业之间提供安全的数据传输隧道服务。在VPN中任意两点之间的连接并没有传统专网所需的端到端的物理链路，而是利用公共网络资源动态组成的，可以理解为通过私有的隧道技术在公共数据网络上模拟出来的和专网有同样功能的点到点的专线技术。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;VPN的主要应用场景&quot;&gt;&lt;a href=&quot;#VPN的主要应用场景&quot; class=&quot;headerlink&quot; title=&quot;VPN的主要应用场景&quot;&gt;&lt;/a&gt;VPN的主要应用场景&lt;/h2&gt;&lt;p&gt;我们根据VPN的常见企业应用，将VPN分为以下4类应用：&lt;/p&gt;
&lt;h3 id=&quot;出差在外访问公司内部资源&quot;&gt;&lt;a href=&quot;#出差在外访问公司内部资源&quot; class=&quot;headerlink&quot; title=&quot;出差在外访问公司内部资源&quot;&gt;&lt;/a&gt;出差在外访问公司内部资源&lt;/h3&gt;&lt;p&gt;企业内部员工出差、休假或特殊情况下在远离办公室的时候，又有需求访问公司的内部网络获取相关资源，就可以通过VPN拨号到公司内部。此时远程拨号的员工和办公室内的员工以及其他拨号的员工之间都相当于在一个局域网内。例如：访问内部的域控制器，文件服务器，OA系统，ERP，HTTP服务，内网飞秋聊天工具等局域网服务应用。&lt;br&gt;&lt;br&gt;运维人员需要个人电脑远程拨号到企业网站的IDC机房，远程维护IDC内网服务器。&lt;br&gt;&lt;br&gt;&lt;strong&gt;外出办公的人如何连接内网服务器呢？&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;没有VPN&lt;br&gt;先登录到外网服务器组中一台服务器，然后在这个外网服务器上SSH到内网服务器。&lt;/li&gt;
&lt;li&gt;有VPN&lt;br&gt;把VPN搭在某一台外网服务器(外网服务器有公网ip)上，这样外出办公人员可以通过vpn拨号到这台机器上，然后在自己笔记本上输入内网服务器的IP:port访问内网服务器。同时有了vpn，可以把外网服务器的远程连接SSH全部屏蔽起来，黑客就不能通过SSH服务来攻击公司的外网服务器。而公司的人员通过vpn拨号拨到这个装了vpn的外网服务器上去，然后访问内网服务器。访问外网服务器通过访问内网ip地址去访问。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;企业内部网络之间VPN服务&quot;&gt;&lt;a href=&quot;#企业内部网络之间VPN服务&quot; class=&quot;headerlink&quot; title=&quot;企业内部网络之间VPN服务&quot;&gt;&lt;/a&gt;企业内部网络之间VPN服务&lt;/h3&gt;&lt;p&gt;在公司的分支机构的局域网和公司内部LAN之间的VPN连接。通过公网Internet建立VPN将公司在各地的分支机构的LAN连接到公司总部的LAN。例如：各大超市之间业务结算等。&lt;br&gt;&lt;br&gt;这是由于地域的原因而产生的VPN需求，通过VPN让不同地域内的机器可以互相访问，就好像是一个局域网一样。例如：办公室互联协同办公，机房互联数据同步及业务访问。&lt;/p&gt;
&lt;h3 id=&quot;互联网公司多IDC机房之间VPN服务&quot;&gt;&lt;a href=&quot;#互联网公司多IDC机房之间VPN服务&quot; class=&quot;headerlink&quot; title=&quot;互联网公司多IDC机房之间VPN服务&quot;&gt;&lt;/a&gt;互联网公司多IDC机房之间VPN服务&lt;/h3&gt;&lt;p&gt;这是运维架构人员需要考虑的问题，不同机房之间业务管理和业务访问，数据流动。&lt;/p&gt;
&lt;h3 id=&quot;企业外部VPN服务&quot;&gt;&lt;a href=&quot;#企业外部VPN服务&quot; class=&quot;headerlink&quot; title=&quot;企业外部VPN服务&quot;&gt;&lt;/a&gt;企业外部VPN服务&lt;/h3&gt;&lt;p&gt;在供应商、合作伙伴的LAN和本公司的LAN之间建立的VPN服务。&lt;br&gt;&lt;br&gt;企业内部网络之间的VPN服务、企业内部网络之间VPN服务和企业外部VPN服务是一套系统，不同的场景。&lt;/p&gt;
&lt;h3 id=&quot;翻墙&quot;&gt;&lt;a href=&quot;#翻墙&quot; class=&quot;headerlink&quot; title=&quot;翻墙&quot;&gt;&lt;/a&gt;翻墙&lt;/h3&gt;&lt;p&gt;翻墙的原理：比如有个VPS，有美国的ip地址。各位的笔记本或台式机通过vpn访问到美国的vps的机器，然后通过这个vitual private server出去访问美国的网站。在网站看来，你的源ip是美国的vps的地址，而你笔记本和vps之间的通信是加密的，走的是vpn协议。vps和后端的网站之间走的是http协议。&lt;/p&gt;
&lt;h2 id=&quot;实现vpn功能的常见开源产品&quot;&gt;&lt;a href=&quot;#实现vpn功能的常见开源产品&quot; class=&quot;headerlink&quot; title=&quot;实现vpn功能的常见开源产品&quot;&gt;&lt;/a&gt;实现vpn功能的常见开源产品&lt;/h2&gt;&lt;h3 id=&quot;PPTP-VPN&quot;&gt;&lt;a href=&quot;#PPTP-VPN&quot; class=&quot;headerlink&quot; title=&quot;PPTP VPN&quot;&gt;&lt;/a&gt;PPTP VPN&lt;/h3&gt;&lt;p&gt;PPTP VPN的最大优点是，不需要在windows客户端单独安装vpn客户端软件，windows默认就支持PPTP VPN拨号连接功能。PPTP VPN属于点对点方式的应用，比较适合远程的企业用户拨号到企业进行办公等的应用，但是很多网络设备不支持PPTP，导致无法访问。典型的Linux平台上的开源软件是pptp。&lt;/p&gt;
&lt;h3 id=&quot;SSL-VPN&quot;&gt;&lt;a href=&quot;#SSL-VPN&quot; class=&quot;headerlink&quot; title=&quot;SSL VPN&quot;&gt;&lt;/a&gt;SSL VPN&lt;/h3&gt;&lt;p&gt;PPTP主要为那些经常外出移动或家庭办公的用户考虑的，而OpenVPN不但可以使用于PPTP的应用场景，还适合针对企业异地两地总分公司之间的VPN不间断按需连接，例如：ERP，OA，及时通讯工具等在总分企业中的应用。但是需要在系统上单独安装客户端软件。典型的Linux平台的开源软件是openvpn。&lt;/p&gt;
&lt;h3 id=&quot;IPSEC-VPN&quot;&gt;&lt;a href=&quot;#IPSEC-VPN&quot; class=&quot;headerlink&quot; title=&quot;IPSEC VPN&quot;&gt;&lt;/a&gt;IPSEC VPN&lt;/h3&gt;&lt;p&gt;IPSEC VPN也适合针对企业异地两地总分公司或多个IDC机房之间的VPN不间断连接，并且在部署使用上更加方便，典型的Linux平台上IPSEC VPN的开源产品是openswan。&lt;/p&gt;
&lt;h1 id=&quot;Linux平台搭建OpenVPN&quot;&gt;&lt;a href=&quot;#Linux平台搭建OpenVPN&quot; class=&quot;headerlink&quot; title=&quot;Linux平台搭建OpenVPN&quot;&gt;&lt;/a&gt;Linux平台搭建OpenVPN&lt;/h1&gt;&lt;h2 id=&quot;环境规划&quot;&gt;&lt;a href=&quot;#环境规划&quot; class=&quot;headerlink&quot; title=&quot;环境规划&quot;&gt;&lt;/a&gt;环境规划&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;主机名&lt;/th&gt;
&lt;th&gt;IP地址&lt;/th&gt;
&lt;th&gt;操作系统版本&lt;/th&gt;
&lt;th&gt;安装软件&lt;/th&gt;
&lt;th&gt;运行的进程&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;odsee&lt;/td&gt;
&lt;td&gt;172.16.4.81&lt;/td&gt;
&lt;td&gt;CentOS 6.3&lt;/td&gt;
&lt;td&gt;openvpn-2.2.2.tar.gz&lt;/td&gt;
&lt;td&gt;openvpn&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;配置vpn-server时间同步&quot;&gt;&lt;a href=&quot;#配置vpn-server时间同步&quot; class=&quot;headerlink&quot; title=&quot;配置vpn server时间同步&quot;&gt;&lt;/a&gt;配置vpn server时间同步&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee ~]# /usr/sbin/ntpdate pool.ntp.org&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;加入到定时任务:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee ~]# echo &amp;apos;#time sync&amp;apos; &amp;gt;&amp;gt; /var/spool/cron/root&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee ~]#  echo &amp;apos;*/5 * * * * /usr/sbin/ntpdate pool.ntp.org &amp;gt;/dev/null 2&amp;gt;&amp;amp;1&amp;apos; &amp;gt;&amp;gt;/var/spool/cron/root&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;strong&gt;注意:&lt;/strong&gt;如果vpn服务器和拨号的计算机客户端时间不一致，可能会导致VPN连接失败。&lt;/p&gt;
&lt;h2 id=&quot;安装openvpn&quot;&gt;&lt;a href=&quot;#安装openvpn&quot; class=&quot;headerlink&quot; title=&quot;安装openvpn&quot;&gt;&lt;/a&gt;安装openvpn&lt;/h2&gt;&lt;p&gt;1.建立openvpn软件存放目录，并上传软件 &lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee ~]# cd /usr/local/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee local]# mkdir openvpn&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee local]# cd openvpn/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/3.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;strong&gt;注意:&lt;/strong&gt;openvpn网上用的最多的是lzo-2.0.2和openvpn-2.0.9，这两个也是最稳定的。&lt;/p&gt;
&lt;p&gt;2.安装lzo压缩模块 &lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee openvpn]# tar zxf lzo-2.06.tar.gz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee openvpn]# cd lzo-2.06&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee lzo-2.06]# ./configure&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee lzo-2.06]# make&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee lzo-2.06]# make install&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3.安装openvpn软件 &lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee lzo-2.06]# cd ..&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee openvpn]# tar zxf openvpn-2.2.2.tar.gz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee openvpn]# cd openvpn-2.2.2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查看依赖包有没有安装，openvpn需要ssl支持：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee openvpn-2.2.2]# rpm -qa|grep openssl&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/4.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee openvpn-2.2.2]# ./configure --with-lzo-headers=/usr/local/include --with-lzo-lib=/usr/local/lib&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee openvpn-2.2.2]# make&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee openvpn-2.2.2]# make install&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;4.配置openvpn server，建立CA证书 &lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee openvpn-2.2.2]# cd easy-rsa/2.0/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee 2.0]# cp vars.bak vars20151204.bak&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee 2.0]# vim vars&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/5.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;修改完vars文件后，执行source vars使修改生效：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/6.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;清除所有证书keys：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee 2.0]# ./clean-all&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;创建新的ca证书：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/7.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/8.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee 2.0]# vim vars&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/9.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee 2.0]# source vars&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/10.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee 2.0]# ./clean-all&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee 2.0]# ./build-ca&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/11.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;查看生成的证书：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/12.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;5.生成服务器端证书和密钥key文件 &lt;br&gt;&lt;br&gt;[root@odsee 2.0]# ./build-key-server server&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/13.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/14.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;也可以输入密码。 &lt;br&gt;&lt;br&gt;查看创建的服务端证书：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/15.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;6.生成客户端证书和key文件 &lt;br&gt;&lt;br&gt;生成client证书和key文件。若建立多个客户端证书，则重复如下步骤即可。只需修改Common Name项的名称。 &lt;br&gt;&lt;br&gt;在openvpn中，这种配置方法是每一个登陆的VPN客户端需要一个证书，每个证书在同一时刻只能供一个客户端连接。下面建立1份客户端证书，key的名字叫test。在工作中一般名字为人的名字。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/16.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/17.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/18.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;.crt是证书，.key是密钥文件。这两个都是客户端需要的。 &lt;br&gt;&lt;br&gt;&lt;strong&gt;注意:&lt;/strong&gt;使用build-key给客户端生成证书和密钥，客户端拨号是不需要密码的。但是也可以加密码，使用build-key-pass脚本创建证书和密钥文件，这样你在客户端拨号的时候需要加密码，密码是拨号vpn的密码。 &lt;br&gt;&lt;br&gt;下面使用build-key-pass创建另一个客户端证书和密钥文件。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee ~]# cd /usr/local/openvpn/openvpn-2.2.2/easy-rsa/2.0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/19.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/20.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;7.生成vpn密钥协议交换文件 &lt;br&gt;&lt;br&gt;生成传输进行密钥交换时用到的交换密钥协议文件：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee 2.0]# ./build-dh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/21.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;查看生成的文件：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/22.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;8.详解服务器及客户端的证书各文件用途 &lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/23.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;为了防止恶意攻击(如DOS、UDP port flooding)，我们生成一个“HMAC firewall”：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee 2.0]# openvpn --genkey --secret keys/ta.key&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/24.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;到此文件生成工作完成了。&lt;/p&gt;
&lt;p&gt;9.详解服务器端VPN重要命令 &lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vars脚本：是用来创建环境变量，设置所需要的变量的脚本&lt;/li&gt;
&lt;li&gt;clean-all脚本：清理生成ca证书及密钥文件&lt;/li&gt;
&lt;li&gt;build-ca脚本：生成ca证书(交互)&lt;/li&gt;
&lt;li&gt;build-key-server脚本：生成服务器端密钥(交互)&lt;/li&gt;
&lt;li&gt;build-key脚本：生成客户端密钥(交互)&lt;/li&gt;
&lt;li&gt;build-key-pass脚本：生成客户端带密码的密钥文件(交互)&lt;/li&gt;
&lt;li&gt;build-dh脚本：脚本生成Diffie-Hellman文件(交互)&lt;/li&gt;
&lt;li&gt;pkitool脚本：直接使用vars的环境变量设置，直接生成证书(非交互)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;10.详解openvpn服务端重要配置参数 &lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拷贝keys及配置&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee 2.0]# mkdir /etc/openvpn/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee 2.0]# cp -ap keys/ /etc/openvpn/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee 2.0]# cd /usr/local/openvpn/openvpn-2.2.2/sample-config-files/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee sample-config-files]# cp client.conf server.conf /etc/openvpn/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/25.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改服务端配置文件&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee 2.0]# cd /etc/openvpn/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee openvpn]# grep -vE &amp;quot;;|#|^$&amp;quot; server.conf &amp;gt;tmp.log&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee openvpn]# cat tmp.log &amp;gt;server.conf&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/26.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;常用的配置说明：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置参数&lt;/th&gt;
&lt;th&gt;参数说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;local 10.0.0.28(外网卡地址)&lt;/td&gt;
&lt;td&gt;哪一个本地地址要被openvpn进行监听&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;port 52115&lt;/td&gt;
&lt;td&gt;监听的端口，默认是1194，这里为了安全起见，修改为52115&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;proto udp&lt;/td&gt;
&lt;td&gt;指定监听的协议，当并发访问多时，推荐tcp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dev tun&lt;/td&gt;
&lt;td&gt;vpn server的模式采用路由模式，可选tap或tun&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ca ca.crt&lt;/td&gt;
&lt;td&gt;ca证书，注意此文件和server.conf在一个目录下，否则要用绝对路径调用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cert server.crt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;key server.key&lt;/td&gt;
&lt;td&gt;this file should be kept secret&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dh dh1024.pem&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;server 10.8.0.0&lt;/td&gt;
&lt;td&gt;这个是vpn server动态分配给vpn client的地址池，一般不需要更改。这个段不要和任何网络地址段冲突或者重复&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ifconfig-pool-persist ipp.txt&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;push “route 172.16.1.0 255.255.255.0”&lt;/td&gt;
&lt;td&gt;这个是vpn server所在的内网网段，如果有多个可以写多个push，注意，此命令实际作用是在vpn client本地生成vpn sever所在的内网网段路由，确保能够和vpn server所在的内网网段通信&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;client-to-client&lt;/td&gt;
&lt;td&gt;允许拨号的多个vpn client互相通信&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;duplicate-cn&lt;/td&gt;
&lt;td&gt;允许多个客户端使用同一个帐号连接&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;keepalive 10 20&lt;/td&gt;
&lt;td&gt;每10秒ping一次，若是120秒未收到包，即认定客户端断线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;comp-lzo&lt;/td&gt;
&lt;td&gt;开启压缩功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;persist-key&lt;/td&gt;
&lt;td&gt;当vpn超时后，当重新启动vpn后，保持上一次使用的私钥，而不重新读取私钥&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;persist-tun&lt;/td&gt;
&lt;td&gt;通过keepalive检测vpn超时后，当重新启动vpn后，保持tun或者tap设备自动连接状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;status openvpn-status.log&lt;/td&gt;
&lt;td&gt;openvpn日志状态信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;log /var/log/openvpn.log&lt;/td&gt;
&lt;td&gt;日志文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;verb 3&lt;/td&gt;
&lt;td&gt;指定日志文件冗余&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;配置调试vpn并运行vpn服务&quot;&gt;&lt;a href=&quot;#配置调试vpn并运行vpn服务&quot; class=&quot;headerlink&quot; title=&quot;配置调试vpn并运行vpn服务&quot;&gt;&lt;/a&gt;配置调试vpn并运行vpn服务&lt;/h2&gt;&lt;p&gt;1.取消防火墙对vpnserver端口的限制以及允许服务转发。或者先关闭防火墙，调好VPN，在开启防火墙 &lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee ~]# service iptables stop&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2.开启内核转发功能 &lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee ~]# sed -i &amp;apos;s#net.ipv4.ip_forward = 0#net.ipv4.ip_forward = 1#&amp;apos; /etc/sysctl.conf&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/27.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee ~]# sysctl -p&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt;iptables和内核的ip_forward都需要开启允许转发。&lt;/p&gt;
&lt;p&gt;3.关闭SELinux &lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee ~]# setenforce 0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee ~]# vim /etc/sysconfig/selinux&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/28.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;4.启动服务端的VPN服务 &lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee openvpn]# /usr/local/sbin/openvpn --config /etc/openvpn/server.conf &amp;amp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee openvpn]# netstat -anp|grep vpn&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/29.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;查看日志：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/30.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;5.服务端查看虚拟网卡 &lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/31.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;安装windows-VPN客户端，配置VPN连接&quot;&gt;&lt;a href=&quot;#安装windows-VPN客户端，配置VPN连接&quot; class=&quot;headerlink&quot; title=&quot;安装windows VPN客户端，配置VPN连接&quot;&gt;&lt;/a&gt;安装windows VPN客户端，配置VPN连接&lt;/h1&gt;&lt;h2 id=&quot;下载安装客户端&quot;&gt;&lt;a href=&quot;#下载安装客户端&quot; class=&quot;headerlink&quot; title=&quot;下载安装客户端&quot;&gt;&lt;/a&gt;下载安装客户端&lt;/h2&gt;&lt;p&gt;下载地址：&lt;a href=&quot;http://swupdate.openvpn.org/community/releases/openvpn-2.2.2-install.exe&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://swupdate.openvpn.org/community/releases/openvpn-2.2.2-install.exe&lt;/a&gt; &lt;br&gt;&lt;br&gt;安装过程中，有一步骤需要信任，见下图：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/32.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;配置客户端证书&quot;&gt;&lt;a href=&quot;#配置客户端证书&quot; class=&quot;headerlink&quot; title=&quot;配置客户端证书&quot;&gt;&lt;/a&gt;配置客户端证书&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee keys]# cd /usr/local/openvpn/openvpn-2.2.2/easy-rsa/2.0/keys/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;先从vpnserver上把那个登录不需要密码的证书和密钥传下来：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee keys]# sz ca.crt test.crt test.key&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee keys]# cd /usr/local/openvpn/openvpn-2.2.2/sample-config-files/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee sample-config-files]# sz client.conf&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;把这些文件放到一个文件夹里：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/33.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/34.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;把这个文件夹放到OpenVPN安装目录的config目录下：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/35.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;配置客户端的配置文件Client-conf&quot;&gt;&lt;a href=&quot;#配置客户端的配置文件Client-conf&quot; class=&quot;headerlink&quot; title=&quot;配置客户端的配置文件Client.conf&quot;&gt;&lt;/a&gt;配置客户端的配置文件Client.conf&lt;/h2&gt;&lt;p&gt;备份配置文件：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/36.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;可以在服务器上过滤配置文件，查看默认配置：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee openvpn]# egrep -v &amp;quot;^#|^;|^$&amp;quot; client.conf&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/37.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/38.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;新建一个文件test.ovpn文件，然后贴入下面的内容：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/39.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;client&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;dev tun&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;proto tcp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;remote 172.16.4.81 52115&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;resolv-retry infinite&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;nobind&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;persist-key&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;persist-tun&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ca ca.crt&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cert test.crt&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;key test.key&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ns-cert-type server&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;comp-lzo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;verb 3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;拨号连接调试&quot;&gt;&lt;a href=&quot;#拨号连接调试&quot; class=&quot;headerlink&quot; title=&quot;拨号连接调试&quot;&gt;&lt;/a&gt;拨号连接调试&lt;/h2&gt;&lt;p&gt;在windows上拨号远程连接openvpn服务，先双击如下图标：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/40.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;然后右下角右击图标，点击connect：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/41.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/42.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;但是发现上不了网，能连上，查看连接vpn前的路由和连接vpn后的路由：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/43.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;测试vpn客户端连接vpn server连通性的方法：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/44.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;原因是：没有设置客户端的默认网关通过vpn出去：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/45.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/46.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;最后改完的配置如下：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/47.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;为什么dns不用8.8.8.8？因为这台vpn server(172.16.4.81) ping不通8.8.8.8&lt;/p&gt;
&lt;h1 id=&quot;常见问题&quot;&gt;&lt;a href=&quot;#常见问题&quot; class=&quot;headerlink&quot; title=&quot;常见问题&quot;&gt;&lt;/a&gt;常见问题&lt;/h1&gt;&lt;p&gt;1.拨号后地址也获取到了，但是就是访问别人时地址，别人那边看到的访问记录还是你原来的ip地址？ &lt;br&gt;&lt;br&gt;解决：以管理员身份运行软件，在拨号上网。&lt;/p&gt;
&lt;p&gt;2.长时间不去生成证书，再次生成证书时如下： &lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/48.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;解决：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee 2.0]# source vars&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;NOTE: If you run ./clean-all, I will be doing a rm -rf on /usr/local/openvpn/openvpn-2.2.2/easy-rsa/2.0/keys&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@odsee 2.0]# ./build-key-pass ldh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/49.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;把生成的3个证书copy到/etc/openvpn/keys目录下。然后给别人用时给.crt .key以及ca.crt3个文件。&lt;/p&gt;
&lt;p&gt;3.win10启动openvpn报错： &lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/50.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;解决：&lt;br&gt;到openvpn安装后的bin下依次以管理员身份执行：delalltap.bat和addtap.bat &lt;br&gt;&lt;br&gt;如果解决上面的问题，还是报错：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/OpenVPN/51.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;解决：&lt;br&gt;以管理员运行openvpn客户端。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;VPN介绍&quot;&gt;&lt;a href=&quot;#VPN介绍&quot; class=&quot;headerlink&quot; title=&quot;VPN介绍&quot;&gt;&lt;/a&gt;VPN介绍&lt;/h1&gt;&lt;h2 id=&quot;VPN概述&quot;&gt;&lt;a href=&quot;#VPN概述&quot; class=&quot;headerlink&quot; title=&quot;VPN概述&quot;&gt;&lt;/a&gt;VPN概述&lt;/h2&gt;&lt;p&gt;VPN(全称Virtual Private Network)虚拟专用网络，是依靠ISP和其他的NSP，在公共网络中建立专用的数据通信网络的技术，可以为企业之间或者个人与企业之间提供安全的数据传输隧道服务。在VPN中任意两点之间的连接并没有传统专网所需的端到端的物理链路，而是利用公共网络资源动态组成的，可以理解为通过私有的隧道技术在公共数据网络上模拟出来的和专网有同样功能的点到点的专线技术。&lt;br&gt;
    
    </summary>
    
    
      <category term="vpn, openvpn" scheme="http://yoursite.com/tags/vpn-openvpn/"/>
    
  </entry>
  
  <entry>
    <title>安装部署Apache Hadoop (完全分布式模式并且实现NameNode HA和ResourceManager HA)</title>
    <link href="http://yoursite.com/2016/08/07/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2Apache%20Hadoop%20(%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%A8%A1%E5%BC%8F%E5%B9%B6%E4%B8%94%E5%AE%9E%E7%8E%B0NameNode%20HA%E5%92%8CResourceManager%20HA)/"/>
    <id>http://yoursite.com/2016/08/07/安装部署Apache Hadoop (完全分布式模式并且实现NameNode HA和ResourceManager HA)/</id>
    <published>2016-08-07T08:51:08.000Z</published>
    <updated>2016-08-15T02:09:44.000Z</updated>
    
    <content type="html">&lt;p&gt;关于Apache Hadoop的介绍以本地模式、伪分布式安装部署请参见上篇博文，本篇博文主要记录完全分布式部署，并实现NameNode高可用和ResourceManager高可用。&lt;/p&gt;
&lt;h1 id=&quot;环境规划&quot;&gt;&lt;a href=&quot;#环境规划&quot; class=&quot;headerlink&quot; title=&quot;环境规划&quot;&gt;&lt;/a&gt;环境规划&lt;/h1&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;主机名&lt;/th&gt;
&lt;th&gt;IP地址&lt;/th&gt;
&lt;th&gt;操作系统版本&lt;/th&gt;
&lt;th&gt;安装软件&lt;/th&gt;
&lt;th&gt;运行的进程&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;hadoop16&lt;/td&gt;
&lt;td&gt;172.16.206.16&lt;/td&gt;
&lt;td&gt;CentOS 7.2&lt;/td&gt;
&lt;td&gt;JDK1.7、hadoop-2.7.2&lt;/td&gt;
&lt;td&gt;NameNode、DFSZKFailoverController(zkfc)、ResourceManager&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hadoop26&lt;/td&gt;
&lt;td&gt;172.16.206.26&lt;/td&gt;
&lt;td&gt;CentOS 6.5&lt;/td&gt;
&lt;td&gt;JDK1.7、hadoop-2.7.2&lt;/td&gt;
&lt;td&gt;NameNode、DFSZKFailoverController(zkfc)、ResourceManager&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hadoop27&lt;/td&gt;
&lt;td&gt;172.16.206.27&lt;/td&gt;
&lt;td&gt;CentOS 6.5&lt;/td&gt;
&lt;td&gt;JDK1.7、hadoop-2.7.2、Zookeeper&lt;/td&gt;
&lt;td&gt;DataNode、NodeManager、JournalNode、QuorumPeerMain&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hadoop28&lt;/td&gt;
&lt;td&gt;172.16.206.28&lt;/td&gt;
&lt;td&gt;CentOS 6.5&lt;/td&gt;
&lt;td&gt;JDK1.7、hadoop-2.7.2、Zookeeper&lt;/td&gt;
&lt;td&gt;DataNode、NodeManager、JournalNode、QuorumPeerMain&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hadoop29&lt;/td&gt;
&lt;td&gt;172.16.206.29&lt;/td&gt;
&lt;td&gt;CentOS 6.5&lt;/td&gt;
&lt;td&gt;JDK1.7、hadoop-2.7.2、Zookeeper&lt;/td&gt;
&lt;td&gt;DataNode、NodeManager、JournalNode、QuorumPeerMain&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;这里由于机器紧张，将NameNode和ResourceManager安装在一台机器上。在hadoop16主机上安装NameNode和ResourceManager使其处于active状态，在hadoop26上安装NameNode和ResourceManager使其处于standby状态。&lt;/p&gt;
&lt;p&gt;环境拓扑：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/32.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;strong&gt;注意：&lt;/strong&gt;这里由于实验环境，所以将NameNode和ResourceManager放在了一起，生产环境下应该将NameNode和ResourceManager放在单独的机器上。&lt;br&gt;&lt;br&gt;Hadoop2.0官方提供了两种HDFS HA的解决方案，一种是NFS，另一种是QJM。这两种共享数据的方案，NFS是操作系统层面的，JournalNode是hadoop层面的，这里我们使用简单的QJM集群进行数据共享。在该方案中，主备NameNode之间通过一组JournalNode同步元数据信息，一条数据只要成功写入多数JournalNode即认为写入成功。通常配置奇数个JournalNode。&lt;br&gt;&lt;br&gt;这里还配置了一个zookeeper集群(27,28,29主机)，用于ZKFC（DFSZKFailoverController）故障转移，当Active NameNode挂掉了，会自动切换Standby NameNode和ResourceManager为standby状态。同时27,28,29主机作为DataNode节点。&lt;/p&gt;
&lt;h1 id=&quot;配置集群各节点hosts文件&quot;&gt;&lt;a href=&quot;#配置集群各节点hosts文件&quot; class=&quot;headerlink&quot; title=&quot;配置集群各节点hosts文件&quot;&gt;&lt;/a&gt;配置集群各节点hosts文件&lt;/h1&gt;&lt;p&gt;在各节点，编辑hosts文件，配置好各节点主机名和ip地址的对应关系：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# vim /etc/hosts&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;172.16.206.16 hadoop16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;172.16.206.26 hadoop26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;172.16.206.27 hadoop27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;172.16.206.28 hadoop28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;172.16.206.29 hadoop29&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;安装JDK1-7&quot;&gt;&lt;a href=&quot;#安装JDK1-7&quot; class=&quot;headerlink&quot; title=&quot;安装JDK1.7&quot;&gt;&lt;/a&gt;安装JDK1.7&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Hadoop Java Versions&lt;/strong&gt; &lt;br&gt;&lt;br&gt;Version 2.7 and later of Apache Hadoop requires Java 7. It is built and tested on both OpenJDK and Oracle (HotSpot)’s JDK/JRE. &lt;br&gt;&lt;br&gt;Earlier versions (2.6 and earlier) support Java 6.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# mkdir /usr/java&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# tar zxf /usr/local/jdk-7u80-linux-x64.gz -C /usr/java/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# vim /etc/profile&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export JAVA_HOME=/usr/java/jdk1.7.0_80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export PATH=$JAVA_HOME/bin:$PATH&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# source /etc/profile&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;安装依赖包ssh和rsync&quot;&gt;&lt;a href=&quot;#安装依赖包ssh和rsync&quot; class=&quot;headerlink&quot; title=&quot;安装依赖包ssh和rsync&quot;&gt;&lt;/a&gt;安装依赖包ssh和rsync&lt;/h1&gt;&lt;p&gt;对于Redhat/CentOS系列的，安装系统时一般都会默认安装openssh软件，里面包含了ssh客户端和ssh服务端，所以先检查下这个软件包是否安装了：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# yum list all openssh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果没有安装，安装：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# yum install -y openssh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在检查rsync软件包是否安装：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# yum list all rsync&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;各节点时间同步&quot;&gt;&lt;a href=&quot;#各节点时间同步&quot; class=&quot;headerlink&quot; title=&quot;各节点时间同步&quot;&gt;&lt;/a&gt;各节点时间同步&lt;/h1&gt;&lt;p&gt;采用NTP(Network Time Protocol)方式来实现, 选择一台机器, 作为集群的时间同步服务器, 然后分别配置服务端和集群其他机器。我这里以hadoop16机器时间为准，其他机器同这台机器时间做同步。&lt;/p&gt;
&lt;h2 id=&quot;NTP服务端&quot;&gt;&lt;a href=&quot;#NTP服务端&quot; class=&quot;headerlink&quot; title=&quot;NTP服务端&quot;&gt;&lt;/a&gt;NTP服务端&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装ntp服务&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# yum install ntp -y&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置/etc/ntp.conf，这边采用本地机器作为时间的原点&lt;br&gt;注释server列表：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;server 0.centos.pool.ntp.org iburst&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;server 1.centos.pool.ntp.org iburst&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;server 2.centos.pool.ntp.org iburst&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;server 3.centos.pool.ntp.org iburst&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;添加如下内容：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;server 127.127.1.0 prefer&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fudge 127.127.1.0 stratum 8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;logfile /var/log/ntp.log&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;启动ntpd服务&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# systemctl start ntpd&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看ntp服务状态&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# systemctl status ntpd&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;加入开机启动&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# systemctl enable ntpd&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;NTP客户端&quot;&gt;&lt;a href=&quot;#NTP客户端&quot; class=&quot;headerlink&quot; title=&quot;NTP客户端&quot;&gt;&lt;/a&gt;NTP客户端&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装ntp&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# yum install ntpdate&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置crontab任务主动同步&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# crontab -e&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*/10 * * * * /usr/sbin/ntpdate 172.16.206.16;hwclock -w&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;安装Zookeeper集群&quot;&gt;&lt;a href=&quot;#安装Zookeeper集群&quot; class=&quot;headerlink&quot; title=&quot;安装Zookeeper集群&quot;&gt;&lt;/a&gt;安装Zookeeper集群&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;对于Zookeeper集群的话，官方推荐的最小节点数为3个。&lt;/p&gt;
&lt;h2 id=&quot;安装配置zk&quot;&gt;&lt;a href=&quot;#安装配置zk&quot; class=&quot;headerlink&quot; title=&quot;安装配置zk&quot;&gt;&lt;/a&gt;安装配置zk&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;配置zk节点的hosts文件&lt;br&gt;配置zk节点的hosts文件：配置3台机器的ip地址和主机名的对应关系。上面已经做过了。这里选择3台安装zk：hadoop27，hadoop28，hadoop29。&lt;/li&gt;
&lt;li&gt;解压安装配置第一台zk&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# cd /usr/local/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# tar zxf zookeeper-3.4.6.tar.gz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# cd zookeeper-3.4.6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;创建快照日志存放目录：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# mkdir dataDir&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;创建事务日志存放目录：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# mkdir dataLogDir&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;如果不配置dataLogDir，那么事务日志也会写在dataDir目录中。这样会严重影响zk的性能。因为在zk吞吐量很高的时候，产生的事务日志和快照日志太多。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# cd conf&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# mv zoo_sample.cfg zoo.cfg&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# vim zoo.cfg&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 存放数据文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;dataDir=/usr/local/zookeeper-3.4.6/dataDir&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 存放日志文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;dataLogDir=/usr/local/zookeeper-3.4.6/dataLogDir&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# zookeeper cluster，2888为选举端口，3888为心跳端口&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;server.1=hadoop27:2888:3888&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;server.2=hadoop28:2888:3888&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;server.3=hadoop29:2888:3888&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/33.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;在我们配置的dataDir指定的目录下面，创建一个myid文件，里面内容为一个数字，用来标识当前主机，conf/zoo.cfg文件中配置的server.X中X为什么数字，则myid文件中就输入这个数字： &lt;br&gt;&lt;br&gt;hadoop27主机：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# echo &amp;quot;1&amp;quot; &amp;gt; /usr/local/zookeeper-3.4.6/dataDir/myid&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;远程复制第一台的zk到另外两台上，并修改myid文件为2和3&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# cd /usr/local/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# scp -rp zookeeper-3.4.6 root@172.16.206.28:/usr/local/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# echo &amp;quot;2&amp;quot; &amp;gt; /usr/local/zookeeper-3.4.6/dataDir/myid&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# scp -rp zookeeper-3.4.6 root@172.16.206.29:/usr/local/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# echo &amp;quot;3&amp;quot; &amp;gt; /usr/local/zookeeper-3.4.6/dataDir/myid&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;启动和关闭zk&quot;&gt;&lt;a href=&quot;#启动和关闭zk&quot; class=&quot;headerlink&quot; title=&quot;启动和关闭zk&quot;&gt;&lt;/a&gt;启动和关闭zk&lt;/h2&gt;&lt;p&gt;在ZooKeeper集群的每个结点上，执行启动ZooKeeper服务的脚本，如下所示：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@hadoop27 ~]# /usr/local/zookeeper-3.4.6/bin/zkServer.sh start&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@hadoop28 ~]# /usr/local/zookeeper-3.4.6/bin/zkServer.sh start&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@hadoop29 ~]# /usr/local/zookeeper-3.4.6/bin/zkServer.sh start&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查看启动的进程：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/34.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;strong&gt;停止zk命令：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# /usr/local/zookeeper-3.4.6/bin/zkServer.sh stop&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;测试zk集群&quot;&gt;&lt;a href=&quot;#测试zk集群&quot; class=&quot;headerlink&quot; title=&quot;测试zk集群&quot;&gt;&lt;/a&gt;测试zk集群&lt;/h2&gt;&lt;p&gt;可以通过ZooKeeper的脚本来查看启动状态，包括集群中各个结点的角色（或是Leader，或是Follower）：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@hadoop27 ~]# /usr/local/zookeeper-3.4.6/bin/zkServer.sh status&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;JMX enabled by default&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Using config: /usr/local/zookeeper-3.4.6/bin/../conf/zoo.cfg&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Mode: follower&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@hadoop28 ~]# /usr/local/zookeeper-3.4.6/bin/zkServer.sh status&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;JMX enabled by default&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Using config: /usr/local/zookeeper-3.4.6/bin/../conf/zoo.cfg&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Mode: leader&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@hadoop29 ~]# /usr/local/zookeeper-3.4.6/bin/zkServer.sh status&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;JMX enabled by default&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Using config: /usr/local/zookeeper-3.4.6/bin/../conf/zoo.cfg&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Mode: follower&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过上面状态查询结果可见，hadoop28是集群的Leader，其余的两个结点是Follower。&lt;br&gt;&lt;br&gt;另外，可以通过客户端脚本，连接到ZooKeeper集群上。对于客户端来说，ZooKeeper是一个整体，连接到ZooKeeper集群实际上感觉在独享整个集群的服务，所以，你可以在任何一个结点上建立到服务集群的连接。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@hadoop29 ~]# /usr/local/zookeeper-3.4.6/bin/zkCli.sh -server hadoop27:2181&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Connecting to localhost:2181&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:26:57,647 [myid:] - INFO  [main:Environment@100] - Client environment:zookeeper.version=3.4.6-1569965, built on 02/20/2014 09:09 GMT&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:26:57,650 [myid:] - INFO  [main:Environment@100] - Client environment:host.name=hadoop29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:26:57,650 [myid:] - INFO  [main:Environment@100] - Client environment:java.version=1.7.0_80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:26:57,652 [myid:] - INFO  [main:Environment@100] - Client environment:java.vendor=Oracle Corporation&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:26:57,652 [myid:] - INFO  [main:Environment@100] - Client environment:java.home=/usr/java/jdk1.7.0_80/jre&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:26:57,652 [myid:] - INFO  [main:Environment@100] - Client environment:java.class.path=/usr/local/zookeeper-3.4.6/bin/../build/classes:/usr/local/zookeeper-3.4.6/bin/../build/lib/*.jar:/usr/local/zookeeper-3.4.6/bin/../lib/slf4j-log4j12-1.6.1.jar:/usr/local/zookeeper-3.4.6/bin/../lib/slf4j-api-1.6.1.jar:/usr/local/zookeeper-3.4.6/bin/../lib/netty-3.7.0.Final.jar:/usr/local/zookeeper-3.4.6/bin/../lib/log4j-1.2.16.jar:/usr/local/zookeeper-3.4.6/bin/../lib/jline-0.9.94.jar:/usr/local/zookeeper-3.4.6/bin/../zookeeper-3.4.6.jar:/usr/local/zookeeper-3.4.6/bin/../src/java/lib/*.jar:/usr/local/zookeeper-3.4.6/bin/../conf:.:/usr/java/jdk1.7.0_80/lib/dt.jar:/usr/java/jdk1.7.0_80/lib/tools.jar&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:26:57,652 [myid:] - INFO  [main:Environment@100] - Client environment:java.library.path=/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:26:57,653 [myid:] - INFO  [main:Environment@100] - Client environment:java.io.tmpdir=/tmp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:26:57,653 [myid:] - INFO  [main:Environment@100] - Client environment:java.compiler=&amp;lt;NA&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:26:57,653 [myid:] - INFO  [main:Environment@100] - Client environment:os.name=Linux&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:26:57,653 [myid:] - INFO  [main:Environment@100] - Client environment:os.arch=amd64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:26:57,653 [myid:] - INFO  [main:Environment@100] - Client environment:os.version=2.6.32-431.el6.x86_64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:26:57,653 [myid:] - INFO  [main:Environment@100] - Client environment:user.name=root&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:26:57,653 [myid:] - INFO  [main:Environment@100] - Client environment:user.home=/root&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:26:57,653 [myid:] - INFO  [main:Environment@100] - Client environment:user.dir=/root&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:26:57,654 [myid:] - INFO  [main:ZooKeeper@438] - Initiating client connection, connectString=localhost:2181 sessionTimeout=30000 watcher=org.apache.zookeeper.ZooKeeperMain$MyWatcher@279ac931&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@hadoop29 ~]# /usr/local/zookeeper-3.4.6/bin/zkCli.sh -server hadoop27:2181&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Connecting to hadoop27:2181&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:29:48,216 [myid:] - INFO  [main:Environment@100] - Client environment:zookeeper.version=3.4.6-1569965, built on 02/20/2014 09:09 GMT&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:29:48,219 [myid:] - INFO  [main:Environment@100] - Client environment:host.name=hadoop29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:29:48,219 [myid:] - INFO  [main:Environment@100] - Client environment:java.version=1.7.0_80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:29:48,221 [myid:] - INFO  [main:Environment@100] - Client environment:java.vendor=Oracle Corporation&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:29:48,221 [myid:] - INFO  [main:Environment@100] - Client environment:java.home=/usr/java/jdk1.7.0_80/jre&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:29:48,221 [myid:] - INFO  [main:Environment@100] - Client environment:java.class.path=/usr/local/zookeeper-3.4.6/bin/../build/classes:/usr/local/zookeeper-3.4.6/bin/../build/lib/*.jar:/usr/local/zookeeper-3.4.6/bin/../lib/slf4j-log4j12-1.6.1.jar:/usr/local/zookeeper-3.4.6/bin/../lib/slf4j-api-1.6.1.jar:/usr/local/zookeeper-3.4.6/bin/../lib/netty-3.7.0.Final.jar:/usr/local/zookeeper-3.4.6/bin/../lib/log4j-1.2.16.jar:/usr/local/zookeeper-3.4.6/bin/../lib/jline-0.9.94.jar:/usr/local/zookeeper-3.4.6/bin/../zookeeper-3.4.6.jar:/usr/local/zookeeper-3.4.6/bin/../src/java/lib/*.jar:/usr/local/zookeeper-3.4.6/bin/../conf:.:/usr/java/jdk1.7.0_80/lib/dt.jar:/usr/java/jdk1.7.0_80/lib/tools.jar&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:29:48,221 [myid:] - INFO  [main:Environment@100] - Client environment:java.library.path=/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:29:48,221 [myid:] - INFO  [main:Environment@100] - Client environment:java.io.tmpdir=/tmp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:29:48,221 [myid:] - INFO  [main:Environment@100] - Client environment:java.compiler=&amp;lt;NA&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:29:48,221 [myid:] - INFO  [main:Environment@100] - Client environment:os.name=Linux&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:29:48,221 [myid:] - INFO  [main:Environment@100] - Client environment:os.arch=amd64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:29:48,222 [myid:] - INFO  [main:Environment@100] - Client environment:os.version=2.6.32-431.el6.x86_64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:29:48,222 [myid:] - INFO  [main:Environment@100] - Client environment:user.name=root&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:29:48,222 [myid:] - INFO  [main:Environment@100] - Client environment:user.home=/root&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:29:48,222 [myid:] - INFO  [main:Environment@100] - Client environment:user.dir=/root&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:29:48,223 [myid:] - INFO  [main:ZooKeeper@438] - Initiating client connection, connectString=hadoop27:2181 sessionTimeout=30000 watcher=org.apache.zookeeper.ZooKeeperMain$MyWatcher@194d62f1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Welcome to ZooKeeper!&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:29:48,245 [myid:] - INFO  [main-SendThread(hadoop27:2181):ClientCnxn$SendThread@975] - Opening socket connection to server hadoop27/172.16.206.27:2181. Will not attempt to authenticate using SASL (unknown error)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2016-07-18 21:29:48,249 [myid:] - INFO  [main-SendThread(hadoop27:2181):ClientCnxn$SendThread@852] - Socket connection established to hadoop27/172.16.206.27:2181, initiating session&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;JLine support is enabled&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[zk: hadoop27:2181(CONNECTING) 0] 2016-07-18 21:29:48,356 [myid:] - INFO  [main-SendThread(hadoop27:2181):ClientCnxn$SendThread@1235] - Session establishment complete on server hadoop27/172.16.206.27:2181, sessionid = 0x155fc2e082e0000, negotiated timeout = 30000&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;WATCHER::&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;WatchedEvent state:SyncConnected type:None path:null&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[zk: hadoop27:2181(CONNECTED) 0]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;输入quit，可以退出。&lt;/p&gt;
&lt;h2 id=&quot;脚本定期清理zk快照和日志文件&quot;&gt;&lt;a href=&quot;#脚本定期清理zk快照和日志文件&quot; class=&quot;headerlink&quot; title=&quot;脚本定期清理zk快照和日志文件&quot;&gt;&lt;/a&gt;脚本定期清理zk快照和日志文件&lt;/h2&gt;&lt;p&gt;正常运行过程中，ZK会不断地把快照数据和事务日志输出到dataDir和dataLogDir这两个目录，并且如果没有人为操作的话，ZK自己是不会清理这些文件的。&lt;br&gt;&lt;br&gt;我这里采用脚本切割。将脚本上传到/usr/local/zookeeper-3.4.6/目录下。脚本内容如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#!/bin/bash&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;###Description:This script is used to clear zookeeper snapshot file and transaction logs.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;###Written by: jkzhao - jkzhao@wisedu.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;###History: 2016-04-08 First release.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Snapshot file dir.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;dataDir=/usr/local/zookeeper-3.4.6/dataDir/version-2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Transaction logs dir.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;dataLogDir=/usr/local/zookeeper-3.4.6/dataLogDir/version-2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Reserved 5 files.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;COUNT=5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ls -t $dataDir/snapshot.* | tail -n +$[$COUNT+1] | xargs rm -f&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ls -t $dataLogDir/log.* | tail -n +$[$COUNT+1] | xargs rm -f&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;赋予脚本执行权限：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# chmod +x clean_zklog.sh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;配置周期性任务，每个星期日的0点0分执行：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# crontab -e&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;0 0 * * 0 /usr/local/zookeeper-3.4.6/clean_zklog.sh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;所有zk节点都得配置脚本和周期性任务。&lt;/p&gt;
&lt;h1 id=&quot;添加Hadoop运行用户&quot;&gt;&lt;a href=&quot;#添加Hadoop运行用户&quot; class=&quot;headerlink&quot; title=&quot;添加Hadoop运行用户&quot;&gt;&lt;/a&gt;添加Hadoop运行用户&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# groupadd hadoop&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# useradd -g hadoop hadoop&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# echo &amp;quot;wisedu&amp;quot; | passwd --stdin hadoop &amp;amp;&amp;gt; /dev/null&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;所有节点都得添加hadoop用户。&lt;/p&gt;
&lt;h1 id=&quot;配置主节点登录自己和其他节点不需要输入密码&quot;&gt;&lt;a href=&quot;#配置主节点登录自己和其他节点不需要输入密码&quot; class=&quot;headerlink&quot; title=&quot;配置主节点登录自己和其他节点不需要输入密码&quot;&gt;&lt;/a&gt;配置主节点登录自己和其他节点不需要输入密码&lt;/h1&gt;&lt;p&gt;这里的主节点指的是NameNode，ResourceManager。配置hadoop16主机(Active)登录hadoop16，hadoop26，hadoop27，hadoop28，hadoop29主机免密码。还要配置hadoop26主机(Standby)登录hadoop16，hadoop26,hadoop27，hadoop28，hadoop29主机免密码。 (也可以不配置，每个节点一个一个启动服务，最好不要这样做）。&lt;br&gt;hadoop用户登录shell：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;配置hadoop16主机(Active)登录hadoop16，hadoop26，hadoop27，hadoop28，hadoop29主机免密码&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop16 ~]$ ssh-keygen -t rsa -P &amp;apos;&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop16 ~]$ ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop@hadoop16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop16 ~]$ ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop@hadoop26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop16 ~]$ ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop@hadoop27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop16 ~]$ ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop@hadoop28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop16 ~]$ ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop@hadoop29&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置hadoop26主机(Standby)登录hadoop16，hadoop26，hadoop27，hadoop28，hadoop29主机免密码&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop26 ~]$ ssh-keygen -t rsa -P &amp;apos;&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop26 ~]$ ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop@hadoop16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop26 ~]$ ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop@hadoop26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop26 ~]$ ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop@hadoop27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop26 ~]$ ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop@hadoop28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop26 ~]$ ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop@hadoop29&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;安装hadoop&quot;&gt;&lt;a href=&quot;#安装hadoop&quot; class=&quot;headerlink&quot; title=&quot;安装hadoop&quot;&gt;&lt;/a&gt;安装hadoop&lt;/h1&gt;&lt;h2 id=&quot;安装配置master节点-hadoop16主机&quot;&gt;&lt;a href=&quot;#安装配置master节点-hadoop16主机&quot; class=&quot;headerlink&quot; title=&quot;安装配置master节点(hadoop16主机)&quot;&gt;&lt;/a&gt;安装配置master节点(hadoop16主机)&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;将安装包上传至//usr/local目录下并解压&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@hadoop16 ~]# cd /usr/local/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@hadoop16 local]# tar zxf hadoop-2.7.2.tar.gz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@hadoop16 local]# ln -sv hadoop-2.7.2 hadoop&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@hadoop16 local]# cd hadoop&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@hadoop16 hadoop]# mkdir logs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@hadoop16 hadoop]# chmod g+w logs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@hadoop16 hadoop]# chown -R hadoop:hadoop ./*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@hadoop16 hadoop]# chown -R hadoop:hadoop /usr/local/hadoop-2.7.2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置hadoop环境变量&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@hadoop16 hadoop]# vim /etc/profile&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# HADOOP&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export HADOOP_HOME=/usr/local/hadoop&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export PATH=$PATH:$&amp;#123;HADOOP_HOME&amp;#125;/bin:$&amp;#123;HADOOP_HOME&amp;#125;/sbin&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改文件hadoop-env.sh和yarn-env.sh&lt;br&gt;Hadoop的各守护进程依赖于JAVA_HOME环境变量，可在这两个文件中配置特定的JAVA环境。此处仅需要修改hadoop-env.sh文件。此外，Hadoop大多数守护进程默认使用的堆大小为1GB，但现实应用中，可能需要对其各类进程的堆内存大小做出调整，这只需要编辑这两个文件中的相关环境变量值即可，例如HADOOP_HEAPSIZE、HADOOP_JOB_HISTORY_HEAPSIZE、JAVA_HEAP_SIZE和YARN_HEAP_SIZE等。&lt;br&gt;&lt;br&gt;hadoop用户登录shell，或者root用户登录，su - hadoop。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop16 ~]$ vim /usr/local/hadoop/etc/hadoop/hadoop-env.sh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/35.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;修改配置文件&lt;br&gt;hadoop用户登录shell，或者root用户登录，su - hadoop。&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop16 ~]$ cd /usr/local/hadoop/etc/hadoop/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;修改core-site.xml，&lt;/strong&gt;该文件包含了NameNode主机地址以及其监听RPC端口等信息，对于伪分布式模式的安装来说，其主机地址是localhost；对于完全分布式中master节点的主机名称或者ip地址；如果配置NameNode是HA，指定HDFS的nameservice为一个自定义名称，然后在hdfs-site.xml配置NameNode节点的主机信息。NameNode默认的RPC端口是8020。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!-- 指定hdfs的nameservice为ns1 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;name&amp;gt;fs.defaultFS&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;value&amp;gt;hdfs://ns1&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!-- 指定hadoop临时目录 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;name&amp;gt;hadoop.tmp.dir&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;value&amp;gt;/usr/local/hadoop/tmp&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!-- 指定zookeeper地址 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;name&amp;gt;ha.zookeeper.quorum&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;value&amp;gt;hadoop27:2181,hadoop28:2181,hadoop29:2181&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;修改hdfs-site.xml，&lt;/strong&gt;该文件主要用于配置HDFS相关的属性，例如复制因子（即数据块的副本数）、NN和DN用于存储数据的目录等。数据块的副本数对于伪分布式的Hadoop应该为1，完全分布式模式下默认数据副本是3份。在这个配置文件中还可以配置NN和DN用于存储的数据的目录。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!--指定hdfs的nameservice为ns1，需要和core-site.xml中的保持一致 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;name&amp;gt;dfs.nameservices&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;value&amp;gt;ns1&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!-- ns1下面有两个NameNode，分别是nn1，nn2 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;name&amp;gt;dfs.ha.namenodes.ns1&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;value&amp;gt;nn1,nn2&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!-- nn1的RPC通信地址 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;name&amp;gt;dfs.namenode.rpc-address.ns1.nn1&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;value&amp;gt;hadoop16:9000&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!-- nn1的http通信地址 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;name&amp;gt;dfs.namenode.http-address.ns1.nn1&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;value&amp;gt;hadoop16:50070&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!-- nn2的RPC通信地址 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;name&amp;gt;dfs.namenode.rpc-address.ns1.nn2&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;value&amp;gt;hadoop26:9000&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!-- nn2的http通信地址 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;name&amp;gt;dfs.namenode.http-address.ns1.nn2&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;value&amp;gt;hadoop26:50070&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!-- 指定NameNode的元数据在JournalNode上的存放位置 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;name&amp;gt;dfs.namenode.shared.edits.dir&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;value&amp;gt;qjournal://hadoop27:8485;hadoop28:8485;hadoop29:8485/ns1&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!-- 指定JournalNode在本地磁盘存放数据的位置 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;name&amp;gt;dfs.journalnode.edits.dir&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;value&amp;gt;/usr/local/hadoop/journaldata&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!-- 开启NameNode失败自动切换 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;name&amp;gt;dfs.ha.automatic-failover.enabled&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;value&amp;gt;true&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!-- 配置失败自动切换实现方式 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;name&amp;gt;dfs.client.failover.proxy.provider.ns1&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;value&amp;gt;org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!-- 配置隔离机制方法，多个机制用换行分割，即每个机制暂用一行--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;name&amp;gt;dfs.ha.fencing.methods&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        sshfence&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        shell(/bin/true)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!-- 使用sshfence隔离机制时需要ssh免登陆 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;name&amp;gt;dfs.ha.fencing.ssh.private-key-files&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;value&amp;gt;/home/hadoop/.ssh/id_rsa&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!-- 配置sshfence隔离机制超时时间 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;name&amp;gt;dfs.ha.fencing.ssh.connect-timeout&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;value&amp;gt;30000&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;如果需要其它用户对hdfs有写入权限，还需要在hdfs-site.xml添加一项属性定义。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;lt;name&amp;gt;dfs.permissions&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;lt;value&amp;gt;false&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/property&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;修改mapred-site.xml，&lt;/strong&gt;该文件用于配置集群的MapReduce framework，此处应该指定yarn，另外的可用值还有local和classic。mapred-site.xml默认是不存在，但有模块文件mapred-site.xml.template，只需要将其复制mapred-site.xml即可。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop16 hadoop]$ cp mapred-site.xml.template mapred-site.xml&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop16 hadoop]$ vim mapred-site.xml&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;!-- 指定mr框架为yarn方式 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;name&amp;gt;mapreduce.framework.name&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;value&amp;gt;yarn&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;修改yarn-site.xml，&lt;/strong&gt;该文件用于配置YARN进程及YARN的相关属性。首先需要指定ResourceManager守护进程的主机和监听的端口，对于伪分布式模型来来讲，其主机为localhost，默认的端口是8032；其次需要指定ResourceManager使用的scheduler，以及NodeManager的辅助服务。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;!-- 开启RM高可用 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &amp;lt;name&amp;gt;yarn.resourcemanager.ha.enabled&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &amp;lt;value&amp;gt;true&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;!-- 指定RM的cluster id --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &amp;lt;name&amp;gt;yarn.resourcemanager.cluster-id&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &amp;lt;value&amp;gt;yrc&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;!-- 指定RM的名字 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &amp;lt;name&amp;gt;yarn.resourcemanager.ha.rm-ids&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &amp;lt;value&amp;gt;rm1,rm2&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;!-- 分别指定RM的地址 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &amp;lt;name&amp;gt;yarn.resourcemanager.hostname.rm1&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &amp;lt;value&amp;gt;hadoop16&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &amp;lt;name&amp;gt;yarn.resourcemanager.hostname.rm2&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &amp;lt;value&amp;gt;hadoop26&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;!-- 指定zk集群地址 --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &amp;lt;name&amp;gt;yarn.resourcemanager.zk-address&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &amp;lt;value&amp;gt;hadoop27:2181,hadoop28:2181,hadoop29:2181&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &amp;lt;name&amp;gt;yarn.nodemanager.aux-services&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	   &amp;lt;value&amp;gt;mapreduce_shuffle&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;修改slaves，&lt;/strong&gt;该文件存储了当前集群的所有slave节点的列表，对于伪分布式模型，其文件内容仅应该是你localhost，这也的确是这个文件的默认值。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop16 hadoop]$ vim slaves&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hadoop27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hadoop28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hadoop29&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装配置其他节点&quot;&gt;&lt;a href=&quot;#安装配置其他节点&quot; class=&quot;headerlink&quot; title=&quot;安装配置其他节点&quot;&gt;&lt;/a&gt;安装配置其他节点&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;这里由于节点数目少，没有使用ansible等自动化工具。 &lt;br&gt;&lt;br&gt;&lt;strong&gt;重复操作解压、配置环境变量，参照前面。&lt;/strong&gt; &lt;br&gt;&lt;br&gt;Hadoop集群的各节点配置文件都是一样的，我们可以将master节点上的配置文件scp到其他节点上：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop16 ~]$ scp -p /usr/local/hadoop/etc/hadoop/* hadoop@hadoop26:/usr/local/hadoop/etc/hadoop/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop16 ~]$ scp -p /usr/local/hadoop/etc/hadoop/* hadoop@hadoop27:/usr/local/hadoop/etc/hadoop/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop16 ~]$ scp -p /usr/local/hadoop/etc/hadoop/* hadoop@hadoop28:/usr/local/hadoop/etc/hadoop/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop16 ~]$ scp -p /usr/local/hadoop/etc/hadoop/* hadoop@hadoop29:/usr/local/hadoop/etc/hadoop/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;启动hadoop&quot;&gt;&lt;a href=&quot;#启动hadoop&quot; class=&quot;headerlink&quot; title=&quot;启动hadoop&quot;&gt;&lt;/a&gt;启动hadoop&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;请严格按照下面的步骤启动。&lt;/p&gt;
&lt;h2 id=&quot;启动Zookeeper集群&quot;&gt;&lt;a href=&quot;#启动Zookeeper集群&quot; class=&quot;headerlink&quot; title=&quot;启动Zookeeper集群&quot;&gt;&lt;/a&gt;启动Zookeeper集群&lt;/h2&gt;&lt;p&gt;分别在hadoop27、hadoop28、hadoop29上启动zk，前面已经启动好了，不再重复。&lt;/p&gt;
&lt;h2 id=&quot;启动journalnode&quot;&gt;&lt;a href=&quot;#启动journalnode&quot; class=&quot;headerlink&quot; title=&quot;启动journalnode&quot;&gt;&lt;/a&gt;启动journalnode&lt;/h2&gt;&lt;p&gt;hadoop用户登录shell，分别在在hadoop27、hadoop28、hadoop29上执行：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop27 ~]$ /usr/local/hadoop/sbin/hadoop-daemon.sh start journalnode&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;运行jps命令检验，hadoop27、hadoop28、hadoop29上多了JournalNode进程。&lt;/p&gt;
&lt;h2 id=&quot;格式化HDFS&quot;&gt;&lt;a href=&quot;#格式化HDFS&quot; class=&quot;headerlink&quot; title=&quot;格式化HDFS&quot;&gt;&lt;/a&gt;格式化HDFS&lt;/h2&gt;&lt;p&gt;在HDFS的NN启动之前需要先初始化其用于存储数据的目录，可以在hdfs-site.xml配置文件中使用dfs.namenode.name.dir属性定义HDFS元数据持久存储路径，默认为${hadoop.tmp.dir}/dfs/name，这里是存放在JournalNode中；dfs.datanode.data.dir属性定义DataNode用于存储数据块的目录路径，默认为${hadoop.tmp.dir}/dfs/data。如果指定的目录不存在，格式化命令会自动创建之；如果事先存在，请确保其权限设置正确，此时格式化操作会清除其内部的所有数据并重新建立一个新的文件系统。 &lt;br&gt;&lt;br&gt;在hadoop16(Active)上执行命令:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop16 ~]$ hdfs namenode -format&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/36.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;格式化后会在根据core-site.xml中的hadoop.tmp.dir配置生成个文件，这里我配置的是/usr/local/hadoop/tmp。&lt;br&gt;&lt;br&gt;启动hadoop16主机上的NameNode：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop16 ~]$ hadoop-daemon.sh start namenode&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在hadoop26(Standby)主机上执行如下命令，同步hadoop16主机上的NameNode元数据信息：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop26 ~]$ hdfs namenode –bootstrapStandby&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;同步完成后，停止hadoop16主机上的NameNode：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop16 ~]$ hadoop-daemon.sh stop namenode&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里如果不启动Active的NameNode，就在Standby主机上同步，会报如下的错误：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/37.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;这是因为没有启动active namenode，因为standby namenode是通过active namenode的9000端口通讯的。若active namenode没有启动，则9000没有程序监听提供服务。 &lt;br&gt;&lt;br&gt;当然也可以不启动Active NameNode就进行同步元数据信息，就是直接用命令拷贝Active主机上的元数据信息目录到Standby主机上，但是不建议这么做：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop16 hadoop]$ scp -r tmp/ hadoop@hadoop26:/usr/local/hadoop&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;格式化ZKFC-仅在hadoop16上执行即可&quot;&gt;&lt;a href=&quot;#格式化ZKFC-仅在hadoop16上执行即可&quot; class=&quot;headerlink&quot; title=&quot;格式化ZKFC(仅在hadoop16上执行即可)&quot;&gt;&lt;/a&gt;格式化ZKFC(仅在hadoop16上执行即可)&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop16 ~]$ hdfs zkfc -formatZK&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/38.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;启动HDFS-在hadoop16上执行&quot;&gt;&lt;a href=&quot;#启动HDFS-在hadoop16上执行&quot; class=&quot;headerlink&quot; title=&quot;启动HDFS(在hadoop16上执行)&quot;&gt;&lt;/a&gt;启动HDFS(在hadoop16上执行)&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop16 ~]$ /usr/local/hadoop/sbin/start-dfs.sh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/39.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;可以在各主机执行jps，查看启动的进程：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/40.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/41.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/42.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;启动YARN&quot;&gt;&lt;a href=&quot;#启动YARN&quot; class=&quot;headerlink&quot; title=&quot;启动YARN&quot;&gt;&lt;/a&gt;启动YARN&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;还是在hadoop16上执行start-yarn.sh，这是因为没有把namenode和resourcemanager分开，生产环境需要把他们分开，他们分开了就要分别在不同的机器上启动。&lt;br&gt;&lt;br&gt;&lt;strong&gt;启动yarn(在hadoop16上)：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop16 ~]$ /usr/local/hadoop/sbin/start-yarn.sh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/43.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;strong&gt;启动yarn standby(在hadoop26上)：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop26 ~]$  /usr/local/hadoop/sbin/yarn-daemon.sh start resourcemanager&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以在各节点执行jps，查看启动的进程：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/44.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/45.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/46.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;停止hadoop&quot;&gt;&lt;a href=&quot;#停止hadoop&quot; class=&quot;headerlink&quot; title=&quot;停止hadoop&quot;&gt;&lt;/a&gt;停止hadoop&lt;/h1&gt;&lt;p&gt;停止HDFS集群：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop16 ~]$ stop-dfs.sh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;停止YARN集群：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop16 ~]$ stop-yarn.sh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;停止ResourceManager(Standby)：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@hadoop26 ~]$ yarn-daemon.sh stop resourcemanager&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;关于Apache Hadoop的介绍以本地模式、伪分布式安装部署请参见上篇博文，本篇博文主要记录完全分布式部署，并实现NameNode高可用和ResourceManager高可用。&lt;/p&gt;
&lt;h1 id=&quot;环境规划&quot;&gt;&lt;a href=&quot;#环境规划&quot; class=&quot;headerlink&quot; title=&quot;环境规划&quot;&gt;&lt;/a&gt;环境规划&lt;/h1&gt;
    
    </summary>
    
    
      <category term="大数据，Hadoop" scheme="http://yoursite.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%EF%BC%8CHadoop/"/>
    
  </entry>
  
  <entry>
    <title>安装部署Apache Hadoop (本地模式和伪分布式)</title>
    <link href="http://yoursite.com/2016/08/04/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2Apache%20Hadoop%20(%E6%9C%AC%E5%9C%B0%E6%A8%A1%E5%BC%8F%E5%92%8C%E4%BC%AA%E5%88%86%E5%B8%83%E5%BC%8F)/"/>
    <id>http://yoursite.com/2016/08/04/安装部署Apache Hadoop (本地模式和伪分布式)/</id>
    <published>2016-08-04T00:48:36.000Z</published>
    <updated>2016-08-04T08:44:32.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Hadoop版本&quot;&gt;&lt;a href=&quot;#Hadoop版本&quot; class=&quot;headerlink&quot; title=&quot;Hadoop版本&quot;&gt;&lt;/a&gt;Hadoop版本&lt;/h1&gt;&lt;h2 id=&quot;Hadoop版本种类&quot;&gt;&lt;a href=&quot;#Hadoop版本种类&quot; class=&quot;headerlink&quot; title=&quot;Hadoop版本种类&quot;&gt;&lt;/a&gt;Hadoop版本种类&lt;/h2&gt;&lt;p&gt;目前Hadoop发行版非常多，有华为发行版、Intel发行版、Cloudera发行版（CDH）等，所有这些发行版均是基于Apache Hadoop衍生出来的，之所以有这么多的版本，完全是由&lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apache Hadoop的开源协议&lt;/a&gt;决定的：任何人可以对其进行修改，并作为开源或商业产品发布/销售。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;国内绝大多数公司发行版是收费的，比如Intel发行版、华为发行版等，尽管这些发行版增加了很多开源版本没有的新feature，但绝大多数公司选择Hadoop版本时会将把是否收费作为重要指标，不收费的Hadoop版本主要有三个（均是国外厂商），分别是：Cloudera版本(Cloudera’s Distribution Including Apache Hadoop，简称“CDH”)、Apache基金会hadoop、Hortonworks版本(Hortonworks Data Platform，简称“HDP”)。按顺序代表了，在国内的使用率，CDH和HDP虽然是收费版本，但是他们是开源的，只是收取服务费用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Apache社区版本：&lt;/strong&gt;&lt;br&gt;完全开源，免费，非商业。apache社区的hadoop版本分枝较多，而且部分hadoop存在bug。在选择hadoop，hbase，hive等时，需要考虑兼容性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cloudera版本：&lt;/strong&gt;&lt;br&gt;开源，免费，有商业和非商业版本。是在apache社区版本的hadoop基础上，选择相对稳定版本的hadoop，并在此基础上，进行bug修改和维护。使用者不必考虑hadoop，hbase，hive等在使用过程中，版本兼容性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hortonworks版本：&lt;/strong&gt;&lt;br&gt;开源，免费，有商业和非商业版本。是在Apache基础上修改，具有apache的特色。&lt;/p&gt;
&lt;h2 id=&quot;Apache-Hadoop版本衍化&quot;&gt;&lt;a href=&quot;#Apache-Hadoop版本衍化&quot; class=&quot;headerlink&quot; title=&quot;Apache Hadoop版本衍化&quot;&gt;&lt;/a&gt;Apache Hadoop版本衍化&lt;/h2&gt;&lt;p&gt;Apache Hadoop版本分为两代，我们将第一代Hadoop称为Hadoop 1.0，第二代Hadoop称为Hadoop 2.0。第一代Hadoop包含三个大版本，分别是0.20.x，0.21.x和0.22.x，其中，0.20.x最后演化成1.0.x，变成了稳定版，而0.21.x和0.22.x则NameNode HA等新的重大特性。第二代Hadoop包含两个版本，分别是0.23.x和2.x，它们完全不同于Hadoop 1.0，是一套全新的架构，均包含HDFS Federation和YARN两个系统，相比于0.23.x，2.x增加了NameNode HA和Wire-compatibility两个重大特性。经过上面的大体解释，大家可能明白了Hadoop以重大特性区分各个版本的，总结起来，用于区分Hadoop版本的特性有以下几个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Append 支持文件追加功能，如果想使用HBase，需要这个特性。&lt;/li&gt;
&lt;li&gt;RAID 在保证数据可靠的前提下，通过引入校验码较少数据块数目.&lt;/li&gt;
&lt;li&gt;Symlink支持HDFS文件链接&lt;/li&gt;
&lt;li&gt;Security Hadoop安全。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要注意的是，Hadoop 2.0主要由Yahoo独立出来的hortonworks公司主持开发。&lt;/p&gt;
&lt;p&gt;2013年10月，Hadoop 2.0发布。关键特性包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;YARN&lt;br&gt;YARN是“Yet Another Resource Negotiator”的简称，它是Hadoop 2.0引入的一个全新的通用资源管理系统，可在其之上运行各种应用程序和框架，比如MapReduce、Tez、Storm等，它的引入使得各种应用运行在一个集群中成为可能。YARN是在MRv1基础上衍化而来的，是MapReduce发展到一定程度的必然产物，它的出现使得Hadoop计算类应用进入平台化时代，博客中包含大量介绍YARN的文章，有兴趣的读者可阅读：&lt;a href=&quot;http://dongxicheng.org/category/mapreduce-nextgen/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://dongxicheng.org/category/mapreduce-nextgen/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HDFS单点故障得以解决&lt;br&gt;Hadoop 2.2.0同时解决了NameNode单点故障问题和内存受限问题，其中，单点故障是通过主备NameNode切换实现的，这是一种古老的解决服务单点故障的方案，主备NameNode之间通过一个共享存储同步元数据信息，因此共享存储系统的选择称为关键，而Hadoop则提供了NFS、QJM和Bookeeper三种可选的共享存储系统，具体可阅读我的这篇文章：Hadoop 2.0单点故障问题方案总结。&lt;/li&gt;
&lt;li&gt;HDFS Federation&lt;br&gt;前面提到HDFS 的NameNode存在内存受限问题，该问题也在2.2.0版本中得到了解决。这是通过HDFS Federation实现的，它允许一个HDFS集群中存在多个NameNode，每个NameNode分管一部分目录，而不同NameNode之间彼此独立，共享所有DataNode的存储资源，注意，NameNode Federation中的每个NameNode仍存在单点问题，需为每个NameNode提供一个backup以解决单点故障问题。&lt;/li&gt;
&lt;li&gt;HDFS快照&lt;br&gt;HDFS快照是指HDFS文件系统（或者子系统）在某一时刻的只读镜像，它的出现使得管理员可定时为重要文件或目录做快照，以防止数据误删、丢失等。具体可阅读：Snapshots for HDFS（使用说明），Support for RW/RO snapshots in HDFS。&lt;br&gt;通过NFSv3访问HDFS&lt;br&gt;NFS允许用户像访问本地文件系统一样访问远程文件系统，而将NFS引入HDFS后，用户可像读写本地文件一样读写HDFS上的文件，大大简化了HDFS使用，这是通过引入一个NFS gateway服务实现的，该服务能将NFS协议转换为HDFS访问协议，具体如下图所示。有兴趣的读者可阅读：Support NFSv3 interface to HDFS，以及相关设计文档：HDFS NFS Gateway。&lt;/li&gt;
&lt;li&gt;支持Windows操作系统&lt;br&gt;在2.2.0版本之前，Hadoop仅支持Linux操作系统，而Windows仅作为实验平台使用。从2.2.0开始，Hadoop开始支持Windows操作系统，具体可阅读我之前写的一篇文章：Hadoop For Windows。&lt;/li&gt;
&lt;li&gt;兼容1.x上运行的MapReduce应用程序与Hadoop生态系统其他系统进行了充分的集成测试&lt;br&gt;除了HDFS、MapReduce和YARN这三个核心系统外，Hadoop生态系统还包括Hbase、Hive、Pig等系统，这些系统底层依赖于Hadoop内核，而相比于Hadoop 1.0，Hadoop 2.0的最大变化出现在内核（HDFS、MapReduce和YARN），但与生态系统中其他系统进行集成测试是必需的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;除了以上特性外，Apache官方还给出了两个特殊说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HDFS变化：HDFS的symlinks（类似于Linux中的软连接）被将移到了2.3.0版本中&lt;/li&gt;
&lt;li&gt;YARN/MapReduce注意事项：管理员在NodeManager上设置ShuffleHandler service时，要采用“mapreduce_shuffle”，而非之前的“mapreduce.shuffle”作为属性值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;新版本不仅增强了核心平台的大量功能，同时还修复了大量bug。新版本对HDFS做了两个非常重要的增强：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;支持异构的存储层次；&lt;/li&gt;
&lt;li&gt;通过数据节点为存储在HDFS中的数据提供了内存缓存功能。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;借助于HDFS对异构存储层次的支持，我们将能够在同一个Hadoop集群上使用不同的存储类型。此外我们还可以使用不同的存储媒介——例如商业磁盘、企业级磁盘、SSD或者内存等——更好地权衡成本和收益。如果你想更详细地了解与该增强相关的信息，那么可以访问这里。类似地，在新版本中我们还能使用Hadoop集群中的可用内存集中地缓存并管理数据节点内存中的数据集。MapReduce、Hive、Pig等类似的应用程序将能够申请内存进行缓存，然后直接从数据节点的地址空间中读取内容，通过完全避免磁盘操作极大地提高扫描效率。Hive现在正在为ORC文件实现一个非常有效的零复制读取路径，该功能就使用了这项新技术。&lt;br&gt;在YARN方面，令我们非常兴奋的事情是资源管理器自动故障转移功能已经进入尾声，虽然在2.3.0这个版本中该功能还没有被发布，但是极有可能会包含在Hadoop-2.4中。此外，2.3.0版本还对YARN做了一些关键的运维方面的增强，例如更好的日志、错误处理和诊断等。&lt;br&gt;MapReduce的一个关键增强MAPREDUCE-4421。借助于该功能我们已经不再需要在每一台机器上安装MapReduce二进制程序，仅仅需要通过YARN分布式缓存将一个MapReduce包复制到HDFS中就可以了。当然，新版本还包含大量的bug修复以及其他方面的增强。例如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;YarnClientImpl类中的异步轮询操作引入了超时；&lt;/li&gt;
&lt;li&gt;修复了RMFatalEventDispatcher没有记录事件原因的问题；&lt;/li&gt;
&lt;li&gt;HA配置不会影响节点管理器的RPC地址；&lt;/li&gt;
&lt;li&gt;RM Web UI和REST API统一使用YarnApplicationState；&lt;/li&gt;
&lt;li&gt;在RpcResponseHeader中包含RPC错误信息，而不是将其分开发送；&lt;/li&gt;
&lt;li&gt;向jetty/httpserver中添加了请求日志；&lt;/li&gt;
&lt;li&gt;修复了将dfs.checksum.type定义为NULL之后写文件和hflush会抛出java.lang.ArrayIndexOutOfBoundsException的问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2014年4月，Hadoop 2.4.0发布。关键特性包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HDFS支持访问控制列表（ACLs,Access Control Lists）；&lt;/li&gt;
&lt;li&gt;原生支持HDFS滚动升级；&lt;/li&gt;
&lt;li&gt;HDFS FSImage用到了 protocol-buffers，从而可以平滑地升级；&lt;/li&gt;
&lt;li&gt;HDFS完全支持HTTPS；&lt;/li&gt;
&lt;li&gt;YARN ResourceManager支持自动故障转移，解决了YARN ResourceManager的单点故障；&lt;/li&gt;
&lt;li&gt;对YARN的Application History Server和 pplication Timeline Server上的新应用加强了支持；&lt;/li&gt;
&lt;li&gt;通过抢占使得YARN Capacity Scheduler支持强SLAs协议；&lt;br&gt;安全对于Hadoop来说至关重要，所以在Hadoop 2.4.0版本中对HDFS的所有访问（包括WebHDFS, HsFTP甚至是web-interfaces）都支持了HTTPS。在Hadoop 2.4.0解决了ResourceManager的单点故障。这样会在集群中存在两个ResourceManager，其中一个处于Active；另一个处于　　standby。当Active的出现故障，这样Hadoop可以自动平滑地切换到另外一个ResourceManager，这个新的ResourceManager将会自动的重启那些提交的applications。在下一阶段，Hadoop将会增加一个热standby（add a hot standby），这个standby可以继续从故障点运行的应用程序，以保存任何已经完成的工作。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2014年8月，Hadoop 2.5.0发布。关键特性包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Common&lt;ul&gt;
&lt;li&gt;使用HTTP代理服务器时认证改进。当通过代理服务器使用WebHDFS时这是非常有用的。&lt;/li&gt;
&lt;li&gt;增加了一个新的Hadoop指标监控sink，允许直接写到Graphite。&lt;/li&gt;
&lt;li&gt;Hadoop文件系统兼容相关的规范工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HDFS&lt;ul&gt;
&lt;li&gt;支持 POSIX风格的扩展文件系统。更多细节查看Extended Attributes in HDFS文档。&lt;/li&gt;
&lt;li&gt;支持离线image浏览，客户端现在可以通过WebHDFS的API浏览一个fsimage。&lt;/li&gt;
&lt;li&gt;NFS网关得到大量可支持性的改进和bug修复。Hadoop portmapper不在需要运行网关，网关现在可以拒绝没有权限的端口的连接。&lt;/li&gt;
&lt;li&gt;SecondaryNameNode, JournalNode, and DataNode 的web UI已经使用HTML5和JS美化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;YARN&lt;ul&gt;
&lt;li&gt;YARN的REST API现在支持写/修改操作。用户可以用REST API提交和杀死应用程序。&lt;/li&gt;
&lt;li&gt;时间线存储到YARN，用来存储一个应用通用的和特殊的信息，支持Kerberos认证。&lt;/li&gt;
&lt;li&gt;公平调度器支持动态分层用户队列，运行时，用户队列在任一指定的父队列中被动态的创建。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2014年11月，Hadoop 2.6.0发布。关键特性包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Common&lt;br&gt;Hadoop Key Management Server（KMS）是一个基于HadoopKeyProvider API编写的密钥管理服务器。他提供了一个client和一个server组件，client和server之间基于HTTP协议使用REST API通信。Client是一个KeyProvider的实现，使用KMS HTTP REST API与KMS交互。KMS和它的client有内置的安全机制，支持HTTP SPNEGO Kerberos认证和HTTPS安全传输。KMS是一个Java Web应用程序，运行在与Hadoop发行版绑定在一起的预先配置好的Tomcat服务器上。&lt;/li&gt;
&lt;li&gt;Tracing&lt;br&gt;HDFS-5274增加了追踪通过HDFS的请求的功能，此功能使用了开源的库，HTrace。大家可以看一下HTrace，功能很强大，Cloudera开源出来的。&lt;/li&gt;
&lt;li&gt;HDFS&lt;ul&gt;
&lt;li&gt;Transparent Encryption，HDFS实现了一个透明的，端到端的加密方式。一旦配置了加密，从HDFS读出数据解密和写入数据加密的过程对用户应用程序代码带来说都是透明的。加密过程是端到端的，这意味着数据只能在客户端被加密解密。HDFS从来不存储，也不访问未加密的数据和数据加密密钥。这样满足了加密过程的两个典型的需求：at-rest encryption（静态加密，也就是说，数据持久化在像硬盘这样的媒介上），in-transit encryption（在途加密，例如，当数据在网络中传输的时候）。&lt;/li&gt;
&lt;li&gt;Storage SSD &amp;amp;&amp;amp; Memory。ArchivalStorage（档案存储器）是将计算能力与不断增长的存储能力分离。拥有高密度低成本的存储但是计算能力较低的节点将变得可用，可以在集群中做冷存储。增加更多的节点作为冷存储可以提高集群的存储能力，跟集群的计算能力无关。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MapReduce&lt;br&gt;这一部分主要是一些bug的修复和改进。增加了两个新的新特，在2.5.2里已经有所描述了。这里在简单看一下。&lt;ul&gt;
&lt;li&gt;ResourceManger Restart&lt;/li&gt;
&lt;li&gt;允许AM发送历史事件信息到timeline server。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;YARN&lt;ul&gt;
&lt;li&gt;NodeManager Restart：这个特性可以使NodeManager在不丢失运行在节点中的活动的container的情况下重新启动。&lt;/li&gt;
&lt;li&gt;Docker Container Executor：DockerContainer Executor（DCE）允许YARN NodeManager在Docker container中启动YARN container。用户可以指定他们想用来运行YARN container的Docker的镜像。这些container提供了一个可以自定义的软件环境，用户的代码可以运行在其中，与NodeManager运行的环境隔离。这些运行用户代码的container可以包含应用程序需要的特定的库，它们可以拥有与NodeManager不同版本的Perl，Python甚至是Java。事实上，这些container可以运行与NodeManager所在的OS不同版本的Linux。尽管YARN container必须定义运行Job所需的所有的环境和库，但是NodeManager中的所有的东西都不会共享。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Docer为YARN提供了一致和隔离两种模式，一致模式下，所有的YARN container将拥有相同的软件环境，在隔离模式下，不管物理机器安装了什么都不干扰。&lt;/p&gt;
&lt;p&gt;2015年7月，Hadoop 2.7.0发布。关键特性包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Common&lt;br&gt;支持Windows Azure Storage，BLOB作为Hadoop中的文件系统。&lt;br&gt;Hadoop HDFS&lt;ul&gt;
&lt;li&gt;支持文件截断（file truncate）；&lt;/li&gt;
&lt;li&gt;支持每个存储类型配额(Support for quotas per storage type);&lt;/li&gt;
&lt;li&gt;支持可变长度的块文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;YARN —— YARN安全模块可插拔&lt;ul&gt;
&lt;li&gt;YARN的本地化资源可以自动共享，全局缓存（测试版）&lt;br&gt;Hadoop MapReduce&lt;/li&gt;
&lt;li&gt;能够限制运行的Map/Reduce作业的任务&lt;/li&gt;
&lt;li&gt;为非常的大Job（有许多输出文件）加快了FileOutputCommitter。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HDFS&lt;ul&gt;
&lt;li&gt;支持文件截断（file truncate）；&lt;/li&gt;
&lt;li&gt;支持每个存储类型配额(Support for quotas per storage type);&lt;/li&gt;
&lt;li&gt;支持可变长度的块文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MAPREDUCE&lt;ul&gt;
&lt;li&gt;能够限制运行的Map/Reduce作业的任务&lt;/li&gt;
&lt;li&gt;为非常的大Job（有许多输出文件）加快了FileOutputCommitter。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2015年7月，Hadoop 2.7.1发布。关键特性包括：&lt;br&gt;本版本属于稳定版本，是自Hadoop 2.6.0以来又一个稳定版，同时也是Hadoop 2.7.x版本线的第一个稳定版本，也是 2.7版本线的维护版本，变化不大，主要是修复了一些比较严重的Bug（其中修复了131个Bugs和patches）&lt;/p&gt;
&lt;h1 id=&quot;安装部署Hadoop&quot;&gt;&lt;a href=&quot;#安装部署Hadoop&quot; class=&quot;headerlink&quot; title=&quot;安装部署Hadoop&quot;&gt;&lt;/a&gt;安装部署Hadoop&lt;/h1&gt;&lt;p&gt;Hadoop 有两个主要版本，Hadoop 1.x.y 和 Hadoop 2.x.y 系列，比较老的教材上用的可能是 0.20 这样的版本。Hadoop 2.x 版本在不断更新。&lt;br&gt;&lt;br&gt;Hadoop安装部署模式有3种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Local (Standalone) Mode  本地模式&lt;/li&gt;
&lt;li&gt;Pseudo-Distributed Mode  伪分布式模式&lt;/li&gt;
&lt;li&gt;Fully-Distributed Mode  完全分布式模式(即为多节点安装Hadoop)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安装部署本地模式Hadoop&quot;&gt;&lt;a href=&quot;#安装部署本地模式Hadoop&quot; class=&quot;headerlink&quot; title=&quot;安装部署本地模式Hadoop&quot;&gt;&lt;/a&gt;安装部署本地模式Hadoop&lt;/h2&gt;&lt;p&gt;本次实验使用的版本是hadoop-2.7.2，实验环境如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;主机名&lt;/th&gt;
&lt;th&gt;IP地址&lt;/th&gt;
&lt;th&gt;操作系统版本&lt;/th&gt;
&lt;th&gt;安装软件&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;node3&lt;/td&gt;
&lt;td&gt;172.16.7.153&lt;/td&gt;
&lt;td&gt;CentOS 7.1&lt;/td&gt;
&lt;td&gt;hadoop-2.7.2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;安装JDK1-7&quot;&gt;&lt;a href=&quot;#安装JDK1-7&quot; class=&quot;headerlink&quot; title=&quot;安装JDK1.7&quot;&gt;&lt;/a&gt;安装JDK1.7&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Hadoop Java Versions&lt;/strong&gt; &lt;br&gt;&lt;br&gt;Version 2.7 and later of Apache Hadoop requires Java 7. It is built and tested on both OpenJDK and Oracle (HotSpot)’s JDK/JRE. &lt;br&gt;&lt;br&gt;Earlier versions (2.6 and earlier) support Java 6.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@node3 ~]# mkdir /usr/java&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@node3 ~]# tar zxf /usr/local/jdk-7u80-linux-x64.gz -C /usr/java/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@node3 ~]# vim /etc/profile&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export JAVA_HOME=/usr/java/jdk1.7.0_80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export PATH=$JAVA_HOME/bin:$PATH&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@node3 ~]# source /etc/profile&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装依赖包ssh和rsync&quot;&gt;&lt;a href=&quot;#安装依赖包ssh和rsync&quot; class=&quot;headerlink&quot; title=&quot;安装依赖包ssh和rsync&quot;&gt;&lt;/a&gt;安装依赖包ssh和rsync&lt;/h3&gt;&lt;p&gt;对于Redhat/CentOS系列的，安装系统时一般都会默认安装openssh软件，里面包含了ssh客户端和ssh服务端，所以先检查下这个软件包是否安装了：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# yum list all openssh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果没有安装，安装：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# yum install -y openssh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在检查rsync软件包是否安装：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# yum list all rsync&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;添加Hadoop运行用户&quot;&gt;&lt;a href=&quot;#添加Hadoop运行用户&quot; class=&quot;headerlink&quot; title=&quot;添加Hadoop运行用户&quot;&gt;&lt;/a&gt;添加Hadoop运行用户&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# groupadd -g 1000 hadoop&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# useradd -g 1000 -u 1000 hadoop&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# echo &amp;quot;wisedu&amp;quot; | passwd --stdin hadoop &amp;amp;&amp;gt; /dev/null&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;配置主节点登录自己和其他节点不需要输入密码&quot;&gt;&lt;a href=&quot;#配置主节点登录自己和其他节点不需要输入密码&quot; class=&quot;headerlink&quot; title=&quot;配置主节点登录自己和其他节点不需要输入密码&quot;&gt;&lt;/a&gt;配置主节点登录自己和其他节点不需要输入密码&lt;/h3&gt;&lt;p&gt;hadoop用户登录主机，配置其ssh连接localhost不需要输入密码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ ssh-keygen -t rsa -P &amp;apos;&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop@localhost&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;此时再用 ssh localhost，无需输入密码就可以直接登陆了，如下图所示：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ ssh localhost&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;解压hadoop&quot;&gt;&lt;a href=&quot;#解压hadoop&quot; class=&quot;headerlink&quot; title=&quot;解压hadoop&quot;&gt;&lt;/a&gt;解压hadoop&lt;/h3&gt;&lt;p&gt;root用户登录shell：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@node3 ~]# cd /usr/local/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@node3 local]# tar zxf hadoop-2.7.2.tar.gz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@node3 local]# ln -sv hadoop-2.7.2 hadoop&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;‘hadoop’ -&amp;gt; ‘hadoop-2.7.2’&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;配置hadoop环境变量&quot;&gt;&lt;a href=&quot;#配置hadoop环境变量&quot; class=&quot;headerlink&quot; title=&quot;配置hadoop环境变量&quot;&gt;&lt;/a&gt;配置hadoop环境变量&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@node3 ~]# vim /etc/profile&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Hadoop&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;HADOOP_HOME=/usr/local/hadoop&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PATH=$HADOOP_HOME/bin:$PATH&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export HADOOP_HOME PATH&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@node3 ~]# source /etc/profile&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@node3 ~]# hadoop version&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/4.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;修改/usr/local/hadoop的属主和属组为hadoop：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@node3 local]# chown -R hadoop.hadoop /usr/local/hadoop/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;配置本地模式并测试&quot;&gt;&lt;a href=&quot;#配置本地模式并测试&quot; class=&quot;headerlink&quot; title=&quot;配置本地模式并测试&quot;&gt;&lt;/a&gt;配置本地模式并测试&lt;/h3&gt;&lt;p&gt;Hadoop 默认模式为非分布式模式，无需进行其他配置即可运行。非分布式即单 Java 进程，方便进行调试。不使用集群文件系统的，只是个调试查看模式，不会启动什么DataNode这类的进程。&lt;br&gt;&lt;br&gt;可以执行例子来感受下 Hadoop 的运行。Hadoop 附带了丰富的例子（运行 ./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-2.6.0.jar 可以看到所有例子），包括 wordcount、terasort、join、grep 等。&lt;br&gt;&lt;br&gt;在此选择运行 grep 例子，我们将 input 文件夹中的所有文件作为输入，筛选当中符合正则表达式 dfs[a-z.]+ 的单词并统计出现的次数，最后输出结果到 output 文件夹中。&lt;/p&gt;
&lt;p&gt;hadoop用户登录shell：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 ~]$ cd /usr/local/hadoop&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 hadoop]$ mkdir input&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 hadoop]$ cp etc/hadoop/*.xml input     # 将配置文件作为输入文件&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/5.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 hadoop]$ cat output/*    # 查看运行结果&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;执行成功后如下所示，输出了作业的相关信息，输出的结果是符合正则的单词 dfsadmin 出现了1次：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/6.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;strong&gt;注意:&lt;/strong&gt;Hadoop 默认不会覆盖结果文件，因此再次运行上面实例会提示出错，需要先将 ./output 删除。&lt;/p&gt;
&lt;h2 id=&quot;安装部署伪分布式Hadoop&quot;&gt;&lt;a href=&quot;#安装部署伪分布式Hadoop&quot; class=&quot;headerlink&quot; title=&quot;安装部署伪分布式Hadoop&quot;&gt;&lt;/a&gt;安装部署伪分布式Hadoop&lt;/h2&gt;&lt;p&gt;Hadoop 可以在单节点上以伪分布式的方式运行，Hadoop 进程以分离的 Java 进程来运行，节点既作为 NameNode 也作为 DataNode，同时，读取的是 HDFS 中的文件。&lt;/p&gt;
&lt;h3 id=&quot;Hadoop配置文件说明&quot;&gt;&lt;a href=&quot;#Hadoop配置文件说明&quot; class=&quot;headerlink&quot; title=&quot;Hadoop配置文件说明&quot;&gt;&lt;/a&gt;Hadoop配置文件说明&lt;/h3&gt;&lt;p&gt;Hadoop 的配置文件位于 /usr/local/hadoop/etc/hadoop/ 中，伪分布式需要修改2个配置文件 core-site.xml 和 hdfs-site.xml 。Hadoop的配置文件是 xml 格式，每个配置以声明 property 的 name 和 value 的方式来实现。&lt;br&gt;&lt;br&gt;Hadoop 的运行方式是由配置文件决定的（运行 Hadoop 时会读取配置文件），因此如果需要从伪分布式模式切换回非分布式模式，需要删除 core-site.xml 中的配置项。&lt;br&gt;&lt;br&gt;此外，伪分布式虽然只需要配置 fs.defaultFS 和 dfs.replication 就可以运行（官方教程如此），不过若没有配置 hadoop.tmp.dir 参数，则默认使用的临时目录为 /tmp/hadoo-hadoop，而这个目录在重启时有可能被系统清理掉，导致必须重新执行 format 才行。所以我们进行了设置，同时也指定 dfs.namenode.name.dir 和 dfs.datanode.data.dir，否则在接下来的步骤中可能会出错。&lt;/p&gt;
&lt;h3 id=&quot;修改配置文件-core-site-xml，配置Hadoop的核心属性&quot;&gt;&lt;a href=&quot;#修改配置文件-core-site-xml，配置Hadoop的核心属性&quot; class=&quot;headerlink&quot; title=&quot;修改配置文件 core-site.xml，配置Hadoop的核心属性&quot;&gt;&lt;/a&gt;修改配置文件 core-site.xml，配置Hadoop的核心属性&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 hadoop]$ vim etc/hadoop/core-site.xml&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &amp;lt;name&amp;gt;hadoop.tmp.dir&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &amp;lt;value&amp;gt;file:/usr/local/hadoop/tmp&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &amp;lt;description&amp;gt;Abase for other temporary directories.&amp;lt;/description&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &amp;lt;name&amp;gt;fs.defaultFS&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &amp;lt;value&amp;gt;hdfs://localhost:9000&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;修改配置文件-hdfs-site-xml，定义hdfs的属性&quot;&gt;&lt;a href=&quot;#修改配置文件-hdfs-site-xml，定义hdfs的属性&quot; class=&quot;headerlink&quot; title=&quot;修改配置文件 hdfs-site.xml，定义hdfs的属性&quot;&gt;&lt;/a&gt;修改配置文件 hdfs-site.xml，定义hdfs的属性&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 hadoop]$ vim etc/hadoop/hdfs-site.xml&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &amp;lt;name&amp;gt;dfs.replication&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &amp;lt;value&amp;gt;1&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &amp;lt;name&amp;gt;dfs.namenode.name.dir&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &amp;lt;value&amp;gt;file:/usr/local/hadoop/tmp/dfs/name&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &amp;lt;name&amp;gt;dfs.datanode.data.dir&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &amp;lt;value&amp;gt;file:/usr/local/hadoop/tmp/dfs/data&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt;如果需要其它用户对hdfs有写入权限，还需要在hdfs-site.xml添加一项属性定义。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;lt;name&amp;gt;dfs.permissions&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;lt;value&amp;gt;false&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/property&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;HDFS进程有许多属性可以定义其工作路径，如dfs.namenode.name.dir属性定义的HDFS元数据持久存储路径，默认为${hadoop.tmp.dir}/dfs/name。&lt;br&gt;&lt;br&gt;dfs.datanode.data.dir属性定义DataNode用于存储数据块的目录路径，默认为${hadoop.tmp.dir}/dfs/data。&lt;br&gt;&lt;br&gt;fs.checkpoint.dir属性定义的SecondaryNameNode用于存储检查点文件的目录，默认为${hadoop.tmp.dir}/dfs/namesecondary。&lt;br&gt;&lt;br&gt;为了数据可用性及冗余的目的，HDFS会在多个节点上保存同一个数据块的多个副本，其默认为3个。而只有一个节点的伪分布式环境中其仅用保存一个副本，这可以通过dfs.replication属性进行定义。&lt;/p&gt;
&lt;h3 id=&quot;配置完成后，执行-NameNode-的格式化&quot;&gt;&lt;a href=&quot;#配置完成后，执行-NameNode-的格式化&quot; class=&quot;headerlink&quot; title=&quot;配置完成后，执行 NameNode 的格式化&quot;&gt;&lt;/a&gt;配置完成后，执行 NameNode 的格式化&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 hadoop]$ bin/hdfs namenode -format&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;成功的话，会看到 “successfully formatted” 和 “Exitting with status 0” 的提示，若为 “Exitting with status 1” 则是出错。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/9.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;开启-NameNode-和-DataNode-守护进程&quot;&gt;&lt;a href=&quot;#开启-NameNode-和-DataNode-守护进程&quot; class=&quot;headerlink&quot; title=&quot;开启 NameNode 和 DataNode 守护进程&quot;&gt;&lt;/a&gt;开启 NameNode 和 DataNode 守护进程&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 hadoop]$ sbin/start-dfs.sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Error: JAVA_HOME is not set and could not be found.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/10.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;解决：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 hadoop]$ vim etc/hadoop/hadoop-env.sh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/11.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/12.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;再次启动：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 hadoop]$ sbin/start-dfs.sh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/13.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;启动完成后，可以通过命令 jps 来判断是否成功启动，若成功启动则会列出如下进程: “NameNode”、”DataNode” 和 “SecondaryNameNode”（如果 SecondaryNameNode 没有启动，请运行 sbin/stop-dfs.sh 关闭进程，然后再次尝试启动尝试）。如果没有 NameNode 或 DataNode ，那就是配置不成功，请仔细检查之前步骤，或通过查看启动日志排查原因。The hadoop daemon log output is written to the $HADOOP_LOG_DIR directory (defaults to $HADOOP_HOME/logs)。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/14.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;查看NameNode-信息&quot;&gt;&lt;a href=&quot;#查看NameNode-信息&quot; class=&quot;headerlink&quot; title=&quot;查看NameNode 信息&quot;&gt;&lt;/a&gt;查看NameNode 信息&lt;/h3&gt;&lt;p&gt;成功启动后，可以访问 Web 界面 &lt;a href=&quot;http://172.16.7.153:50070&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://172.16.7.153:50070&lt;/a&gt; 查看 NameNode 和 Datanode 信息，还可以在线查看 HDFS 中的文件。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/15.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;测试hadoop&quot;&gt;&lt;a href=&quot;#测试hadoop&quot; class=&quot;headerlink&quot; title=&quot;测试hadoop&quot;&gt;&lt;/a&gt;测试hadoop&lt;/h3&gt;&lt;p&gt;上面本地模式的例子，grep读取的是本地文件系统上的数据，本地模式是不使用集群文件系统HDFS的。&lt;br&gt;&lt;br&gt;伪分布式读取的则是 HDFS 上的数据。要使用 HDFS，首先需要在 HDFS 中创建用户目录。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在HDFS中创建目录&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 ~]$ cd /usr/local/hadoop&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 hadoop]$ bin/hdfs dfs -mkdir -p /user/hadoop&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接着将 ./etc/hadoop 中的 xml 文件作为输入文件复制到分布式文件系统中，即将 /usr/local/hadoop/etc/hadoop 复制到分布式文件系统中的 /user/root/input 中。我们使用的是hadoop用户，并且已创建相应的用户目录 /user/hadoop ，因此在命令中就可以使用相对路径如 input，其对应的绝对路径就是 /user/hadoop/input:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 hadoop]$ bin/hdfs dfs -mkdir input&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 hadoop]$ bin/hdfs dfs -put ./etc/hadoop/*.xml input&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;复制完成后，可以通过如下命令查看文件列表：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 hadoop]$ bin/hdfs dfs -ls input&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/16.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;伪分布式运行 MapReduce 作业的方式跟单机模式相同，区别在于伪分布式读取的是HDFS中的文件（可以将单机步骤中创建的本地 input 文件夹，输出结果 output 文件夹都删掉来验证这一点）。&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 hadoop]$ bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-*.jar grep input output &amp;apos;dfs[a-z.]+&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/17.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;查看运行结果的命令（查看的是位于 HDFS 中的输出结果）：&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 hadoop]$ bin/hdfs dfs -cat output/*&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;结果如下，注意到刚才我们已经更改了配置文件，所以运行结果不同。&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/18.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/19.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们也可以将运行结果取回到本地&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 hadoop]$ rm -r ./output    # 先删除本地的 output 文件夹（如果存在）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 hadoop]$ bin/hdfs dfs -get output ./output    # 将HDFS 上的 output 文件夹拷贝到本机&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/20.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 hadoop]$ cat ./output/*&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/21.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hadoop 运行程序时，输出目录不能存在，否则会提示错误 “org.apache.hadoop.mapred.FileAlreadyExistsException: Output directory hdfs://localhost:9000/user/hadoop/output already exists” ，因此若要再次执行，需要执行如下命令删除 output 文件夹：&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 hadoop]$ bin/hdfs dfs -rm -r output&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16/06/27 23:37:30 INFO fs.TrashPolicyDefault: Namenode trash configuration: Deletion interval = 0 minutes, Emptier interval = 0 minutes.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Deleted output&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt;运行 Hadoop 程序时，为了防止覆盖结果，程序指定的输出目录（如 output）不能存在，否则会提示错误，因此运行前需要先删除输出目录。在实际开发应用程序时，可考虑在程序中加上如下代码，能在每次运行时自动删除输出目录，避免繁琐的命令行操作：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Configuration conf = new Configuration();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Job job = new Job(conf);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Path outputPath = new Path(args[1]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;outputPath.getFileSystem(conf).delete(outputPath, true);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;若要关闭 Hadoop，则运行&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 hadoop]$ sbin/stop-dfs.sh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;下次启动 hadoop 时，无需进行 NameNode 的初始化，只需要运行 sbin/start-dfs.sh 就可以了。&lt;/p&gt;
&lt;h3 id=&quot;启动YARN&quot;&gt;&lt;a href=&quot;#启动YARN&quot; class=&quot;headerlink&quot; title=&quot;启动YARN&quot;&gt;&lt;/a&gt;启动YARN&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;伪分布式不启动 YARN 也可以，一般不会影响程序执行。&lt;br&gt;&lt;br&gt;玩过Hadoop V1版本的可能会疑惑，启动 Hadoop 后，见不到所说的 JobTracker 和 TaskTracker进程，这是因为新版的 Hadoop 使用了新的 MapReduce 框架（MapReduce V2，也称为 YARN，Yet Another Resource Negotiator）。&lt;br&gt;&lt;br&gt;YARN 是从 MapReduce 中分离出来的，负责资源管理与任务调度。YARN 运行于 MapReduce 之上，提供了高可用性、高扩展性。&lt;br&gt;&lt;br&gt;上述通过 sbin/start-dfs.sh 启动 Hadoop，仅仅是启动了 MapReduce 环境，我们可以启动 YARN ，让 YARN 来负责资源管理与任务调度。&lt;br&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先修改配置文件 mapred-site.xml&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 ~]$ cd /usr/local/hadoop&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 hadoop]$ mv ./etc/hadoop/mapred-site.xml.template ./etc/hadoop/mapred-site.xml&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 hadoop]$ vim mapred-site.xml&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &amp;lt;name&amp;gt;mapreduce.framework.name&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &amp;lt;value&amp;gt;yarn&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改配置文件 yarn-site.xml&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 hadoop]$ vim yarn-site.xml&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &amp;lt;name&amp;gt;yarn.nodemanager.aux-services&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             &amp;lt;value&amp;gt;mapreduce_shuffle&amp;lt;/value&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;/property&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动 YARN 了（需要先执行过 ./sbin/start-dfs.sh）&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 hadoop]$ sbin/start-yarn.sh                       # 启动YARN&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/24.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/25.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 hadoop]$ sbin/mr-jobhistory-daemon.sh start historyserver  # 开启历史服务器，才能在Web中查看任务运行情况&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/26.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/27.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;启动 YARN 之后，运行实例的方法还是一样的，仅仅是资源管理方式、任务调度不同。观察日志信息可以发现，不启用 YARN 时，是 “mapred.LocalJobRunner” 在跑任务，启用 YARN 之后，是 “mapred.YARNRunner” 在跑任务。启动 YARN 有个好处是可以通过 Web 界面查看任务的运行情况：&lt;a href=&quot;http://localhost:8088/cluster，如下图所示。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:8088/cluster，如下图所示。&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/28.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;在执行下上面的任务：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 hadoop]$ bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-*.jar grep input output &amp;apos;dfs[a-z.]+&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/29.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/jkzhao/MarkdownPictures/master/hadoop/30.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;但 YARN 主要是为集群提供更好的资源管理与任务调度，然而这在单机上体现不出价值，反而会使程序跑得稍慢些。因此在单机上是否开启 YARN 就看实际情况了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;关闭 YARN 的脚本如下&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 hadoop]$ sbin/stop-yarn.sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[hadoop@node3 hadoop]$ sbin/mr-jobhistory-daemon.sh stop historyserver&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;不启动 YARN 需重命名 mapred-site.xml。如果不想启动 YARN，务必把配置文件 mapred-site.xml 重命名，改成 mapred-site.xml.template，需要用时改回来就行。否则在该配置文件存在，而未开启 YARN 的情况下，运行程序会提示 “Retrying connect to server: 0.0.0.0/0.0.0.0:8032” 的错误，这也是为何该配置文件初始文件名为 mapred-site.xml.template。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hadoop版本&quot;&gt;&lt;a href=&quot;#Hadoop版本&quot; class=&quot;headerlink&quot; title=&quot;Hadoop版本&quot;&gt;&lt;/a&gt;Hadoop版本&lt;/h1&gt;&lt;h2 id=&quot;Hadoop版本种类&quot;&gt;&lt;a href=&quot;#Hadoop版本种类&quot; class=&quot;headerlink&quot; title=&quot;Hadoop版本种类&quot;&gt;&lt;/a&gt;Hadoop版本种类&lt;/h2&gt;&lt;p&gt;目前Hadoop发行版非常多，有华为发行版、Intel发行版、Cloudera发行版（CDH）等，所有这些发行版均是基于Apache Hadoop衍生出来的，之所以有这么多的版本，完全是由&lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;&gt;Apache Hadoop的开源协议&lt;/a&gt;决定的：任何人可以对其进行修改，并作为开源或商业产品发布/销售。&lt;br&gt;
    
    </summary>
    
    
      <category term="大数据，Hadoop" scheme="http://yoursite.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%EF%BC%8CHadoop/"/>
    
  </entry>
  
  <entry>
    <title>使用Github Pages与Hexo搭建博客</title>
    <link href="http://yoursite.com/2016/06/08/%E4%BD%BF%E7%94%A8Github-Pages%E4%B8%8EHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/06/08/使用Github-Pages与Hexo搭建博客/</id>
    <published>2016-06-08T09:58:10.000Z</published>
    <updated>2017-06-02T07:10:57.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;什么是Git-Github-Github-Pages&quot;&gt;&lt;a href=&quot;#什么是Git-Github-Github-Pages&quot; class=&quot;headerlink&quot; title=&quot;什么是Git, Github, Github Pages?&quot;&gt;&lt;/a&gt;什么是Git, Github, Github Pages?&lt;/h1&gt;&lt;p&gt;1.Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。&lt;br&gt;2.GitHub是一个具有版本管理功能的代码仓库，每个项目都有一个主页，列出项目的源文件。许多重要的项目都托管在上面。&lt;br&gt;3.GitHub Pages免费的静态站点，三个特点：免费托管、自带主题、支持自制页面和Jekyll。Github Pages 是面向用户、组织和项目开放的公共静态页面搭建托管服务，站点可以被免费托管在 Github 上，你可以选择使用 Github Pages 默认提供的域名 github.io 或者自定义域名来发布站点。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;更详尽的概念介绍见：&lt;a href=&quot;http://jmcglone.com/guides/github-pages/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在Github上搭建和管理个人网站&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;什么是Hexo？&quot;&gt;&lt;a href=&quot;#什么是Hexo？&quot; class=&quot;headerlink&quot; title=&quot;什么是Hexo？&quot;&gt;&lt;/a&gt;什么是Hexo？&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/hexojs/hexo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;是一个简单、快速、强大的静态博客框架,出自台湾大学生tommy351之手。相比于使用Jekyll、Octopress搭建个人博客，使用Hexo更轻便更快捷，下面是&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo官网&lt;/a&gt;强调Hexo的四大特点：&lt;br&gt;1.极速生成静态页面&lt;br&gt;2.支持Markdown&lt;br&gt;3.一键部署博客&lt;br&gt;4.丰富的插件支持&lt;/p&gt;
&lt;h1 id=&quot;安装Git工具&quot;&gt;&lt;a href=&quot;#安装Git工具&quot; class=&quot;headerlink&quot; title=&quot;安装Git工具&quot;&gt;&lt;/a&gt;安装Git工具&lt;/h1&gt;&lt;p&gt;依次下载安装。&lt;br&gt;1.&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt;&lt;br&gt;2.&lt;a href=&quot;https://git-scm.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;如何打开Git？&quot;&gt;&lt;a href=&quot;#如何打开Git？&quot; class=&quot;headerlink&quot; title=&quot;如何打开Git？&quot;&gt;&lt;/a&gt;如何打开Git？&lt;/h2&gt;&lt;p&gt;1.开始菜单找到Git Bash&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/QWTgytB.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;2.鼠标右键打开Git Bash&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/wmVehZb.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;注册Github&quot;&gt;&lt;a href=&quot;#注册Github&quot; class=&quot;headerlink&quot; title=&quot;注册Github&quot;&gt;&lt;/a&gt;注册Github&lt;/h1&gt;&lt;p&gt;访问&lt;a href=&quot;https://github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt;，填写注册信息，申请成功后，在GitHub官网上登录，并验证邮箱即可。 &lt;br&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/gNuzom3.png&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;h1 id=&quot;配置SSH-Key&quot;&gt;&lt;a href=&quot;#配置SSH-Key&quot; class=&quot;headerlink&quot; title=&quot;配置SSH Key&quot;&gt;&lt;/a&gt;配置SSH Key&lt;/h1&gt;&lt;p&gt;我们如何让本地git项目与远程的GitHub建立联系呢？用SSH key。&lt;/p&gt;
&lt;h2 id=&quot;检查SSH-keys的设置&quot;&gt;&lt;a href=&quot;#检查SSH-keys的设置&quot; class=&quot;headerlink&quot; title=&quot;检查SSH keys的设置&quot;&gt;&lt;/a&gt;检查SSH keys的设置&lt;/h2&gt;&lt;p&gt;首先我们需要检查你电脑上现有的ssh key，打开Git Bash，输入：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ cd ~/.ssh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果提示：No such file or directory 说明你是第一次使用git。&lt;/p&gt;
&lt;h2 id=&quot;生成新的SSH-Key&quot;&gt;&lt;a href=&quot;#生成新的SSH-Key&quot; class=&quot;headerlink&quot; title=&quot;生成新的SSH Key&quot;&gt;&lt;/a&gt;生成新的SSH Key&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ ssh-keygen -t rsa -C &amp;quot;邮件地址@youremail.com&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Generating public/private rsa key pair.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&amp;lt;这里回车就好&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;注意1:&lt;/strong&gt; 此处的邮箱地址，你可以输入自己的邮箱地址；&lt;strong&gt;注意2:&lt;/strong&gt; 此处的「-C」的是大写的「C」&lt;br&gt;然后系统会要你输入密码。在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Enter passphrase (empty for no passphrase):&amp;lt;输入密码&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Enter same passphrase again:&amp;lt;再次输入密码&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后看到这样的界面，就成功设置ssh key了： &lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/MRyuTxy.png&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;h2 id=&quot;添加SSH-Key到GitHub&quot;&gt;&lt;a href=&quot;#添加SSH-Key到GitHub&quot; class=&quot;headerlink&quot; title=&quot;添加SSH Key到GitHub&quot;&gt;&lt;/a&gt;添加SSH Key到GitHub&lt;/h2&gt;&lt;p&gt;在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH连接的设置。&lt;br&gt;1.登录&lt;a href=&quot;https://github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt;，点击右上角的”Settings”，在点击左侧列表中的”SSH and GPG keys”，点击”New SSH Key”，见下图。 &lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/39O4jsC.png&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/BEL2upr.png&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;2.把你本地生成的密钥(类似C:\Users\dell.ssh这个路径下有个id_rsa.pub文件，用文本编辑器打开这个文件)，把该文件中的全部内容复制到下面的文本框中，点击Add key。&lt;br&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/VBojDNs.png&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;h2 id=&quot;测试设置是否成功&quot;&gt;&lt;a href=&quot;#测试设置是否成功&quot; class=&quot;headerlink&quot; title=&quot;测试设置是否成功&quot;&gt;&lt;/a&gt;测试设置是否成功&lt;/h2&gt;&lt;p&gt;可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ ssh -T git@github.com&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果是下面的反馈：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;The authenticity of host &amp;apos;github.com (207.97.227.239)&amp;apos; can&amp;apos;t be established.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Are you sure you want to continue connecting (yes/no)?&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;输入yes就好，然后会看到：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Hi cnfeat! You&amp;apos;ve successfully authenticated, but GitHub does not provide shell access.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;设置用户信息&quot;&gt;&lt;a href=&quot;#设置用户信息&quot; class=&quot;headerlink&quot; title=&quot;设置用户信息&quot;&gt;&lt;/a&gt;设置用户信息&lt;/h2&gt;&lt;p&gt;现在你已经可以通过SSH连接到GitHub了，还有一些个人信息需要完善的。&lt;br&gt;Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git config --global user.name &amp;quot;jkzhao&amp;quot;//用户名&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git config --global user.email  &amp;quot;jk.zhaocoder@gmail.com&amp;quot;//填写自己的邮箱&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;#使用GitHub Pages建立博客&lt;br&gt;与 GitHub 建立好连接之后，就可以方便的使用它提供的 Pages 服务，GitHub Pages 分两种，一种是用你的GitHub用户名建立的username.github.io这样的用户&amp;amp;组织站点，另一种是依附项目的Pages。&lt;/p&gt;
&lt;p&gt;想建立个人博客是用的第一种，形如username.github.io这样的可访问的站点，每个用户名下面只能建立一个。&lt;/p&gt;
&lt;h2 id=&quot;在GitHub上建立仓库&quot;&gt;&lt;a href=&quot;#在GitHub上建立仓库&quot; class=&quot;headerlink&quot; title=&quot;在GitHub上建立仓库&quot;&gt;&lt;/a&gt;在GitHub上建立仓库&lt;/h2&gt;&lt;p&gt;访问&lt;a href=&quot;https://github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt;，点击页面右上角「New Repository」: &lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/RnRWWMa.png&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;填写项目信息：&lt;strong&gt;注意：&lt;/strong&gt;Github Pages的Repository名字是特定的，比如我Github账号是jkzhao，那么我Github Pages Repository名字就是jkzhao.github.io。&lt;br&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/3zQNxdx.png&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;h1 id=&quot;使用Hexo创建博客框架&quot;&gt;&lt;a href=&quot;#使用Hexo创建博客框架&quot; class=&quot;headerlink&quot; title=&quot;使用Hexo创建博客框架&quot;&gt;&lt;/a&gt;使用Hexo创建博客框架&lt;/h1&gt;&lt;h2 id=&quot;Hexo安装&quot;&gt;&lt;a href=&quot;#Hexo安装&quot; class=&quot;headerlink&quot; title=&quot;Hexo安装&quot;&gt;&lt;/a&gt;Hexo安装&lt;/h2&gt;&lt;p&gt;鼠标右键打开Git Bash，输入以下命令：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install -g hexo&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Hexo部署&quot;&gt;&lt;a href=&quot;#Hexo部署&quot; class=&quot;headerlink&quot; title=&quot;Hexo部署&quot;&gt;&lt;/a&gt;Hexo部署&lt;/h2&gt;&lt;p&gt;在我的电脑找个盘，建立一个名字叫「Hexo」的文件夹，然后在此文件夹中右键打开Git Bash。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo init&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Hexo随后会自动在目标文件夹建立网站所需要的所有文件。现在我们已经搭建起本地的hexo博客了，执行以下命令，然后到浏览器输入localhost:4000看看。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo g&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ hexo s&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时打开浏览器，在浏览器地址栏输入 &lt;a href=&quot;http://localhost:4000/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000/&lt;/a&gt; （默认端口为4000）, 便可以看到最原始的博客了。以后发表博文想先预览，也可以通过 hexo server 在本地先跑起来，看看效果。&lt;br&gt;效果如下图所示： &lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/iSsQF7B.png&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;此时个人博客的雏形已经有了。在 Git Bash 中按 Ctrl + C 可以停止该服务。&lt;br&gt;&lt;br&gt;## 将本地文件部署到 GitHub&lt;br&gt;### 修改 Hexo 中的 _config.yml 文件&lt;br&gt;在 Hexo 文件夹下找到 _config.yml 文件,如下图所示：&lt;br&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/HBDKyJv.png&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;打开这个文件，找到其中的 deploy 标签，改成下图所示形式(认真比对repository那一行的地址，最后的.git不要漏掉)，并保存。注意：冒号后面要加上一个空格，否则会报错。&lt;br&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/cAlEOWu.png&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;h3 id=&quot;将其-deploy-到仓库中&quot;&gt;&lt;a href=&quot;#将其-deploy-到仓库中&quot; class=&quot;headerlink&quot; title=&quot;将其 deploy 到仓库中&quot;&gt;&lt;/a&gt;将其 deploy 到仓库中&lt;/h3&gt;&lt;p&gt;鼠标右击「Hexo」文件夹，点击Git Bash，依次输入下面的命令：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;hexo clean&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo generate&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo deploy&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;到这一步，个人博客就已经部署到 GitHub 上了，你可以到你的GitHub仓库查看是否已经更新。此时，通过 your_user_name.github.io（即你那个仓库的名称，形如：”你的 GitHub 用户名”.github.io）,就可以看到你的个人博客了。&lt;/p&gt;
&lt;h1 id=&quot;安装NexT主题&quot;&gt;&lt;a href=&quot;#安装NexT主题&quot; class=&quot;headerlink&quot; title=&quot;安装NexT主题&quot;&gt;&lt;/a&gt;安装NexT主题&lt;/h1&gt;&lt;p&gt;使用Hexo生成的博客使用的是Hexo的默认主题：Landscape。后来选择了这个主题：&lt;a href=&quot;http://notes.iissnan.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NexT&lt;/a&gt;。&lt;br&gt;1.简洁大方，比较符合我的品位；&lt;br&gt;2.作者iissnan很勤快，持续更新主题，作者博客的样式就是他正在开发而未上线的NexT主题新样式。&lt;/p&gt;
&lt;h2 id=&quot;下载-NexT-主题&quot;&gt;&lt;a href=&quot;#下载-NexT-主题&quot; class=&quot;headerlink&quot; title=&quot;下载 NexT 主题&quot;&gt;&lt;/a&gt;下载 NexT 主题&lt;/h2&gt;&lt;p&gt;Hexo 有两份主要的配置文件（_config.yml），一份位于站点根目录下，另一份位于主题目录下。为了描述方便，在以下说明中，将前者称为&lt;strong&gt;站点配置文件&lt;/strong&gt;，后者称为&lt;strong&gt;主题配置文件&lt;/strong&gt;。&lt;br&gt;鼠标右击「Hexo」文件夹，点击Git Bash，依次输入下面的命令：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git clone https://github.com/iissnan/hexo-theme-next themes/next&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;启用NexT主题&quot;&gt;&lt;a href=&quot;#启用NexT主题&quot; class=&quot;headerlink&quot; title=&quot;启用NexT主题&quot;&gt;&lt;/a&gt;启用NexT主题&lt;/h2&gt;&lt;p&gt;下载完成后，打开 站点配置文件，找到 theme 字段，并将其值更改为 next。&lt;/p&gt;
&lt;h2 id=&quot;验证主题是否启用&quot;&gt;&lt;a href=&quot;#验证主题是否启用&quot; class=&quot;headerlink&quot; title=&quot;验证主题是否启用&quot;&gt;&lt;/a&gt;验证主题是否启用&lt;/h2&gt;&lt;p&gt;鼠标右击「Hexo」文件夹，点击Git Bash，依次输入下面的命令：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;hexo clean&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo generate&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo deploy&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后浏览器访问你的个人博客，就能看到你设置的主题是否启用。&lt;/p&gt;
&lt;h2 id=&quot;设置NexT主题和第三方服务&quot;&gt;&lt;a href=&quot;#设置NexT主题和第三方服务&quot; class=&quot;headerlink&quot; title=&quot;设置NexT主题和第三方服务&quot;&gt;&lt;/a&gt;设置NexT主题和第三方服务&lt;/h2&gt;&lt;h3 id=&quot;选择样式&quot;&gt;&lt;a href=&quot;#选择样式&quot; class=&quot;headerlink&quot; title=&quot;选择样式&quot;&gt;&lt;/a&gt;选择样式&lt;/h3&gt;&lt;p&gt;NexT默认的样式其实也比较丑，还有其他两种样式:Mist和Pisces。我这里用的是Pisces，启用 Pisces 很简单，仅需在 主题配置文件 中找到Scheme，添加一行scheme: Pisces。我这里的主题配置文件在路径：D:\Hexo\themes\next。&lt;/p&gt;
&lt;h3 id=&quot;菜单设置&quot;&gt;&lt;a href=&quot;#菜单设置&quot; class=&quot;headerlink&quot; title=&quot;菜单设置&quot;&gt;&lt;/a&gt;菜单设置&lt;/h3&gt;&lt;p&gt;菜单配置在 主题配置文件 的menu，下面是菜单配置示例：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;menu:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  #home: /&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  archives: /archives&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  about: /about&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  categories: /categories&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  tags: /tags&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  #commonweal: /404.html&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果需要添加菜单，需要先命令行生成页面，在配置这个menu。这里菜单可以先不配置，先做下面的一些设置。&lt;/p&gt;
&lt;h3 id=&quot;头像设置&quot;&gt;&lt;a href=&quot;#头像设置&quot; class=&quot;headerlink&quot; title=&quot;头像设置&quot;&gt;&lt;/a&gt;头像设置&lt;/h3&gt;&lt;p&gt;这里的头像是博客首页的一个头像，类似如下： &lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/VzfVlWh.png&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;1.设置或者上网找一个头像，大小要在580X580像素左右。然后放入站点的类似如下的路径下：D:\Hexo\themes\next\source\images。&lt;br&gt;2.编辑 站点配置文件，找到Avatar，值设置成/images/avatar.jpg。&lt;br&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/rniNQoa.png&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;h3 id=&quot;设置favicon图标&quot;&gt;&lt;a href=&quot;#设置favicon图标&quot; class=&quot;headerlink&quot; title=&quot;设置favicon图标&quot;&gt;&lt;/a&gt;设置favicon图标&lt;/h3&gt;&lt;p&gt;所谓的favicon图标是指网站logo，如下图： &lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/HSx1YO1.png&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;1.首先要有一个常见格式名(如.jpg, .png等)的图片作为备选favicon，选择一个favicon制作网站完成制作，例如比特虫是一个免费的在线制作ico图标网站。或者自己上网下载一个大小适合的。logo最好设置32*32。&lt;br&gt;2.将favicon.ico文件放在next主题目录下的相应路径即可，类似路径为：D:\Hexo\themes\next\source\images。然后修改 主题配置文件，找到”favicon”,添加一行内容：favicon: images/favicon.ico &lt;br&gt;&lt;br&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/36nQihk.png&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;h3 id=&quot;修改网站标题、副标题、作者信息、网站使用语言&quot;&gt;&lt;a href=&quot;#修改网站标题、副标题、作者信息、网站使用语言&quot; class=&quot;headerlink&quot; title=&quot;修改网站标题、副标题、作者信息、网站使用语言&quot;&gt;&lt;/a&gt;修改网站标题、副标题、作者信息、网站使用语言&lt;/h3&gt;&lt;p&gt;打开站点配置文件_config.yml，类似路径如下：D:\Hexo。找到Site段：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# Site &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;title: jkzhao&amp;apos;s blog   #网站标题 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;subtitle: 学习 总结 思考  #网站副标题 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;description: &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;author: Zhao Jiankai  #你的名字 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;language: zh-Hans #网站使用的语言 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;timezone: #网站时区。Hexo默认使用你电脑的时区 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;email: jk.zhaocoder@gmail.com #你的邮箱地址&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;添加社交链接&quot;&gt;&lt;a href=&quot;#添加社交链接&quot; class=&quot;headerlink&quot; title=&quot;添加社交链接&quot;&gt;&lt;/a&gt;添加社交链接&lt;/h3&gt;&lt;p&gt;1.以添加Github、微博和知乎为例，编辑 站点配置文件，找到Social Links，添加如下内容：&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/zpDQFBC.png&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;2.编辑 站点配置文件，找到Social Links Icons，添加如下内容：&lt;br&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/LYHTwIg.png&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;h3 id=&quot;添加友情链接&quot;&gt;&lt;a href=&quot;#添加友情链接&quot; class=&quot;headerlink&quot; title=&quot;添加友情链接&quot;&gt;&lt;/a&gt;添加友情链接&lt;/h3&gt;&lt;p&gt;编辑 站点配置文件，找到”links_title: 友情链接”，添加类似如下内容：&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/qQOwbNm.png&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;h3 id=&quot;添加评论区&quot;&gt;&lt;a href=&quot;#添加评论区&quot; class=&quot;headerlink&quot; title=&quot;添加评论区&quot;&gt;&lt;/a&gt;添加评论区&lt;/h3&gt;&lt;p&gt;支持Disqus和多说两种评论样式。建议中文网站选择多说，英文网站选择Disqus。下面以多说为例说明。&lt;br&gt;1.注册&lt;a href=&quot;http://duoshuo.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;多说&lt;/a&gt;。&lt;br&gt;2.使用多说钱，我们需要先在多说创建一个站点。登录&lt;a href=&quot;http://duoshuo.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;多说&lt;/a&gt;，在首页点击”我要安装”。&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/4hK6eAD.png&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;3.创建站点，填写站点相关信息。注意，&lt;em&gt;多说域名&lt;/em&gt;这一栏填写的即是你的duoshuo_shortname(这个等下要写到配置文件中，先记着)。类似如下：&lt;br&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/4ThHAmA.png&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;4.编辑站点的_config.yml，注意，添加 duoshuo_shortname 字段，设置如下：duoshuo_shortname: your-duoshuo-shortname。比如：&lt;br&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/W7DvGfr.png&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;strong&gt;注意：&lt;/strong&gt;duoshuo short name: 你的多说二级域名去掉 .duoshuo.com 部分。&lt;br&gt;&lt;br&gt;### 添加留言菜单&lt;br&gt;1.鼠标右击「Hexo」文件夹，点击Git Bash，输入下面的命令：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;hexo new page &amp;quot;guestbook&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;命令执行完后，就会发现在在 Hexo\source 目录中多了一个文件夹guestbook，里面还有一个index.md,这就代表我们新建了一个页面。 &lt;br&gt;&lt;br&gt;2.打开guestbook文件夹里的index.md，将下面的代码加到index.md底部就行。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;div class=&amp;quot;ds-recent-visitors&amp;quot; data-num-items=&amp;quot;28&amp;quot; data-avatar-size=&amp;quot;42&amp;quot; id=&amp;quot;ds-recent-visitors&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;3.然后要登录自己多说的站点(我这里就是上面设置的站点jkzhao blog)，进入设置-&amp;gt;自定义CSS，添加如下代码：&lt;br&gt;&lt;br&gt;        #ds-reset .ds-avatar img,&lt;br&gt;        #ds-recent-visitors .ds-avatar img {&lt;br&gt;            width: 54px;&lt;br&gt;            height: 54px;     /&lt;em&gt;設置图像的长和宽，这里要根据自己的评论框情況更改&lt;/em&gt;/&lt;br&gt;            border-radius: 27px;     /&lt;em&gt;设置图像圆角效果,在这里我直接设置了超过width/2的像素，即为圆形了&lt;/em&gt;/&lt;br&gt;            -webkit-border-radius: 27px;     /&lt;em&gt;圆角效果：兼容webkit浏览器&lt;/em&gt;/&lt;br&gt;            -moz-border-radius: 27px;&lt;br&gt;            box-shadow: inset 0 -1px 0 #3333sf;     /&lt;em&gt;设置图像阴影效果&lt;/em&gt;/&lt;br&gt;            -webkit-box-shadow: inset 0 -1px 0 #3333sf;&lt;br&gt;        }&lt;br&gt;&lt;br&gt;        #ds-recent-visitors .ds-avatar {&lt;br&gt;            float: left&lt;br&gt;        }&lt;br&gt;        /&lt;em&gt;隐藏多說底部版权&lt;/em&gt;/&lt;br&gt;        #ds-thread #ds-reset .ds-powered-by {&lt;br&gt;            display: none;&lt;br&gt;        }&lt;br&gt;&lt;br&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/GyU4Le4.png&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;4.菜单设置中添加留言菜单。找到NexT主题设置的_config.yml文件里面的menu项，加入如下内容：&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/toJKP6L.png&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;h3 id=&quot;添加LiveRe评论支持&quot;&gt;&lt;a href=&quot;#添加LiveRe评论支持&quot; class=&quot;headerlink&quot; title=&quot;添加LiveRe评论支持&quot;&gt;&lt;/a&gt;添加LiveRe评论支持&lt;/h3&gt;&lt;p&gt;最近多说倒闭了，来试试LiveRe（来必力）的评论插件，韩国出的。&lt;br&gt;1.注册 LiveRe&lt;br&gt;进入 &lt;a href=&quot;https://livere.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LiveRe&lt;/a&gt;，注册账号。&lt;br&gt;注意注册后，登录时输入邮箱和密码后，会跳到一个韩文页面，有个文本框需要填写，网站会向你的邮箱发一封韩文的邮件，邮件中会有一串中文数据，填入文本框中，点击韩文的登录，即可登录成功。&lt;/p&gt;
&lt;p&gt;LiveRe 有两个版本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;City 版：是一款适合所有人使用的免费版本；&lt;/li&gt;
&lt;li&gt;Premium 版：是一款能够帮助企业实现自动化管理的多功能收费版本。&lt;br&gt;我们使用 City 版就够了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;设置每篇文章在博客首页显示的预览内容&quot;&gt;&lt;a href=&quot;#设置每篇文章在博客首页显示的预览内容&quot; class=&quot;headerlink&quot; title=&quot;设置每篇文章在博客首页显示的预览内容&quot;&gt;&lt;/a&gt;设置每篇文章在博客首页显示的预览内容&lt;/h3&gt;&lt;p&gt;在写博文时，在希望展示在预览的部分下面写入：&lt;!-- more --&gt;，比如：&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/lLl6w9m.png&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;h1 id=&quot;发表博文&quot;&gt;&lt;a href=&quot;#发表博文&quot; class=&quot;headerlink&quot; title=&quot;发表博文&quot;&gt;&lt;/a&gt;发表博文&lt;/h1&gt;&lt;h2 id=&quot;新建博文&quot;&gt;&lt;a href=&quot;#新建博文&quot; class=&quot;headerlink&quot; title=&quot;新建博文&quot;&gt;&lt;/a&gt;新建博文&lt;/h2&gt;&lt;p&gt;鼠标右击「Hexo」文件夹，点击Git Bash，依次输入下面的命令：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;hexo new &amp;quot;文章题目&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;命令执行完后，就会发现在 Hexo\source_posts 目录中多了一个文件博文名.md，这就是我们刚才新建的博文。或者直接进入 Hexo\source_posts 目录中，右键新建一个文本文档，将名字改为博文名.md,这样也新建了一篇博文。建议使用命令去创建博文。&lt;/p&gt;
&lt;h2 id=&quot;新建页面&quot;&gt;&lt;a href=&quot;#新建页面&quot; class=&quot;headerlink&quot; title=&quot;新建页面&quot;&gt;&lt;/a&gt;新建页面&lt;/h2&gt;&lt;p&gt;上面新建的博文是显示在单个文章界面，这里新建的页面是作为单个页面显示的，比如下图的分类、标签、归档和关于我，你点击后都是显示为单个页面。 &lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/vmIRWP7.png&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;你只需要记住新建博文是用上面的方法，新建页面是用这里的方法就行了，这里也采用命令新建页面：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;hexo new page &amp;quot;页面名称&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;命令执行完后，就会发现在在 Hexo\source 目录中多了一个文件夹，里面还有一个index.md,这就代表我们新建了一个页面。&lt;/p&gt;
&lt;h2 id=&quot;写博文&quot;&gt;&lt;a href=&quot;#写博文&quot; class=&quot;headerlink&quot; title=&quot;写博文&quot;&gt;&lt;/a&gt;写博文&lt;/h2&gt;&lt;p&gt;用文本编辑器打开上面新建的博文，如下图所示。 &lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/52V2yDF.png&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;新建的页面略有不同，没有categories标签，自己可以加上去，也可以不加。tags也没有内容，自己也可以加一些内容。&lt;br&gt;三个”-“后面就是博文的正文内容，接下来就是撰写博文了。可以下载对应操作系统上的Markdown编辑器，使用Markdown语法写博文。具体Markdown语法请看这里的Markdown教程：&lt;a href=&quot;http://www.markdown.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown中文网&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;发博文&quot;&gt;&lt;a href=&quot;#发博文&quot; class=&quot;headerlink&quot; title=&quot;发博文&quot;&gt;&lt;/a&gt;发博文&lt;/h2&gt;&lt;p&gt;鼠标右击「Hexo」文件夹，点击Git Bash，执行下面几条命令，将博客发表到Github上：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;hexo clean&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo generate&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo deploy&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;购买并绑定域名&quot;&gt;&lt;a href=&quot;#购买并绑定域名&quot; class=&quot;headerlink&quot; title=&quot;购买并绑定域名&quot;&gt;&lt;/a&gt;购买并绑定域名&lt;/h1&gt;&lt;p&gt;GitHub 提供的二级域名[username.github.io]，平常自己写写博客也够用了。当然愿意花钱购买个性化的域名，也可以绑定到个人博客上。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是Git-Github-Github-Pages&quot;&gt;&lt;a href=&quot;#什么是Git-Github-Github-Pages&quot; class=&quot;headerlink&quot; title=&quot;什么是Git, Github, Github Pages?&quot;&gt;&lt;/a&gt;什么是Git, Github, Github Pages?&lt;/h1&gt;&lt;p&gt;1.Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。&lt;br&gt;2.GitHub是一个具有版本管理功能的代码仓库，每个项目都有一个主页，列出项目的源文件。许多重要的项目都托管在上面。&lt;br&gt;3.GitHub Pages免费的静态站点，三个特点：免费托管、自带主题、支持自制页面和Jekyll。Github Pages 是面向用户、组织和项目开放的公共静态页面搭建托管服务，站点可以被免费托管在 Github 上，你可以选择使用 Github Pages 默认提供的域名 github.io 或者自定义域名来发布站点。&lt;br&gt;
    
    </summary>
    
      <category term="搭建博客" scheme="http://yoursite.com/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Build a blog" scheme="http://yoursite.com/tags/Build-a-blog/"/>
    
  </entry>
  
  <entry>
    <title>Nginx、Nignx Plus减轻DDoS攻击(译)</title>
    <link href="http://yoursite.com/2016/05/25/Nginx%E3%80%81Nignx-Plus%E5%87%8F%E8%BD%BBDDoS%E6%94%BB%E5%87%BB-%E8%AF%91/"/>
    <id>http://yoursite.com/2016/05/25/Nginx、Nignx-Plus减轻DDoS攻击-译/</id>
    <published>2016-05-25T01:39:34.000Z</published>
    <updated>2016-05-30T05:55:28.000Z</updated>
    
    <content type="html">&lt;p&gt;DDoS攻击是一种对服务的攻击，一般是对网站的攻击，通过使用多台机器连续的流量轰炸目标服务器，以使得提供服务的主机因为资源用尽而不再能够提供有效地提供服务。&lt;/p&gt;
&lt;p&gt;典型的，攻击者尝试通过大量的连接和请求使系统饱和，以使得目标主机无法再接收新的流量，或者响应变慢地不可用。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;应用层DDoS攻击特征&quot;&gt;&lt;a href=&quot;#应用层DDoS攻击特征&quot; class=&quot;headerlink&quot; title=&quot;应用层DDoS攻击特征&quot;&gt;&lt;/a&gt;应用层DDoS攻击特征&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;应用层(Layer 7/HTTP) DDoS攻击是通过利用特定系统的脆弱点而特制的软件程序来完成。例如，对于不处理大量并发连接请求的系统，仅仅打开大量的连接，并且周期性地发送少量的流量来使得连接存活就会耗尽系统的性能以至于无法响应新连接。其他的攻击可采取发送大量的请求或非常大的请求的形式。因为这些攻击是通过肉鸡完成的，而不是通过真实的用户，攻击者可以轻松地、很快地打开大量数据的连接和发送大量的请求。&lt;br&gt;DDoS的攻击特征可以被用来帮助抵御它们，包括下面(这并不意味着以下列出来的是详尽无遗的)：&lt;br&gt;&amp;emsp;&amp;emsp;1.流量正常是来自一个特定的IP地址的集合，属于那么完成攻击的机器。所以，每一个ip地址负责发起许多连接，而不是你想象的它们来自一个真实用户。&lt;br&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;注意：&lt;/strong&gt;不要认为这些流量情况总是代表一次DDoS攻击。代理服务器转发也会造成这种情况，因为代理服务器的ip地址被作为了所有真实客户端的ip地址。不管怎么样，来自于一个代理服务器转发的连接请求数要比真正DDoS攻击的请求数量少很多。&lt;br&gt;&amp;emsp;&amp;emsp;2.因为流量是由于肉鸡产生的，而且是为了压垮目标服务器，流量的速率比一个真实用户能产生的要大的多。&lt;br&gt;&amp;emsp;&amp;emsp;3.头部中的User-Agent有时候被设置为一个非标准值。&lt;br&gt;&amp;emsp;&amp;emsp;4.头部中的Referer有时候被设置为某个值，使你能联想到这是攻击。&lt;/p&gt;
&lt;h1 id=&quot;用Nginx和Nginx-Plus抵御DDoS攻击&quot;&gt;&lt;a href=&quot;#用Nginx和Nginx-Plus抵御DDoS攻击&quot; class=&quot;headerlink&quot; title=&quot;用Nginx和Nginx Plus抵御DDoS攻击&quot;&gt;&lt;/a&gt;用Nginx和Nginx Plus抵御DDoS攻击&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;Nginx和Nginx Plus有许多特性——和上面提到的DDoS攻击的特性相结合——可以成为有效地防御DDoS攻击的一部分。因为它们是代理后端服务器，这些特性通过调节流量的进入和控制流量来防御DDoS攻击。&lt;/p&gt;
&lt;h2 id=&quot;限制请求速率&quot;&gt;&lt;a href=&quot;#限制请求速率&quot; class=&quot;headerlink&quot; title=&quot;限制请求速率&quot;&gt;&lt;/a&gt;限制请求速率&lt;/h2&gt;&lt;p&gt;你可以限制Nginx和Nginx Plus接收用户的请求速率为一个典型的真实用户请求的速率值。例如，你可以决定一个真正的用户每2秒只能访问登录页面一次。你可以配置Nginx和Nginx Plus允许一个ip地址每2秒可以尝试登录一次(相当于一分钟可以发起30次请求):&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
    &lt;code&gt;
    limit_req_zone $binary_remote_addr zone=one:10m rate=30r/m;

    server {
        ...
        location /login.html {
            limit_req zone=one;
        ...
        }
    }
    &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_limit_req_module.html?&amp;amp;_ga=1.17821497.1466916160.1455516425#limit_req_zone&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;limit_req_zone&lt;/a&gt;指令配置一个名字为one的共享区域，用来存储指定的key的请求状态，这种情况下客户端ip地址用变量($binary_remote_addr)来表示。在location /login.html模块中的&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_limit_req_module.html?&amp;amp;_ga=1.256286731.1466916160.1455516425#limit_req&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;limit_req&lt;/a&gt;指令指定了用到的共享存储区域。&lt;/p&gt;
&lt;h2 id=&quot;限制连接数&quot;&gt;&lt;a href=&quot;#限制连接数&quot; class=&quot;headerlink&quot; title=&quot;限制连接数&quot;&gt;&lt;/a&gt;限制连接数&lt;/h2&gt;&lt;p&gt;你可以限制一个客户端ip地址可以建立的连接数，指定为一个合适的值。例如，对于你网站的/store资源，你可以允许每个一个客户端ip地址打开不多于10个连接:&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
    &lt;code&gt;
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    server {
        ...
        location /store/ {
           limit_conn addr 10;
        ...
        }
    }
    &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html?&amp;amp;_ga=1.256286731.1466916160.1455516425#limit_conn_zone&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;limit_conn_zone&lt;/a&gt;指令配置了一个名为&lt;strong&gt;addr&lt;/strong&gt;的共享区域，用来存储指定的key的请求状态，这种情况下客户端ip用变量$binary_remote_addr来表示。在location /store模块中的&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html?&amp;amp;_ga=1.256286731.1466916160.1455516425#limit_conn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;limit_conn&lt;/a&gt;指令指定了共享存储区域和设置一个客户端ip的最大连接数为10。&lt;/p&gt;
&lt;h2 id=&quot;关闭慢连接&quot;&gt;&lt;a href=&quot;#关闭慢连接&quot; class=&quot;headerlink&quot; title=&quot;关闭慢连接&quot;&gt;&lt;/a&gt;关闭慢连接&lt;/h2&gt;&lt;p&gt;你可以把写数据非常少的连接关闭掉，这些连接尝试着保持连接尽可能长时间(那样会降低服务器接收新连接的能力)。Slowloris就是一个攻击的例子。&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_core_module.html?&amp;amp;_ga=1.247309060.1466916160.1455516425#client_body_timeout&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;client_body_timeout&lt;/a&gt;指令控制Nginx等待客户端的发送请求体的时间间隔，&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_core_module.html?&amp;amp;_ga=1.247309060.1466916160.1455516425#client_header_timeout&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;client_header_timeout&lt;/a&gt;指令控制Nginx等待客户端发送请求头的时间间隔。默认这两个指令设置的时间是60秒。下面的例子配置Nginx等待请求头和请求体的时间不超过5秒。&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
    &lt;code&gt;
    server {
        client_body_timeout 5s;
        client_header_timeout 5s;
        ...
    }
    &lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;把IP地址列入黑名单&quot;&gt;&lt;a href=&quot;#把IP地址列入黑名单&quot; class=&quot;headerlink&quot; title=&quot;把IP地址列入黑名单&quot;&gt;&lt;/a&gt;把IP地址列入黑名单&lt;/h2&gt;&lt;p&gt;如果你能够确认某个客户端ip地址是用来攻击的，你可以使用deny指令让Nginx和Nginx Plus不接受来自他们的连接或请求。例如，如果你确定攻击来自ip地址范围是123.123.123.1~123.123.123.16:&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
    &lt;code&gt;
    location / {
        deny 123.123.123.0/28;
        ...
    }
    &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;或者如果你确定攻击来自于客户端ip地址123.123.123.3,123.123.123.5和123.123.123.7:&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
    &lt;code&gt;
    location / {
       deny 123.123.123.3;
       deny 123.123.123.5;
       deny 123.123.123.7;
       ...
    }
    &lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;把IP地址列入白名单&quot;&gt;&lt;a href=&quot;#把IP地址列入白名单&quot; class=&quot;headerlink&quot; title=&quot;把IP地址列入白名单&quot;&gt;&lt;/a&gt;把IP地址列入白名单&lt;/h2&gt;&lt;p&gt;如果仅允许来自某个或某些特定集合范围的客户端ip地址访问你的网站，你可以一起使用allow和deny指令只允许那些ip地址访问你的网站和应用。例如，你可以限定一个指定网络中的ip地址可以访问网站或应用：&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
    &lt;code&gt;
    location / {
       allow 192.168.1.0/24;
       deny all;
       ...
    }
    &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;这里，deny指令阻止了所有的客户端ip地址的访问，除了allow指令指定的ip地址范围。&lt;/p&gt;
&lt;h2 id=&quot;使用缓存来缓和流量峰值&quot;&gt;&lt;a href=&quot;#使用缓存来缓和流量峰值&quot; class=&quot;headerlink&quot; title=&quot;使用缓存来缓和流量峰值&quot;&gt;&lt;/a&gt;使用缓存来缓和流量峰值&lt;/h2&gt;&lt;p&gt;你可以配置Nginx和Nginx Plus开启缓存和设置指定的缓存参数来吸收一次攻击中的流量峰值，为后端减轻请求压力。一些有帮助的设置有： &lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;1.&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_use_stale&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;proxy_cache_use_stale&lt;/a&gt;指令的updating参数告诉Nginx当它需要获取一个陈旧的缓存对象的更新时，它应该只用一个线程去更新缓存对象，并且在线程接收到后端服务器已更新通知的时间段内，所有线程仍然提供陈旧的对象给请求它们的客户端。当一次攻击中有重复请求同一个文件的，这将大大减少对后端服务器的请求数量。 &lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;2.&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_proxy_module.html?&amp;amp;_ga=1.88409883.1466916160.1455516425#proxy_cache_key&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;proxy_cache_key&lt;/a&gt;指令定义的key通常由嵌入的变量(默认的key有3个，$scheme$proxy_host$request_uri)。如果值中包含变量&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_core_module.html?&amp;amp;_ga=1.17821497.1466916160.1455516425#var_query_string&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;$query_string&lt;/a&gt;，那么一次攻击发送随机的查询字符串会导致过多的缓存。我们推荐不要在key中使用变量$query_string，除非你有特殊的理由。&lt;/p&gt;
&lt;h2 id=&quot;阻塞请求&quot;&gt;&lt;a href=&quot;#阻塞请求&quot; class=&quot;headerlink&quot; title=&quot;阻塞请求&quot;&gt;&lt;/a&gt;阻塞请求&lt;/h2&gt;&lt;p&gt;你可以配置Nginx和Nginx Plus去阻塞几种请求： &lt;br&gt;&lt;br&gt;&amp;emsp;&amp;emsp;1.请求一个似乎是目标的中指定URL&lt;br&gt;&amp;emsp;&amp;emsp;2.请求中的User-Agent头部的值与正常客户端请求的值符合&lt;br&gt;&amp;emsp;&amp;emsp;3.请求中的Referer头部的值被设置为了一个与攻击有关系的值&lt;br&gt;&amp;emsp;&amp;emsp;4.请求中的其他头部有与攻击相关的值。 &lt;br&gt;&lt;br&gt;例如：如果你确定DDoS攻击是攻击目标URL &lt;strong&gt;/foo.php&lt;/strong&gt;，你可以阻止对这个页面的所有请求： &lt;br&gt;&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
    &lt;code&gt;
    location /foo.php {
       deny all;
    }
    &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;或者如果你发现DDoS攻击请求中的User-Agent头部的值是foo或bar，你可以拒绝这些请求。 &lt;br&gt;&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
    &lt;code&gt;
    location / {
       if ($http_user_agent ~* foo|bar) {
           return 403;
       }
       ...
    }
    &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;变量http_&lt;em&gt;name&lt;/em&gt;引用一个请求头，在上面的例子中就是User-Agent头部。类似的方法可以用在其他的那些可能被用来标识一次攻击的头部上。&lt;/p&gt;
&lt;h2 id=&quot;限制连入后端服务器的连接数&quot;&gt;&lt;a href=&quot;#限制连入后端服务器的连接数&quot; class=&quot;headerlink&quot; title=&quot;限制连入后端服务器的连接数&quot;&gt;&lt;/a&gt;限制连入后端服务器的连接数&lt;/h2&gt;&lt;p&gt;一个Nginx和Nginx Plus实例通常可以对付的并发数比它正在负载均衡的后端服务器要多。使用Nginx Plus，你可以限制每个后端服务器所接受的请求数。例如，如果你想通过Nginx Plus限制名字叫做&lt;strong&gt;website&lt;/strong&gt;后端服务器组里的两个服务器中每个服务器接受不超过200个连接：&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
    &lt;code&gt;
    upstream website {
       server 192.168.100.1:80 max_conns=200;
       server 192.168.100.2:80 max_conns=200;
       queue 10 timeout=30s;
    }
    &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_upstream_module.html?&amp;amp;_ga=1.83879958.1466916160.1455516425#max_conns&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;max_conns&lt;/a&gt;参数为每一个后端服务器指定Nginx Plus为它们打开的最大连接数。&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_upstream_module.html?&amp;amp;_ga=1.83799446.1466916160.1455516425#queue&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;queue&lt;/a&gt;指令用于当在后端服务器组里的所有服务器都达到了它们的最大连接限制时，限制排队的请求数目。timeout参数指定了一个请求在队列中保留多久。&lt;/p&gt;
&lt;h2 id=&quot;对付基于范围的攻击&quot;&gt;&lt;a href=&quot;#对付基于范围的攻击&quot; class=&quot;headerlink&quot; title=&quot;对付基于范围的攻击&quot;&gt;&lt;/a&gt;对付基于范围的攻击&lt;/h2&gt;&lt;p&gt;攻击的一个方法就是发送一个具有非常大的值的范围头部，这可能会导致缓冲区溢出。关于如何使用NGINX和NGINX Plus以一种简单的方式减缓这种类型的攻击，见&lt;a href=&quot;https://www.nginx.com/blog/nginx-protect-cve-2015-1635/?_ga=1.246867972.1466916160.1455516425&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using NGINX and NGINX Plus to Protect Against CVE-2015-1635&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;对付高负载&quot;&gt;&lt;a href=&quot;#对付高负载&quot; class=&quot;headerlink&quot; title=&quot;对付高负载&quot;&gt;&lt;/a&gt;对付高负载&lt;/h2&gt;&lt;p&gt;DDoS攻击通常会导致很高流量负载。关于调整NGINX或者NGINX Plus以及操作系统让系统能够处理更高的负载，见&lt;a href=&quot;https://www.nginx.com/blog/tuning-nginx/?_ga=1.11987124.1466916160.1455516425&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tuning NGINX for Performance&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&quot;标识DDoS攻击&quot;&gt;&lt;a href=&quot;#标识DDoS攻击&quot; class=&quot;headerlink&quot; title=&quot;标识DDoS攻击&quot;&gt;&lt;/a&gt;标识DDoS攻击&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;到目前为主，我们主要关注可以利用NGINX和NGINX Plus减轻DDoS攻击的影响。但是NGINX或者NGINX是如何帮助你发现DDoS攻击？NGINX Plus状态模块提供了对被负载的后端服务器流量的详细度量，你可以使用这些指标发现不正常流量模式。NGINX Plus有一个web页面显示状态信息，生动地描绘了NGINX Plus系统当前的状态(示例见&lt;a href=&quot;http://demo.nginx.com/status.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;demo.nginx.com&lt;/a&gt;)。通过API的方式可以获得同样的指标度量，你可以将这些指标注入自定义或者第三方的监控系统，你可以做历史趋势分析去发现异常模式和启用报警。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;NGINX和NGINX Plus可以作为一个减轻DDoS攻击的重要组成部分，而且NGINX Plus提供额外的特性去抵御DDoS攻击，并且在它们发生时，帮助发现它们。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;em&gt;原文&lt;/em&gt;：&lt;a href=&quot;https://www.nginx.com/blog/mitigating-ddos-attacks-with-nginx-and-nginx-plus/?mkt_tok=eyJpIjoiT1dVNE56QXlabVk1WmpBMSIsInQiOiIwSkc5NzZhdDllWlIrUkZZSTZqTFwvTFZXVTVXRlhlUlFSTlErV1VtMENKVUNrRnlRTHowUVBINFRcL2Znd00zbjA1WGVTTXRTcExPSDEzRFwvVks2eVRXcFdcLzdCaHYwazJmVDlQN28xUWY5Ymc9In0%3D&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mitigating DDoS Attacks&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;DDoS攻击是一种对服务的攻击，一般是对网站的攻击，通过使用多台机器连续的流量轰炸目标服务器，以使得提供服务的主机因为资源用尽而不再能够提供有效地提供服务。&lt;/p&gt;
&lt;p&gt;典型的，攻击者尝试通过大量的连接和请求使系统饱和，以使得目标主机无法再接收新的流量，或者响应变慢地不可用。&lt;br&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>个人这一年半以来的运维总结</title>
    <link href="http://yoursite.com/2016/05/23/%E4%B8%AA%E4%BA%BA%E8%BF%99%E4%B8%80%E5%B9%B4%E5%8D%8A%E4%BB%A5%E6%9D%A5%E7%9A%84%E8%BF%90%E7%BB%B4%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/05/23/个人这一年半以来的运维总结/</id>
    <published>2016-05-23T05:29:35.000Z</published>
    <updated>2016-06-08T09:40:34.000Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;p&gt;从事了一年半的运维工作，更多的是做业务运维，或者说是应用运维。对于机房内的一些基础设施，比如交换机、路由器并不清楚怎么去配置。&lt;br&gt;&lt;br&gt;对于一个大公司来说，如果有成型的运维体系，运维按照工作内容来看，可分为基础运维、业务运维、监控运维和产品运维。而我的工作内容就是一些开源组件和商用中间件集群的部署和调优，并写一些脚本做一些简单的自动化部署。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;最近调到其他产品组开始搞大数据运维，同时也开始着手docker的调研。一个人去做这些事情有好处也有坏处，好处是培养自己解决问题的能力，因为处于研发部，研发人员对运维的工作懂得少之又少，所以遇到问题也只能自己想办法去学习相关的知识或者去google解决；而坏处就是去调研一个东西花的时间较长，而且很多东西只能有自己这一个思维去想，不少问题考虑的不够全面。解决问题花的时间也比较长，我记得最长的一次是花了4天。&lt;br&gt;&lt;br&gt;这一年多以来，加了无数的班，基本没什么事情都是在公司学习。学习Linux基础，学习各种服务的原理和部署，学习各种自动化工具，无论说这些东西公司用到用不到。当然，公司产品组用到的一些，也提供了我场景，让我去应用。但是毕竟不是互联网公司，用到的东西不多，而且业务量不大，所以用的也不深。至于加班不加班这种事情，就看自己怎么想了，你觉得你是为公司加班的，而公司又不给加班费，那么你可能会觉得很不爽。如果你觉得你是为自己提升技术能力加班的，那么可能就不会有这方面的怨言了。当然，我们公司也是没有加班费的。&lt;br&gt;&lt;br&gt;干了一年多，也学了不少东西。但是由于身边也没什么做运维工作的人，所以对自己现在所处的水平也是比较疑惑。于是陆续也查看了各大招聘网站上对于Linux运维工程师的要求，也投出了不少，面试了几家。其中包括杭州的几家互联网公司(基本都是6000上以上的)、南京的一些大小公司。杭州的互联网公司面试时相对比较专业，一般都有好几轮，一面会针对简历上的技术点进行询问，二面就是针对整体架构、设计上的一些询问，平时思考问题的方式等。&lt;br&gt;&lt;br&gt;之前一直对自己的能力也不是很清楚，但是经过这几家的面试，发现即便是杭州的互联网公司，自己还是能够定岗到中级运维工程师，也算是对我这一年多的肯定吧。但是与一些运维资深人员交流下来发现两个问题，第一是对一些开源的东西理解的还不够深入；第二是不懂代码，真的很多事情做不了。就如自己一直想要去做运维开发这块，想要去做运维自动化平台，去解决公司环境部署、版本迭代这些重复劳动的工作。但是由于coding能力不足，人手短缺，这块也只是用jenkins+shell做了简单的持续集成和自动发布。还有就是不懂代码，对一些开源的项目理解不够深入，仅仅会使用是完全不够的。要想想它是怎么实现的，如何实现的，以及为什么要这么来实现。在学习的时候，不能浮于表面，要多思考。&lt;br&gt;&lt;br&gt;纵观大多数大型公司的招聘Linux运维工程师的要求，大多都有一条熟悉shell/python/ruby中的一门或两门语言，遇到大数据这种职位，还会要求你精通java。我也打算从java入手，在学校里也是学过java的，只是没做过什么大项目。正好我这个组也就是在做大数据产品，接下来又要经过一段艰难的时光了。当然运维这块工作还是要由我来做，只是把工作的重心转移到开发上来。&lt;br&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;从事了一年半的运维工作，更多的是做业务运维，或者说是应用运维。对于机房内的一些基础设施，比如交换机、路由器并不清楚怎么去配置。&lt;br /&gt;&lt;br&gt;对于一个大公司来说，如果有成型的运维体系，运维按照工作内容来看，可分为基础运维、业务运维、监控运维和产品运维。而我的工作内容就是一些开源组件和商用中间件集群的部署和调优，并写一些脚本做一些简单的自动化部署。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
</feed>
